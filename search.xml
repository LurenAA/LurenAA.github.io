<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>173.二叉搜索树迭代器</title>
      <link href="/2020/02/21/leetcode173/"/>
      <url>/2020/02/21/leetcode173/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class BSTIterator &#123;</span><br><span class="line">public:</span><br><span class="line">    BSTIterator(TreeNode* root) &#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; stk;</span><br><span class="line">        while(stk.size() || root) &#123;</span><br><span class="line">            while(root) &#123;</span><br><span class="line">                stk.push(root);</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            auto top = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            vals.push_back(top-&gt;val);</span><br><span class="line">            root = top-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** @return the next smallest number */</span><br><span class="line">    int next() &#123;</span><br><span class="line">        return vals[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** @return whether we have a next smallest number */</span><br><span class="line">    bool hasNext() &#123;</span><br><span class="line">        return i != vals.size();</span><br><span class="line">    &#125;   </span><br><span class="line">private:</span><br><span class="line">    vector&lt;int&gt; vals;</span><br><span class="line">    int i = 0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>62/62 cases passed (60 ms) <br><br>Your runtime beats 60.82 % of cpp submissions <br><br>Your memory usage beats 5.01 % of cpp submissions (28.7 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>410.分割数组的最大值</title>
      <link href="/2020/02/21/leetcode410/"/>
      <url>/2020/02/21/leetcode410/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">int splitArray(vector&lt;int&gt;&amp; nums, int m) &#123;</span><br><span class="line">        long l = nums[0], h = 0;//int类型在这里不合适，因为h可能会超过int类型能表示的最大值</span><br><span class="line">        for (auto i : nums)</span><br><span class="line">        &#123;</span><br><span class="line">            h += i;</span><br><span class="line">            l = l &gt; i ? l : i;</span><br><span class="line">        &#125;</span><br><span class="line">        while (l&lt;h)</span><br><span class="line">        &#123;</span><br><span class="line">            long mid = (l + h) / 2;</span><br><span class="line">            long temp = 0;</span><br><span class="line">            int cnt = 1;//初始值必须为1</span><br><span class="line">            for(auto i:nums)</span><br><span class="line">            &#123;</span><br><span class="line">                temp += i;</span><br><span class="line">                if(temp&gt;mid)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = i;</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(cnt&gt;m)</span><br><span class="line">                l = mid + 1;</span><br><span class="line">            else</span><br><span class="line">                h = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        return l;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>719.找出第 k 小的距离对</title>
      <link href="/2020/02/21/leetcode719/"/>
      <url>/2020/02/21/leetcode719/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int smallestDistancePair(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        int left = 0,</span><br><span class="line">            right = nums.back() - nums.front(), mi;</span><br><span class="line">        while(left &lt; right) &#123;</span><br><span class="line">            mi = left + (right - left) / 2;</span><br><span class="line">            int count = 0;</span><br><span class="line">            int start = 0; </span><br><span class="line">            for(int i = 0;i &lt; nums.size(); ++i) &#123;</span><br><span class="line">                while(nums[i] - nums[start] &gt; mi) &#123;</span><br><span class="line">                    ++start;</span><br><span class="line">                &#125;</span><br><span class="line">                count += i - start;</span><br><span class="line">            &#125;</span><br><span class="line">            if(count &lt; k) &#123; //如果小于K个</span><br><span class="line">                left = mi + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right = mi;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>19/19 cases passed (16 ms) <br><br>Your runtime beats 72.62 % of cpp submissions <br><br>Your memory usage beats 8.33 % of cpp submissions (12.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.寻找两个有序数组的中位数</title>
      <link href="/2020/02/21/leetcode4/"/>
      <url>/2020/02/21/leetcode4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        int M = nums1.size(),</span><br><span class="line">        N = nums2.size(),</span><br><span class="line">        target_len  = ceil((double)(M + N + 1) / 2),</span><br><span class="line">        nums1_iter = 0, nums2_iter = 0;</span><br><span class="line">        double left = -1, right = -1;</span><br><span class="line">        for(int i = 0; i &lt; target_len; ++i) &#123;</span><br><span class="line">            left = right;</span><br><span class="line">            if(nums2_iter &gt;= N || (nums1_iter &lt; M &amp;&amp; nums1[nums1_iter] &lt;= nums2[nums2_iter]))&#123;</span><br><span class="line">                right = nums1[nums1_iter++];</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                right = nums2[nums2_iter++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if((M + N) % 2) </span><br><span class="line">            return right;</span><br><span class="line">        return (left + right) / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>2085/2085 cases passed (72 ms)<br><br>Your runtime beats 6.51 % of cpp submissions<br><br>Your memory usage beats 5.16 % of cpp submissions (90.9 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>287.寻找重复数</title>
      <link href="/2020/02/21/leetcode287/"/>
      <url>/2020/02/21/leetcode287/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分法"><a href="#😂二分法" class="headerlink" title="😂二分法"></a>😂二分法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findDuplicate(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        find(nums, 0, nums.size() - 1);</span><br><span class="line">        return answer;</span><br><span class="line">    &#125;</span><br><span class="line">    void find(vector&lt;int&gt;&amp; nums, int left, int right) &#123;</span><br><span class="line">        if(left &gt; right)</span><br><span class="line">            return ;</span><br><span class="line">        int mid = (left + right ) / 2;</span><br><span class="line">        if(mid - 1 &gt;= 0 &amp;&amp; nums[mid - 1] == nums[mid] || mid + 1 &lt;= nums.size() - 1 &amp;&amp; nums[mid + 1] == nums[mid])</span><br><span class="line">            answer = nums[mid];</span><br><span class="line">        find(nums, left, mid - 1);</span><br><span class="line">        find(nums, mid + 1, right);</span><br><span class="line">    &#125;</span><br><span class="line">private: </span><br><span class="line">    int answer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>53/53 cases passed (20 ms) <br><br>Your runtime beats 23 % of cpp submissions <br><br>Your memory usage beats 5.07 % of cpp submissions (13.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>154.寻找旋转排序数组中的最小值 II</title>
      <link href="/2020/02/21/leetcode154/"/>
      <url>/2020/02/21/leetcode154/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><p>&emsp;&emsp;这个题目有难度，存在相同数字导致它时而取左边界，时而取右边界。<br><br>&emsp;&emsp;比如[3,3,3,3,1,3,3],这时按理说我查找3，并且取右界，然后与lo + 1的位置比较，取较小的那个即可。 <br><br>&emsp;&emsp;但是如果[3,1,3,3,3,3,3,3],这时如果我查找右界，那么回到倒数第二个3的位置，这就不对了。<br>同理，单纯取左界也是不对的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findMin(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int lo = 0, </span><br><span class="line">        hi = nums.size() - 1, m;</span><br><span class="line">        while(lo &lt; hi) &#123;</span><br><span class="line">            m = lo + (hi - lo) / 2;</span><br><span class="line">            if(nums[m] &gt; nums[hi]) &#123;</span><br><span class="line">                lo = m + 1;</span><br><span class="line">            &#125; else if(nums[m] &lt; nums[hi])&#123;</span><br><span class="line">                hi = m;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hi = hi - 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[lo];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>192/192 cases passed (12 ms)<br><br>Your runtime beats 17.42 % of cpp submissions<br><br>Your memory usage beats 5.15 % of cpp submissions (14.5 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>744.寻找比目标字母大的最小字母</title>
      <link href="/2020/02/21/leetcode744/"/>
      <url>/2020/02/21/leetcode744/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    char nextGreatestLetter(vector&lt;char&gt;&amp; letters, char target) &#123;</span><br><span class="line">        int lo = 0 , hi = letters.size(), m;</span><br><span class="line">        while(hi &gt; lo) &#123;</span><br><span class="line">            m = lo + (hi - lo) / 2;</span><br><span class="line">            if(letters[m] &lt;= target) &#123;</span><br><span class="line">                lo = m + 1;</span><br><span class="line">            &#125; else </span><br><span class="line">                hi = m;</span><br><span class="line">        &#125;</span><br><span class="line">        if(lo &gt;= letters.size()) </span><br><span class="line">            return letters[0];</span><br><span class="line">        return letters[lo];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>165/165 cases passed (4 ms)<br><br>Your runtime beats 99.88 % of cpp submissions<br><br>Your memory usage beats 11.87 % of cpp submissions (9.1 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>367.有效的完全平方数</title>
      <link href="/2020/02/21/leetcode367/"/>
      <url>/2020/02/21/leetcode367/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isPerfectSquare(int num) &#123;</span><br><span class="line">        int lo = 0,</span><br><span class="line">        ho = num / 2 + 1, mid;</span><br><span class="line">        while(lo &lt; ho) &#123;</span><br><span class="line">            mid = lo + (ho - lo) / 2;</span><br><span class="line">            if(pow(mid, 2) &lt; num) &#123;</span><br><span class="line">                lo = mid + 1;</span><br><span class="line">            &#125; else </span><br><span class="line">                ho = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        if(pow(lo , 2) == num)</span><br><span class="line">            return true;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>68/68 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 54.55 % of cpp submissions (8 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>658.找到 K 个最接近的元素</title>
      <link href="/2020/02/20/leetcode658/"/>
      <url>/2020/02/20/leetcode658/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; findClosestElements(vector&lt;int&gt;&amp; nums, int k, int x) &#123;</span><br><span class="line">        vector&lt;int&gt; vec;</span><br><span class="line">        int lo = 0, </span><br><span class="line">        hi = nums.size() - 1, m;</span><br><span class="line">        while(lo &lt; hi) &#123;</span><br><span class="line">            m = lo + (hi - lo) / 2;</span><br><span class="line">            if(nums[m] &lt; x) &#123;</span><br><span class="line">                lo = m + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hi = m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int lol = lo - 1;</span><br><span class="line">        while(lol &gt;= 0 &amp;&amp; lo &lt; nums.size() &amp;&amp; k) &#123;</span><br><span class="line">            if(abs(nums[lol] - x) &gt; abs(nums[lo] - x)) &#123;</span><br><span class="line">                --k;</span><br><span class="line">                vec.push_back(nums[lo++]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                --k;</span><br><span class="line">                vec.push_back(nums[lol--]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while(k &amp;&amp; lo &lt; nums.size()) &#123;</span><br><span class="line">            --k;</span><br><span class="line">            vec.push_back(nums[lo++]);</span><br><span class="line">        &#125;</span><br><span class="line">        while(k &amp;&amp; lol &gt;= 0) &#123;</span><br><span class="line">            --k;</span><br><span class="line">            vec.push_back(nums[lol--]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(vec.begin(), vec.end());</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>56/56 cases passed (80 ms) <br><br>Your runtime beats 66.67 % of cpp submissions <br><br>Your memory usage beats 5.13 % of cpp submissions (15 MB) <br></p></blockquote><h4 id="😷第二次"><a href="#😷第二次" class="headerlink" title="😷第二次"></a>😷第二次</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; findClosestElements(vector&lt;int&gt;&amp; nums, int k, int x) &#123;</span><br><span class="line">        vector&lt;int&gt; vec;</span><br><span class="line">        int lo = 0, </span><br><span class="line">        hi = nums.size() - 1, m;</span><br><span class="line">        while(lo &lt; hi) &#123;</span><br><span class="line">            m = lo + (hi - lo) / 2;</span><br><span class="line">            if(nums[m] &lt; x) &#123;</span><br><span class="line">                lo = m + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hi = m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int lol = lo - 1;</span><br><span class="line">        while(lol &gt;= 0 &amp;&amp; lo &lt; nums.size() &amp;&amp; k) &#123;</span><br><span class="line">            if(x - nums[lol] &gt; nums[lo] - x) &#123;</span><br><span class="line">                --k;</span><br><span class="line">                vec.push_back(nums[lo++]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                --k;</span><br><span class="line">                vec.insert(vec.begin(), nums[lol--]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while(k &amp;&amp; lo &lt; nums.size()) &#123;</span><br><span class="line">            --k;</span><br><span class="line">            vec.push_back(nums[lo++]);</span><br><span class="line">        &#125;</span><br><span class="line">        while(k &amp;&amp; lol &gt;= 0) &#123;</span><br><span class="line">            --k;</span><br><span class="line">            vec.insert(vec.begin(), nums[lol--]);</span><br><span class="line">        &#125;</span><br><span class="line">        // sort(vec.begin(), vec.end());</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>56/56 cases passed (220 ms) <br><br>Your runtime beats 9.55 % of cpp submissions <br><br>Your memory usage beats 5.13 % of cpp submissions (15 MB) <br></p></blockquote><h4 id="🥵最优解"><a href="#🥵最优解" class="headerlink" title="🥵最优解"></a>🥵最优解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; findClosestElements(vector&lt;int&gt;&amp; arr, int k, int x) &#123;</span><br><span class="line">    int lo = 0, hi = arr.size() - k;</span><br><span class="line">    while (lo &lt; hi) &#123;</span><br><span class="line">        int mid = lo + (hi - lo &gt;&gt; 1);</span><br><span class="line">        if (x - arr[mid] &gt; arr[mid + k] - x ) &#123;</span><br><span class="line">            lo = mid + 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            hi = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return vector&lt;int&gt;(arr.begin() + lo, arr.begin() + lo + k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>56/56 cases passed (76 ms)<br><br>Your runtime beats 68.03 % of cpp submissions<br><br>Your memory usage beats 8.06 % of cpp submissions (14.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34.在排序数组中查找元素的第一个和最后一个位置</title>
      <link href="/2020/02/20/leetcode34/"/>
      <url>/2020/02/20/leetcode34/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        if(!nums.size())</span><br><span class="line">            return &#123;-1, -1&#125;;</span><br><span class="line">        int left = search_left(nums, target);</span><br><span class="line">        int right = search_right(nums, target);</span><br><span class="line">        if(left &gt; right) </span><br><span class="line">            return &#123;-1, -1&#125;;</span><br><span class="line">        return &#123;left, right&#125;; </span><br><span class="line">    &#125;</span><br><span class="line">    int search_left(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int lo = 0, </span><br><span class="line">        hi = nums.size(), m;</span><br><span class="line">        while(lo &lt; hi) &#123;</span><br><span class="line">            m = lo + (hi - lo) / 2;</span><br><span class="line">            if(nums[m] &lt; target) &#123;</span><br><span class="line">                lo = m + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hi = m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return lo;</span><br><span class="line">    &#125;</span><br><span class="line">    int search_right(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int lo = 0, </span><br><span class="line">        hi = nums.size(), m;</span><br><span class="line">        while(lo &lt; hi) &#123;</span><br><span class="line">            m = lo + (hi - lo) / 2;</span><br><span class="line">            if(nums[m] &lt;= target) &#123;</span><br><span class="line">                lo = m + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hi = m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return lo - 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>88/88 cases passed (12 ms) <br><br>Your runtime beats 49.48 % of cpp submissions <br><br>Your memory usage beats 5.07 % of cpp submissions (10.5 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>153.寻找旋转排序数组中的最小值</title>
      <link href="/2020/02/20/leetcode153/"/>
      <url>/2020/02/20/leetcode153/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><p>&emsp;&emsp;值得注意的是：if(nums[m] &gt; mo) { 这行代码可以改为 if(nums[m] &gt;= mo) { <br><br>&emsp;&emsp;原因是：这里不存在nums[m] == mo的情况。<br>例如： [3 4 5 1 2]</p><ol><li>lo = 0 hi = 3 m = 1 A[m] = 4 &gt; 2</li><li>lo = 2 hi = 3 m = 1 A[m] = 5 &gt; 2</li></ol><p>&emsp;&emsp;从道理上来说，是因为这里是分叉点，所以不存在相等的状况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findMin(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int mo = nums.back(),</span><br><span class="line">        lo = 0, hi = nums.size() - 1, m;</span><br><span class="line">        while(lo &lt; hi) &#123;</span><br><span class="line">            m = lo + (hi - lo) / 2;</span><br><span class="line">            if(nums[m] &gt; mo) &#123;</span><br><span class="line">                lo = m + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hi = m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[lo];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>146/146 cases passed (4 ms) <br><br>Your runtime beats 88.97 % of cpp submissions <br><br>Your memory usage beats 5.4 % of cpp submissions (8.9 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>162.寻找峰值</title>
      <link href="/2020/02/20/leetcode162/"/>
      <url>/2020/02/20/leetcode162/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findPeakElement(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int lo = 0,</span><br><span class="line">        hi = nums.size() - 1, mi;</span><br><span class="line">        while(lo &lt; hi) &#123;</span><br><span class="line">            mi = lo + (hi - lo) / 2;</span><br><span class="line">            if(nums[mi] &gt; nums[mi + 1]) &#123;</span><br><span class="line">                hi = mi;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                lo = mi + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>278.第一个错误的版本</title>
      <link href="/2020/02/20/leetcode278/"/>
      <url>/2020/02/20/leetcode278/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int firstBadVersion(int n) &#123;</span><br><span class="line">        int lo = 1,</span><br><span class="line">        ho = n == 2147483647 ? n : n + 1,</span><br><span class="line">        mid ;</span><br><span class="line">        while(lo &lt; ho) &#123;</span><br><span class="line">            mid = lo + (ho - lo) / 2;</span><br><span class="line">            if(isBadVersion(mid)) &#123;</span><br><span class="line">                ho = mid;</span><br><span class="line">            &#125; else if (!isBadVersion(mid))</span><br><span class="line">                lo = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>33.搜索旋转排序数组</title>
      <link href="/2020/02/20/leetcode33/"/>
      <url>/2020/02/20/leetcode33/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int search(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int div = 0;</span><br><span class="line">        int M = nums.size();</span><br><span class="line">        nums.push_back(1000);</span><br><span class="line">        for(;div &lt; M; ++div) &#123;</span><br><span class="line">            if(nums[div] &gt; nums[div + 1]) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int a = srch(nums, target, 0, div);</span><br><span class="line">        if(a != -1)</span><br><span class="line">            return a;</span><br><span class="line">        if(div != M) &#123;</span><br><span class="line">            return srch(nums, target, div + 1, M - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    int srch(vector&lt;int&gt;&amp; nums, int target, int be, int ed) &#123;</span><br><span class="line">        int lo = be,</span><br><span class="line">        hi = ed, mi;</span><br><span class="line">        while(lo &lt; hi) &#123;</span><br><span class="line">            mi = lo + (hi - lo) / 2;</span><br><span class="line">            if(nums[mi] &lt; target) &#123;</span><br><span class="line">                lo = mi + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hi = mi;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(nums[lo] == target)</span><br><span class="line">            return lo;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>196/196 cases passed (4 ms) <br><br>Your runtime beats 89.74 % of cpp submissions <br><br>Your memory usage beats 5.18 % of cpp submissions (9.1 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>374.猜数字大小</title>
      <link href="/2020/02/20/leetcode374/"/>
      <url>/2020/02/20/leetcode374/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int guess(int num);</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int guessNumber(int n) &#123;</span><br><span class="line">        int lo = 1,</span><br><span class="line">        hi = n,</span><br><span class="line">        mi, test;</span><br><span class="line">        while(lo &lt;= hi) &#123;</span><br><span class="line">            mi = lo + (hi - lo) / 2;</span><br><span class="line">            test = guess(mi);</span><br><span class="line">            if(test &lt; 0) &#123;</span><br><span class="line">                hi = mi - 1;</span><br><span class="line">            &#125; else if (test &gt; 0) &#123;</span><br><span class="line">                lo = mi + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return mi;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>25/25 cases passed (4 ms)<br><br>Your runtime beats 59.61 % of cpp submissions<br><br>Your memory usage beats 5.55 % of cpp submissions (8.3 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69.x 的平方根</title>
      <link href="/2020/02/20/leetcode69/"/>
      <url>/2020/02/20/leetcode69/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int mySqrt(int x) &#123;</span><br><span class="line">        int lo = 1,</span><br><span class="line">        hi = x,</span><br><span class="line">        mi;</span><br><span class="line">        while(lo &lt; hi) &#123;</span><br><span class="line">            mi = lo + (hi - lo) / 2;</span><br><span class="line">            if(mi &lt; x / mi) &#123;</span><br><span class="line">                lo = mi + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hi = mi;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(lo &gt; x / lo)</span><br><span class="line">            return lo - 1;</span><br><span class="line">        return lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>1017/1017 cases passed (4 ms) <br><br>Your runtime beats 83.41 % of cpp submissions <br><br>Your memory usage beats 48.78 % of cpp submissions (8.2 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>236.二叉树的最近公共祖先</title>
      <link href="/2020/02/20/leetcode236/"/>
      <url>/2020/02/20/leetcode236/</url>
      
        <content type="html"><![CDATA[<h4 id="😂递归"><a href="#😂递归" class="headerlink" title="😂递归"></a>😂递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123;</span><br><span class="line">        if(!root || root == q || root == p)</span><br><span class="line">            return root;</span><br><span class="line">        TreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);</span><br><span class="line">        TreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);</span><br><span class="line">        if(left &amp;&amp; right) </span><br><span class="line">            return root;</span><br><span class="line">        if(left)</span><br><span class="line">            return left;</span><br><span class="line">        return right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>117.填充每个节点的下一个右侧节点指针 2</title>
      <link href="/2020/02/20/leetcode117/"/>
      <url>/2020/02/20/leetcode117/</url>
      
        <content type="html"><![CDATA[<h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* connect(Node* root) &#123;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        if(root)</span><br><span class="line">            q.push(root);</span><br><span class="line">        Node* pre = nullptr;</span><br><span class="line">        while(q.size()) &#123;</span><br><span class="line">            int sz = q.size();</span><br><span class="line">            for(int i = 0; i &lt; sz; ++i) &#123;</span><br><span class="line">                Node* node = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                if(node-&gt;left) &#123;</span><br><span class="line">                    q.push(node-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                if(node-&gt;right) &#123;</span><br><span class="line">                    q.push(node-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">                if(!pre) &#123;</span><br><span class="line">                    pre = node;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    pre-&gt;next = node;</span><br><span class="line">                    pre = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>55/55 cases passed (8 ms) <br><br>Your runtime beats 99.5 % of cpp submissions <br><br>Your memory usage beats 34.56 % of cpp submissions (20.1 MB) <br></p></blockquote><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>重点在于：需要从右边往左边递归。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* connect(Node* root) &#123;</span><br><span class="line">        if(root &amp;&amp; (root-&gt;left || root-&gt;right)) &#123;</span><br><span class="line">            if(root-&gt;left &amp;&amp; root-&gt;right)</span><br><span class="line">                root-&gt;left-&gt;next = root-&gt;right;</span><br><span class="line">            Node* node = root-&gt;right ? root-&gt;right : root-&gt;left;</span><br><span class="line">            Node* head = root-&gt;next;</span><br><span class="line">            while(head &amp;&amp; !head-&gt;left &amp;&amp; !head-&gt;right) &#123;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            node-&gt;next = !head ? nullptr : head-&gt;left ? head-&gt;left : head-&gt;right;</span><br><span class="line"></span><br><span class="line">            connect(root-&gt;right);</span><br><span class="line">            connect(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>55/55 cases passed (16 ms)<br><br>Your runtime beats 85.93 % of cpp submissions<br><br>Your memory usage beats 35.68 % of cpp submissions (20 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>116.填充每个节点的下一个右侧节点指针</title>
      <link href="/2020/02/20/leetcode116/"/>
      <url>/2020/02/20/leetcode116/</url>
      
        <content type="html"><![CDATA[<h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* connect(Node* root) &#123;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        if(root)</span><br><span class="line">            q.push(root);</span><br><span class="line">        Node* pre = nullptr;</span><br><span class="line">        while(q.size()) &#123;</span><br><span class="line">            int sz = q.size();</span><br><span class="line">            for(int i = 0; i &lt; sz; ++i) &#123;</span><br><span class="line">                Node* node = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                if(node-&gt;left) &#123;</span><br><span class="line">                    q.push(node-&gt;left);</span><br><span class="line">                    q.push(node-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">                if(!pre) &#123;</span><br><span class="line">                    pre = node;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    pre-&gt;next = node;</span><br><span class="line">                    pre = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>58/58 cases passed (40 ms)<br><br>Your runtime beats 27.01 % of cpp submissions<br><br>Your memory usage beats 39.05 % of cpp submissions (19.6 MB)<br></p></blockquote><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* connect(Node* root) &#123;</span><br><span class="line">        if(!root)   </span><br><span class="line">            return root;</span><br><span class="line">        helper(root-&gt;left, root-&gt;right);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    void helper(Node* left, Node* right) &#123;</span><br><span class="line">        if(!left || !right)</span><br><span class="line">            return ;</span><br><span class="line">        left-&gt;next = right;</span><br><span class="line">        helper(left-&gt;left, left-&gt;right);</span><br><span class="line">        helper(left-&gt;right, right-&gt;left);</span><br><span class="line">        helper(right-&gt;left, right-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>58/58 cases passed (36 ms)<br><br>Your runtime beats 32.24 % of cpp submissions<br><br>Your memory usage beats 63.08 % of cpp submissions (19.3 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>105.从前序与中序遍历序列构造二叉树</title>
      <link href="/2020/02/20/leetcode105/"/>
      <url>/2020/02/20/leetcode105/</url>
      
        <content type="html"><![CDATA[<h4 id="😂递归"><a href="#😂递归" class="headerlink" title="😂递归"></a>😂递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) &#123;</span><br><span class="line">        return helper(preorder, inorder, 0, 0, inorder.size() - 1);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* helper(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder, int p, int ib, int ie)&#123;</span><br><span class="line">        if(ib &gt; ie || p &gt;= preorder.size()) </span><br><span class="line">            return nullptr;</span><br><span class="line">        int node_val = preorder[p];</span><br><span class="line">        int in_mid = -1;</span><br><span class="line">        for(int i = ib; i &lt;= ie; ++i) </span><br><span class="line">            if(inorder[i] == node_val) &#123;</span><br><span class="line">                in_mid = i;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        TreeNode* node = new TreeNode(node_val);</span><br><span class="line">        node-&gt;left = helper(preorder, inorder, p + 1, ib, in_mid - 1);</span><br><span class="line">        node-&gt;right = helper(preorder, inorder, p + 1 + in_mid - ib, in_mid + 1, ie);</span><br><span class="line">        return node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>203/203 cases passed (16 ms)<br><br>Your runtime beats 91.27 % of cpp submissions<br><br>Your memory usage beats 58.58 % of cpp submissions (16.8 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>106.从中序与后序遍历序列构造二叉树</title>
      <link href="/2020/02/20/leetcode106/"/>
      <url>/2020/02/20/leetcode106/</url>
      
        <content type="html"><![CDATA[<h4 id="😂递归"><a href="#😂递归" class="headerlink" title="😂递归"></a>😂递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) &#123;</span><br><span class="line">        return helper(inorder, postorder, 0, inorder.size() - 1, 0, postorder.size() - 1);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* helper(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder, int ib, int ie, int pb, int pe)</span><br><span class="line">    &#123;</span><br><span class="line">        if(ib &gt; ie) </span><br><span class="line">            return nullptr;</span><br><span class="line">        int top = postorder[pe];</span><br><span class="line">        int pmid = -1;</span><br><span class="line">        for(int i = ib; i &lt;= ie; ++i) &#123;</span><br><span class="line">            if(inorder[i] == top) </span><br><span class="line">                pmid = i;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* new_one = new TreeNode(top);</span><br><span class="line">        new_one-&gt;right = helper(inorder, postorder,pmid + 1, ie, pb, pe - 1);</span><br><span class="line">        new_one-&gt;left = helper(inorder, postorder,ib, pmid - 1, pb, pe - 1 + pmid - ie);</span><br><span class="line">        return new_one;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>203/203 cases passed (20 ms)<br><br>Your runtime beats 80.17 % of cpp submissions<br><br>Your memory usage beats 72.29 % of cpp submissions (16.7 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>112.路径总和</title>
      <link href="/2020/02/20/leetcode112/"/>
      <url>/2020/02/20/leetcode112/</url>
      
        <content type="html"><![CDATA[<h4 id="😂自顶向下递归"><a href="#😂自顶向下递归" class="headerlink" title="😂自顶向下递归"></a>😂自顶向下递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool hasPathSum(TreeNode* root, int sum) &#123;</span><br><span class="line">        s(root, 0, sum);</span><br><span class="line">        return answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void s(TreeNode* root, int sum, int sum2) &#123;</span><br><span class="line">        if(!root)</span><br><span class="line">            return ;</span><br><span class="line">        int vl = sum + root-&gt;val;</span><br><span class="line">        if(vl == sum2 &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right) </span><br><span class="line">            answer = true;</span><br><span class="line">        s(root-&gt;left, vl, sum2);</span><br><span class="line">        s(root-&gt;right, vl, sum2);</span><br><span class="line">    &#125;</span><br><span class="line">    bool answer = false;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>114/114 cases passed (12 ms) <br><br>Your runtime beats 86.65 % of cpp submissions <br><br>Your memory usage beats 17.59 % of cpp submissions (19.9 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>101.对称二叉树</title>
      <link href="/2020/02/20/leetcode101/"/>
      <url>/2020/02/20/leetcode101/</url>
      
        <content type="html"><![CDATA[<h4 id="😂递归"><a href="#😂递归" class="headerlink" title="😂递归"></a>😂递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isSymmetric(TreeNode* root) &#123;</span><br><span class="line">        if(!root)</span><br><span class="line">            return true;</span><br><span class="line">        return comp(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    bool comp (TreeNode* l, TreeNode* r)&#123;</span><br><span class="line">        if(!l &amp;&amp; !r) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!l || !r) </span><br><span class="line">            return false;</span><br><span class="line">        bool mb = l-&gt;val == r-&gt;val;</span><br><span class="line">        bool lb = comp(l-&gt;left, r-&gt;right);</span><br><span class="line">        bool rb = comp(l-&gt;right, r-&gt;left);</span><br><span class="line">        return lb &amp;&amp; rb &amp;&amp; mb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>195/195 cases passed (8 ms)<br><br>Your runtime beats 64.49 % of cpp submissions<br><br>Your memory usage beats 5.1 % of cpp submissions (15.3 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>102.二叉树的层次遍历</title>
      <link href="/2020/02/20/leetcode102/"/>
      <url>/2020/02/20/leetcode102/</url>
      
        <content type="html"><![CDATA[<h4 id="😂"><a href="#😂" class="headerlink" title="😂"></a>😂</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; vec;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        if(root)</span><br><span class="line">            q.push(root);</span><br><span class="line">        while(q.size()) &#123;</span><br><span class="line">            int sz = q.size();</span><br><span class="line">            vec.push_back(&#123;&#125;);</span><br><span class="line">            for(int i = 0; i &lt; sz; ++i) &#123;</span><br><span class="line">                auto top = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                auto&amp; vec1 = vec.back();</span><br><span class="line">                vec1.push_back(top-&gt;val);</span><br><span class="line">                if(top-&gt;left)</span><br><span class="line">                    q.push(top-&gt;left);</span><br><span class="line">                if(top-&gt;right)</span><br><span class="line">                    q.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>34/34 cases passed (4 ms)<br><br>Your runtime beats 92.4 % of cpp submissions<br><br>Your memory usage beats 24.1 % of cpp submissions (14.2 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>144.二叉树的前序遍历</title>
      <link href="/2020/02/20/leetcode144/"/>
      <url>/2020/02/20/leetcode144/</url>
      
        <content type="html"><![CDATA[<h4 id="😂"><a href="#😂" class="headerlink" title="😂"></a>😂</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; vec;</span><br><span class="line">        stack&lt;TreeNode* &gt; stk;</span><br><span class="line">        if(root)</span><br><span class="line">            stk.push(root);</span><br><span class="line">        while(stk.size()) &#123;</span><br><span class="line">            auto top = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            if(top-&gt;right) &#123;</span><br><span class="line">                stk.push(top-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            vec.push_back(top-&gt;val);</span><br><span class="line">            if(top-&gt;left) &#123;</span><br><span class="line">                stk.push(top-&gt;left);</span><br><span class="line">            &#125; </span><br><span class="line">              </span><br><span class="line">        &#125;</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>68/68 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 13.44 % of cpp submissions (9.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>61.旋转链表</title>
      <link href="/2020/02/19/leetcode61/"/>
      <url>/2020/02/19/leetcode61/</url>
      
        <content type="html"><![CDATA[<h4 id="👺"><a href="#👺" class="headerlink" title="👺"></a>👺</h4><p>连成环，然后改变头部位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* rotateRight(ListNode* head, int k) &#123;</span><br><span class="line">        if(!head || !head-&gt;next) return head;</span><br><span class="line">        int count = 0;</span><br><span class="line">        auto h = head;</span><br><span class="line">        while(h-&gt;next) &#123;</span><br><span class="line">            h = h-&gt;next;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        ++count;</span><br><span class="line">        // cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">        h-&gt;next = head;</span><br><span class="line">        k = k % count;</span><br><span class="line">        auto new_tail = head;</span><br><span class="line">        int move = count - k;</span><br><span class="line">        // cout &lt;&lt; move &lt;&lt; endl;</span><br><span class="line">        for(; move &gt; 0 ; --move) &#123;</span><br><span class="line">            if(move == 1) &#123;</span><br><span class="line">                auto nx = new_tail-&gt;next;</span><br><span class="line">                new_tail-&gt;next = nullptr;</span><br><span class="line">                new_tail = nx;</span><br><span class="line">            &#125; else </span><br><span class="line">                new_tail = new_tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return new_tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>231/231 cases passed (4 ms)<br><br>Your runtime beats 98.6 % of cpp submissions<br><br>Your memory usage beats 18.66 % of cpp submissions (9 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>138.复制带随机指针的链表</title>
      <link href="/2020/02/19/leetcode138/"/>
      <url>/2020/02/19/leetcode138/</url>
      
        <content type="html"><![CDATA[<h4 id="🥶map"><a href="#🥶map" class="headerlink" title="🥶map"></a>🥶map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* copyRandomList(Node* head) &#123;</span><br><span class="line">        Node* new_prev = new Node(0);</span><br><span class="line">        new_prev-&gt;next = helper(head);</span><br><span class="line">        return new_prev-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* helper(Node* nd) &#123;</span><br><span class="line">        if(!nd)</span><br><span class="line">            return nullptr;</span><br><span class="line">        if(mp.count(nd))</span><br><span class="line">            return mp[nd];</span><br><span class="line">        Node* neo = new Node(nd-&gt;val);</span><br><span class="line">        mp[nd] = neo;</span><br><span class="line">        neo-&gt;next = helper(nd-&gt;next);</span><br><span class="line">        neo-&gt;random = helper(nd-&gt;random);</span><br><span class="line">        return neo;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    map&lt;Node*, Node*&gt; mp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>18/18 cases passed (20 ms)<br><br>Your runtime beats 44.06 % of cpp submissions<br><br>Your memory usage beats 69.77 % of cpp submissions (15 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>430.扁平化多级双向链表</title>
      <link href="/2020/02/19/leetcode430/"/>
      <url>/2020/02/19/leetcode430/</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>👽递归</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* flatten(Node* head) &#123;</span><br><span class="line">        helper(head);</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* helper(Node* node) &#123;</span><br><span class="line">        if(!node || (!node-&gt;child &amp;&amp; !node-&gt;next))</span><br><span class="line">            return node;</span><br><span class="line">        auto nex = node-&gt;next;</span><br><span class="line">        auto chil = helper(node-&gt;child);</span><br><span class="line">        if(chil) &#123;</span><br><span class="line">            node-&gt;next = node-&gt;child;</span><br><span class="line">            node-&gt;child-&gt;prev = node;</span><br><span class="line">            chil-&gt;next = nex;</span><br><span class="line">            if(nex) nex-&gt;prev = chil;</span><br><span class="line">            node-&gt;child = nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">        return nex ? helper(nex) : chil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>22/22 cases passed (8 ms) <br><br>Your runtime beats 73.19 % of cpp submissions <br><br>Your memory usage beats 55.69 % of cpp submissions (10 MB) <br></p></blockquote><h4 id="🤡DFS"><a href="#🤡DFS" class="headerlink" title="🤡DFS"></a>🤡DFS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* flatten(Node* head) &#123;</span><br><span class="line">        if(!head)</span><br><span class="line">            return head;</span><br><span class="line">        stack&lt;Node*&gt; stk;</span><br><span class="line">        stk.push(head);</span><br><span class="line">        Node* pre = nullptr;</span><br><span class="line">        while(stk.size()) &#123;</span><br><span class="line">            auto nd = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line"></span><br><span class="line">            if(nd-&gt;next) &#123;</span><br><span class="line">                stk.push(nd-&gt;next);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(nd-&gt;child) &#123;</span><br><span class="line">                stk.push(nd-&gt;child);</span><br><span class="line">                nd-&gt;child = nullptr;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(pre) &#123;</span><br><span class="line">                pre-&gt;next = nd;</span><br><span class="line">                nd-&gt;prev = pre;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pre = nd;</span><br><span class="line">        &#125;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>22/22 cases passed (0 ms)<br><br>Your runtime beats 100 % of cpp submissions<br><br>Your memory usage beats 60.78 % of cpp submissions (9.7 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.两数相加</title>
      <link href="/2020/02/19/leetcode2/"/>
      <url>/2020/02/19/leetcode2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;</span><br><span class="line">        ListNode* h = new ListNode(0),</span><br><span class="line">            *nh = h;</span><br><span class="line">        int add = 0;</span><br><span class="line">        while(l1 &amp;&amp; l2) &#123;</span><br><span class="line">            int val = l1-&gt;val + l2-&gt;val + add;</span><br><span class="line">            nh-&gt;next = new ListNode(val % 10);</span><br><span class="line">            add = val / 10;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">            nh = nh-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!l1)</span><br><span class="line">            l1 = l2;</span><br><span class="line">        while(l1) &#123;</span><br><span class="line">            int val = l1-&gt;val + add;</span><br><span class="line">            nh-&gt;next = new ListNode(val % 10);</span><br><span class="line">            add = val / 10;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">            nh = nh-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        if(add) </span><br><span class="line">            nh-&gt;next = new ListNode(add);</span><br><span class="line">        return h-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>1563/1563 cases passed (24 ms) <br><br>Your runtime beats 72.27 % of cpp submissions <br><br>Your memory usage beats 5.26 % of cpp submissions (10.5 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>234.回文链表</title>
      <link href="/2020/02/19/leetcode234/"/>
      <url>/2020/02/19/leetcode234/</url>
      
        <content type="html"><![CDATA[<h4 id="😴双指针-反转"><a href="#😴双指针-反转" class="headerlink" title="😴双指针+反转"></a>😴双指针+反转</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isPalindrome(ListNode* head) &#123;</span><br><span class="line">        if(!head || !head-&gt;next) return true;</span><br><span class="line">        ListNode* slow = head, </span><br><span class="line">            *fast = head,</span><br><span class="line">            *pre = nullptr,</span><br><span class="line">            *n;</span><br><span class="line">        while(fast &amp;&amp; fast-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            n = slow;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">            n-&gt;next = pre;</span><br><span class="line">            pre = n;</span><br><span class="line">        &#125;</span><br><span class="line">        if(fast) </span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        </span><br><span class="line">        while(slow &amp;&amp; pre) &#123;</span><br><span class="line">            if(slow-&gt;val != pre-&gt;val) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>26/26 cases passed (28 ms)<br><br>Your runtime beats 42.35 % of cpp submissions<br><br>Your memory usage beats 88.19 % of cpp submissions (12.4 MB)<br></p></blockquote><h4 id="😍stack"><a href="#😍stack" class="headerlink" title="😍stack"></a>😍stack</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isPalindrome(ListNode* head) &#123;</span><br><span class="line">        stack&lt;int&gt; stk;</span><br><span class="line">        int count = 0;</span><br><span class="line">        auto h = head;</span><br><span class="line">        while(h) &#123;</span><br><span class="line">            h = h-&gt;next;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        bool f = false;</span><br><span class="line">        while(head) &#123;</span><br><span class="line">            if((stk.size() == count / 2) &amp;&amp; (count % 2) &amp;&amp; !f) &#123;</span><br><span class="line">                // cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                f = true;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            int val = head-&gt;val;</span><br><span class="line">            if(stk.size() &amp;&amp; val == stk.top()) </span><br><span class="line">                stk.pop();</span><br><span class="line">            else </span><br><span class="line">                stk.push(val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        // cout &lt;&lt; stk.size() &lt;&lt; endl;</span><br><span class="line">        return !stk.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>26/26 cases passed (24 ms)<br><br>Your runtime beats 72.11 % of cpp submissions<br><br>Your memory usage beats 13.39 % of cpp submissions (13.4 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>328.奇偶链表</title>
      <link href="/2020/02/19/leetcode328/"/>
      <url>/2020/02/19/leetcode328/</url>
      
        <content type="html"><![CDATA[<h4 id="😍双指针"><a href="#😍双指针" class="headerlink" title="😍双指针"></a>😍双指针</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* oddEvenList(ListNode* head) &#123;</span><br><span class="line">        if(!head || !head-&gt;next)</span><br><span class="line">            return head;</span><br><span class="line">        ListNode* head2 = head-&gt;next, *h2 = head2;</span><br><span class="line">        ListNode* iter = head2-&gt;next, *h1 = head;</span><br><span class="line">        bool isEven = true;</span><br><span class="line">        while(iter) &#123;</span><br><span class="line">            if(isEven) &#123;</span><br><span class="line">                h1-&gt;next = iter;</span><br><span class="line">                h1 = h1-&gt;next;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                h2-&gt;next = iter;</span><br><span class="line">                h2 = h2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            isEven = !isEven;</span><br><span class="line">            iter = iter-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        h1-&gt;next = head2;</span><br><span class="line">        h2-&gt;next = nullptr;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>71/71 cases passed (8 ms)<br><br>Your runtime beats 98.43 % of cpp submissions<br><br>Your memory usage beats 17.56 % of cpp submissions (9.7 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.删除链表的倒数第N个节点</title>
      <link href="/2020/02/19/leetcode19/"/>
      <url>/2020/02/19/leetcode19/</url>
      
        <content type="html"><![CDATA[<h4 id="🐹双指针"><a href="#🐹双指针" class="headerlink" title="🐹双指针"></a>🐹双指针</h4><p>&emsp;&emsp;前面添加一个<strong>哑节点</strong>，可以避免头节点的特殊处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</span><br><span class="line">        ListNode* nou = new ListNode(0);</span><br><span class="line">        nou-&gt;next = head;</span><br><span class="line">        auto slow = nou;</span><br><span class="line">        auto quick = nou;</span><br><span class="line">        ++n;</span><br><span class="line">        while(n--) </span><br><span class="line">            quick = quick-&gt;next;</span><br><span class="line">        while(quick) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            quick = quick-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        auto nx = slow-&gt;next-&gt;next;</span><br><span class="line">        slow-&gt;next = nx;</span><br><span class="line">        return nou-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>208/208 cases passed (4 ms)<br><br>Your runtime beats 92.07 % of cpp submissions<br><br>Your memory usage beats 11.12 % of cpp submissions (8.6 MB) <br></p></blockquote><h4 id="🐶格外空间"><a href="#🐶格外空间" class="headerlink" title="🐶格外空间"></a>🐶格外空间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</span><br><span class="line">        vector&lt;ListNode*&gt; nodes;</span><br><span class="line">        auto h = head;</span><br><span class="line">        while(h) &#123;</span><br><span class="line">            nodes.push_back(h);</span><br><span class="line">            h = h-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        int pos = nodes.size() - n;</span><br><span class="line">        if(pos - 1 &lt; 0)</span><br><span class="line">            return head-&gt;next;</span><br><span class="line">        nodes[pos - 1]-&gt;next = pos + 1 &gt;= nodes.size() ? nullptr : nodes[pos + 1];</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>208/208 cases passed (4 ms)<br><br>Your runtime beats 92.07 % of cpp submissions<br><br>Your memory usage beats 5.22 % of cpp submissions (8.8 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>160.相交链表</title>
      <link href="/2020/02/19/leetcode160/"/>
      <url>/2020/02/19/leetcode160/</url>
      
        <content type="html"><![CDATA[<h4 id="🚌set实现"><a href="#🚌set实现" class="headerlink" title="🚌set实现"></a>🚌set实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123;</span><br><span class="line">        set&lt;ListNode*&gt; st;</span><br><span class="line">        while(headA) &#123;</span><br><span class="line">            st.insert(headA);</span><br><span class="line">            headA = headA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        while(headB) &#123;</span><br><span class="line">            if(st.count(headB))</span><br><span class="line">                return headB;</span><br><span class="line">            headB = headB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>142.环形链表 II</title>
      <link href="/2020/02/19/leetcode142/"/>
      <url>/2020/02/19/leetcode142/</url>
      
        <content type="html"><![CDATA[<h4 id="🐶双指针"><a href="#🐶双指针" class="headerlink" title="🐶双指针"></a>🐶双指针</h4><p>相当于将两个链表连在一起，一条是A + B, 一条是B + A，走过同样的长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123;</span><br><span class="line">        ListNode* a = headA, *b = headB;</span><br><span class="line">        while(a != b) &#123;</span><br><span class="line">            a = a == nullptr ? headB : a-&gt;next;</span><br><span class="line">            b = b == nullptr ? headA : b-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="🚌set实现"><a href="#🚌set实现" class="headerlink" title="🚌set实现"></a>🚌set实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode *detectCycle(ListNode *head) &#123;</span><br><span class="line">        if(!head)</span><br><span class="line">            return nullptr;</span><br><span class="line">        set&lt;ListNode*&gt; st;</span><br><span class="line">        st.insert(head);</span><br><span class="line">        while(head) &#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            if(!head) </span><br><span class="line">                return nullptr;</span><br><span class="line">            if(st.count(head)) &#123;</span><br><span class="line">                return head;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                st.insert(head);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>16/16 cases passed (36 ms)<br><br>Your runtime beats 6.15 % of cpp submissions<br><br>Your memory usage beats 5.56 % of cpp submissions (12.1 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>141.环形链表</title>
      <link href="/2020/02/19/leetcode141/"/>
      <url>/2020/02/19/leetcode141/</url>
      
        <content type="html"><![CDATA[<h4 id="🚌双指针实现"><a href="#🚌双指针实现" class="headerlink" title="🚌双指针实现"></a>🚌双指针实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool hasCycle(ListNode *head) &#123;</span><br><span class="line">        ListNode* slow_ptr = head, </span><br><span class="line">            *quick_ptr = head;</span><br><span class="line">        if(!head)</span><br><span class="line">            return false;</span><br><span class="line">        while(1) &#123;</span><br><span class="line">            quick_ptr = quick_ptr-&gt;next;</span><br><span class="line">            if(!quick_ptr)</span><br><span class="line">                return false;</span><br><span class="line">            else if(quick_ptr == slow_ptr)</span><br><span class="line">                return true;</span><br><span class="line">            quick_ptr = quick_ptr-&gt;next;</span><br><span class="line">            if(!quick_ptr)</span><br><span class="line">                return false;</span><br><span class="line">            else if(quick_ptr == slow_ptr)</span><br><span class="line">                return true;</span><br><span class="line">            slow_ptr = slow_ptr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>17/17 cases passed (12 ms)<br><br>Your runtime beats 83.52 % of cpp submissions<br><br>Your memory usage beats 19.93 % of cpp submissions (10 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>283.移动零</title>
      <link href="/2020/02/18/leetcode283/"/>
      <url>/2020/02/18/leetcode283/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void moveZeroes(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int k = 0;</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            if(nums[i] == 0) &#123;</span><br><span class="line">                k = i + 1;</span><br><span class="line">                for(;k &lt; nums.size(); ++k) &#123;</span><br><span class="line">                    if(nums[k]) &#123;</span><br><span class="line">                        swap(nums[k], nums[i]);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>21/21 cases passed (28 ms) <br><br>Your runtime beats 14.99 % of cpp submissions <br><br>Your memory usage beats 5.35 % of cpp submissions (10.1 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26.删除排序数组中的重复项</title>
      <link href="/2020/02/18/leetcode26/"/>
      <url>/2020/02/18/leetcode26/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        set&lt;int&gt; st;</span><br><span class="line">        int k = 0;</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            if(!st.count(nums[i])) &#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">                st.insert(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return st.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>161/161 cases passed (20 ms)<br><br>Your runtime beats 72.01 % of cpp submissions<br><br>Your memory usage beats 5.09 % of cpp submissions (11.9 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>557.反转字符串中的单词 III</title>
      <link href="/2020/02/18/leetcode557/"/>
      <url>/2020/02/18/leetcode557/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string reverseWords(string s) &#123;</span><br><span class="line">        int bg = 0;</span><br><span class="line">        for(int i = 0; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            if(s[i] == &apos; &apos; || i + 1 == s.size())&#123;</span><br><span class="line">                int l = bg, r = i + 1 == s.size() ? i : i - 1;</span><br><span class="line">                while(l &lt;= r) &#123;</span><br><span class="line">                    swap(s[l], s[r]);</span><br><span class="line">                    ++l;</span><br><span class="line">                    --r;</span><br><span class="line">                &#125;</span><br><span class="line">                bg = i + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>30/30 cases passed (20 ms)<br><br>Your runtime beats 76.47 % of cpp submissions<br><br>Your memory usage beats 49.04 % of cpp submissions (12 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>151.翻转字符串里的单词</title>
      <link href="/2020/02/18/leetcode151/"/>
      <url>/2020/02/18/leetcode151/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;</p><h4 id="😅双指针"><a href="#😅双指针" class="headerlink" title="😅双指针"></a>😅双指针</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string reverseWords(string s) &#123;</span><br><span class="line">        int bg = 0;</span><br><span class="line">        stack&lt;string&gt; stk;</span><br><span class="line">        string ms, res = &quot;&quot;;</span><br><span class="line">        for(int i  = 0; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            if(s[i] == &apos; &apos; &amp;&amp; s[bg] != &apos; &apos;) &#123;</span><br><span class="line">                string ns = s.substr(bg, i - bg);</span><br><span class="line">                // cout &lt;&lt; ns &lt;&lt; ns.size() &lt;&lt; endl;</span><br><span class="line">                stk.push(ns);</span><br><span class="line">                bg = 1 + i;</span><br><span class="line">            &#125; else if(s[i] == &apos; &apos;)&#123;</span><br><span class="line">                bg += 1;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        if(bg &lt; s.size() &amp;&amp; s[bg] != &apos; &apos;) &#123;</span><br><span class="line">            string ns = s.substr(bg, s.size() - bg);</span><br><span class="line">            stk.push(ns);</span><br><span class="line">        &#125;</span><br><span class="line">        while(stk.size()) &#123;</span><br><span class="line">            ms = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            res += ms + &apos; &apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        res.erase(res.end() - 1);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>25/25 cases passed (12  ms)<br><br>Your runtime beats 54.85 % of cpp submissions<br><br>Your memory usage beats 26.22 % of cpp submissions (11.8 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>189.旋转数组</title>
      <link href="/2020/02/18/leetcode189/"/>
      <url>/2020/02/18/leetcode189/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void rotate(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        int last_one;</span><br><span class="line">        while(--k &gt;= 0) &#123;</span><br><span class="line">            last_one = nums.back();</span><br><span class="line">            nums.pop_back();</span><br><span class="line">            nums.insert(nums.begin(), last_one);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>34/34 cases passed (336 ms)<br><br>Your runtime beats 6.57 % of cpp submissions<br><br>Your memory usage beats 5.01 % of cpp submissions (10.1 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>209.长度最小的子数组</title>
      <link href="/2020/02/18/leetcode209/"/>
      <url>/2020/02/18/leetcode209/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        if(nums.empty())</span><br><span class="line">            return 0;</span><br><span class="line">        int count = 0,</span><br><span class="line">        tl = 0,</span><br><span class="line">        bg = 0,</span><br><span class="line">        mi = 10000;</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            tl += nums[i];</span><br><span class="line">            ++count;</span><br><span class="line">            while(tl &gt;= s) &#123;</span><br><span class="line">                mi = min(mi, count);</span><br><span class="line">                tl -= nums[bg];</span><br><span class="line">                ++bg;</span><br><span class="line">                --count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return mi == 10000 ? 0 : mi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>15/15 cases passed (4 ms) <br><br>Your runtime beats 99.85 % of cpp submissions <br><br>Your memory usage beats 5.09 % of cpp submissions (10.2 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>485.最大连续1的个数</title>
      <link href="/2020/02/18/leetcode485/"/>
      <url>/2020/02/18/leetcode485/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findMaxConsecutiveOnes(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int max1 = 0;</span><br><span class="line">        int k = 0;</span><br><span class="line">        for(auto x: nums) &#123;</span><br><span class="line">            if(x == 1) &#123;</span><br><span class="line">                ++k;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                </span><br><span class="line">                k = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            max1 = max(max1, k);</span><br><span class="line">        &#125;</span><br><span class="line">        return max1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>41/41 cases passed (40 ms)<br><br>Your runtime beats 41.04 % of cpp submissions<br><br>Your memory usage beats 54.84 % of cpp submissions (11.7 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27.移除元素</title>
      <link href="/2020/02/18/leetcode27/"/>
      <url>/2020/02/18/leetcode27/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;双指针策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int removeElement(vector&lt;int&gt;&amp; nums, int val) &#123;</span><br><span class="line">        int k = 0;</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            if(nums[i] != val) &#123;</span><br><span class="line">                nums[k] = nums[i];</span><br><span class="line">                ++k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>113/113 cases passed (8 ms)<br><br>Your runtime beats 31.44 % of cpp submissions<br><br>Your memory usage beats 5.01 % of cpp submissions (8.8 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找的细节总结</title>
      <link href="/2020/02/18/alg7/"/>
      <url>/2020/02/18/alg7/</url>
      
        <content type="html"><![CDATA[<h4 id="🐶结构1辨析"><a href="#🐶结构1辨析" class="headerlink" title="🐶结构1辨析"></a>🐶结构1辨析</h4><p>&emsp;&emsp;这里介绍第一种结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function binary_search(A, n, T) is</span><br><span class="line">    L := 0</span><br><span class="line">    R := n − 1</span><br><span class="line">    while L ≤ R do</span><br><span class="line">        m := floor((L + R) / 2)</span><br><span class="line">        if A[m] &lt; T then</span><br><span class="line">            L := m + 1</span><br><span class="line">        else if A[m] &gt; T then</span><br><span class="line">            R := m - 1</span><br><span class="line">        else:</span><br><span class="line">            return m</span><br><span class="line">    return unsuccessful</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里<strong>m := floor((L + R) / 2)</strong>有时会替换成<strong>m := ceiling((L + R) / 2)</strong>，简单来说就是(L + R) / 2替换成(L + R + 1) / 2。</p><p>&emsp;&emsp;在以上结构中这个语句的替换<strong>不会影响算法的正确性</strong>。不过在目标T在数组A中有多个的时候，可能会影响到底返回多个T中的哪一个。</p><p>&emsp;&emsp;比如[1 2 2 2 3 4]，在floor时返回的下标是2，在ceiling时返回的下标是3.</p><h4 id="🦊优化1"><a href="#🦊优化1" class="headerlink" title="🦊优化1"></a>🦊优化1</h4><p>&emsp;&emsp;这里有一个可以小优化的地方，L+R存在整形溢出的情况，可以改为L + （R - L) / 2避免溢出问题。</p><h4 id="🐹结构2辨析"><a href="#🐹结构2辨析" class="headerlink" title="🐹结构2辨析"></a>🐹结构2辨析</h4><p>&emsp;&emsp;这其实也是一种优化，因为以上结构中在每个循环中比较次数太多，可以使用以下结构来代替。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function binary_search_alternative(A, n, T) is</span><br><span class="line">    L := 0</span><br><span class="line">    R := n − 1</span><br><span class="line">    while L != R do</span><br><span class="line">        m := ceil((L + R) / 2)</span><br><span class="line">        if A[m] &gt; T then</span><br><span class="line">            R := m - 1</span><br><span class="line">        else:</span><br><span class="line">            L := m</span><br><span class="line">    if A[L] = T then</span><br><span class="line">        return L</span><br><span class="line">    return unsuccessful</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function binary_search_alternative(A, n, T) is</span><br><span class="line">    L := 0</span><br><span class="line">    R := n − 1</span><br><span class="line">    while L != R do</span><br><span class="line">        m := floor((L + R) / 2)</span><br><span class="line">        if A[m] &lt; T then</span><br><span class="line">            L := m + 1</span><br><span class="line">        else:</span><br><span class="line">            R := m</span><br><span class="line">    if A[L] = T then</span><br><span class="line">        return L</span><br><span class="line">    return unsuccessful</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以上两种结构可以在每次循环中减少一次的比较。</p><p>&emsp;&emsp;并且值的注意的是以下两种结构是错误的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">👿function binary_search_alternative(A, n, T) is</span><br><span class="line">    L := 0</span><br><span class="line">    R := n − 1</span><br><span class="line">    while L != R do</span><br><span class="line">        m := ceil((L + R) / 2)</span><br><span class="line">        if A[m] &lt; T then</span><br><span class="line">            L := m + 1</span><br><span class="line">        else:</span><br><span class="line">            R := m</span><br><span class="line">    if A[L] = T then</span><br><span class="line">        return L</span><br><span class="line">    return unsuccessful</span><br></pre></td></tr></table></figure><p>假设在[2 3 4]中查找2， <br><br>第一趟： L = 0 R = 5 m = 1 A[m] &gt; T <br><br>第二趟:  L = 0 R = 1 m = 1 A[m] &gt; T <br><br>第三趟：L = 0 R = 1 m = 1 A[m] &gt; T <br><br>… <br><br>第N趟：L = 0 R = 1 m = 1 A[m] &gt; T <br><br>这里会导致无线循环，因为ceiling取上限，并且我们将m取在右边，导致区间在左边没法收敛。</p><p>同理，下面结构也是错误的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">👿function binary_search_alternative(A, n, T) is</span><br><span class="line">    L := 0</span><br><span class="line">    R := n − 1</span><br><span class="line">    while L != R do</span><br><span class="line">        m := floor((L + R) / 2)</span><br><span class="line">        if A[m] &gt; T then</span><br><span class="line">            R := m - 1</span><br><span class="line">        else:</span><br><span class="line">            L := m</span><br><span class="line">    if A[L] = T then</span><br><span class="line">        return L</span><br><span class="line">    return unsuccessful</span><br></pre></td></tr></table></figure><p>可以[2 3 4]中查找4来试试。</p><h4 id="🙈结构3辨析"><a href="#🙈结构3辨析" class="headerlink" title="🙈结构3辨析"></a>🙈结构3辨析</h4><p>&emsp;&emsp;在存在重复元素的时候，究竟该返回哪一个呢？比如[1,2,4,4,4,5,6,7]查找4，是返回2还是3，或者4？</p><p>&emsp;&emsp;下面这样一个结构可以返回最左边的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function binary_search_leftmost(A, n, T):</span><br><span class="line">    L := 0</span><br><span class="line">    R := n</span><br><span class="line">    while L &lt; R:</span><br><span class="line">        m := floor((L + R) / 2)</span><br><span class="line">        if A[m] &lt; T:</span><br><span class="line">            L := m + 1</span><br><span class="line">        else:</span><br><span class="line">            R := m</span><br><span class="line">    return L</span><br></pre></td></tr></table></figure><p>在找到元素后，依旧会通过R = m向左边收缩。</p><p>&emsp;&emsp;下面这样一个结构可以返回最右边的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function binary_search_rightmost(A, n, T):</span><br><span class="line">    L := 0</span><br><span class="line">    R := n</span><br><span class="line">    while L &lt; R:</span><br><span class="line">        m := floor((L + R) / 2)</span><br><span class="line">        if A[m] &lt;= T:</span><br><span class="line">            L := m + 1</span><br><span class="line">        else:</span><br><span class="line">            R := m</span><br><span class="line">    return R - 1</span><br></pre></td></tr></table></figure><p>在找到元素后，依旧会通过left = m + 1向右边收缩。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>561.数组拆分 I</title>
      <link href="/2020/02/18/leetcode561/"/>
      <url>/2020/02/18/leetcode561/</url>
      
        <content type="html"><![CDATA[<h4 id="🥛-emsp"><a href="#🥛-emsp" class="headerlink" title="🥛 &emsp;"></a>🥛 &emsp;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int arrayPairSum(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        int i = 0,</span><br><span class="line">        tl = 0;</span><br><span class="line">        while(i != nums.size()) &#123;</span><br><span class="line">            tl += nums[i];</span><br><span class="line">            i += 2;</span><br><span class="line">        &#125;</span><br><span class="line">        return tl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>81/81 cases passed (96 ms)<br><br>Your runtime beats 21.52 % of cpp submissions<br><br>Your memory usage beats 5.28 % of cpp submissions (11.6 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.最长公共前缀</title>
      <link href="/2020/02/18/leetcode14/"/>
      <url>/2020/02/18/leetcode14/</url>
      
        <content type="html"><![CDATA[<h4 id="🥛-emsp"><a href="#🥛-emsp" class="headerlink" title="🥛 &emsp;"></a>🥛 &emsp;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        string prefix;</span><br><span class="line">        if(!strs.size())</span><br><span class="line">            return prefix;</span><br><span class="line">        int msz = 1000;</span><br><span class="line">        for(auto v : strs) &#123;</span><br><span class="line">            if(v.size() &lt; msz)</span><br><span class="line">                msz = v.size();</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = 0; i &lt; msz; ++i) &#123;</span><br><span class="line">            char c = strs[0][i];</span><br><span class="line">            for(auto s: strs) &#123;</span><br><span class="line">                if(s[i] != c) </span><br><span class="line">                    return prefix;</span><br><span class="line">            &#125;</span><br><span class="line">            prefix += c;</span><br><span class="line">        &#125;</span><br><span class="line">        return prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>118/118 cases passed (28 ms) <br><br>Your runtime beats 7.46 % of cpp submissions <br><br>Your memory usage beats 5.02 % of cpp submissions (15.3 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28.实现 strStr()</title>
      <link href="/2020/02/17/leetcode28/"/>
      <url>/2020/02/17/leetcode28/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;查找子字符串问题，相关可以参考《算法4》5.3节。</p><h4 id="😜kmp"><a href="#😜kmp" class="headerlink" title="😜kmp"></a>😜kmp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int strStr(string haystack, string needle) &#123;</span><br><span class="line">        if(needle == &quot;&quot;)</span><br><span class="line">            return 0;</span><br><span class="line">        vector&lt;vector&lt;int &gt; &gt; df = dfa(needle);</span><br><span class="line">        int j = 0;</span><br><span class="line">        int i = 0;</span><br><span class="line">        for(; i &lt; haystack.size() &amp;&amp; j != needle.size(); ++i) &#123;</span><br><span class="line">            j = df[haystack.at(i)][j];</span><br><span class="line">        &#125;</span><br><span class="line">        if(j == needle.size()) return i - needle.size(); </span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt; &gt; dfa(string s) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt; &gt; v(128, vector&lt;int&gt;(s.size()));</span><br><span class="line">        v[s.at(0)][0] = 1;</span><br><span class="line">        for(int i = 1, X = 0; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            for(int j = 0; j &lt; 128; ++j) &#123;</span><br><span class="line">                v[j][i] = v[j][X];</span><br><span class="line">            &#125;</span><br><span class="line">            v[s.at(i)][i] = i + 1;</span><br><span class="line"></span><br><span class="line">            X = v[s.at(i)][X];</span><br><span class="line">        &#125;</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>74/74 cases passed (48 ms) <br><br>Your runtime beats 20.02 % of cpp submissions <br><br>Your memory usage beats 5.02 % of cpp submissions (30.6 MB) <br></p></blockquote><h4 id="😜km"><a href="#😜km" class="headerlink" title="😜km"></a>😜km</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int strStr(string haystack, string needle) &#123;</span><br><span class="line">        vector&lt;int&gt; right(256, -1);</span><br><span class="line">        for(int i  = 0; i &lt; needle.size(); ++i)</span><br><span class="line">        &#123;   </span><br><span class="line">            right[needle.at(i)] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        int skip = 0;</span><br><span class="line">        int M = haystack.size();</span><br><span class="line">        int N = needle.size();</span><br><span class="line">        int j;</span><br><span class="line">        for(int i = 0; i &lt;= M -N; i += skip) &#123;</span><br><span class="line">            for( j = N - 1; j &gt;= 0; --j) &#123;</span><br><span class="line">                if(needle[j] != haystack[i + j]) &#123;</span><br><span class="line">                    skip = j - right[needle[j]];</span><br><span class="line">                    if(skip &lt; 1) skip = 1;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(j == -1) return i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>74/74 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 11.13 % of cpp submissions (9.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>67.二进制求和</title>
      <link href="/2020/02/17/leetcode67/"/>
      <url>/2020/02/17/leetcode67/</url>
      
        <content type="html"><![CDATA[<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string addBinary(string a, string b) &#123;</span><br><span class="line">        if(a.size() &lt; b.size())</span><br><span class="line">            swap(a, b);</span><br><span class="line">        auto br_i = b.rbegin();</span><br><span class="line">        auto ar_i = a.rbegin();</span><br><span class="line">        while(br_i != b.rend())&#123;</span><br><span class="line">            *ar_i = (*ar_i - 48) + (*br_i - 48) + 48;</span><br><span class="line">            ++ar_i;</span><br><span class="line">            ++br_i;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        ar_i = a.rbegin();</span><br><span class="line">        int save = 0;</span><br><span class="line">        while(ar_i != a.rend()) &#123;</span><br><span class="line">            *ar_i = *ar_i + save;</span><br><span class="line">            save = 0;</span><br><span class="line">            if(*ar_i &gt;= &apos;2&apos;) &#123;</span><br><span class="line">                save = 1;</span><br><span class="line">                int val = (*ar_i - 48) % 2;</span><br><span class="line">                *ar_i = val + 48;</span><br><span class="line">            &#125;</span><br><span class="line">            ++ar_i;</span><br><span class="line">        &#125;</span><br><span class="line">        if(save)</span><br><span class="line">            a = &apos;1&apos; + a;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>294/294 cases passed (4 ms) <br><br>Your runtime beats 86.75 % of cpp submissions <br><br>Your memory usage beats 38.03 % of cpp submissions (8.8 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>54.螺旋矩阵</title>
      <link href="/2020/02/17/leetcode54/"/>
      <url>/2020/02/17/leetcode54/</url>
      
        <content type="html"><![CDATA[<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>不要通过一个i，j加减来移动添加，不好控制位置。使用范围框住来添加方便清晰很多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        vector&lt;int&gt; nums;</span><br><span class="line">        if(matrix.empty()) return nums;</span><br><span class="line">        int top = 0,</span><br><span class="line">         bottom = matrix.size() - 1,</span><br><span class="line">         left = 0,</span><br><span class="line">         right = matrix[0].size() - 1;</span><br><span class="line">        while(1) &#123;</span><br><span class="line">            for(int j = left ; j &lt;= right; ++j)</span><br><span class="line">                nums.push_back(matrix[top][j]);</span><br><span class="line">            if(++top &gt; bottom) break;</span><br><span class="line">            for(int i = top; i &lt;= bottom; ++i)</span><br><span class="line">                nums.push_back(matrix[i][right]);</span><br><span class="line">            if(--right &lt; left) break;</span><br><span class="line">            for(int j = right; j &gt;= left; --j)</span><br><span class="line">                nums.push_back(matrix[bottom][j]);</span><br><span class="line">            if(--bottom &lt; top) break;</span><br><span class="line">            for(int i = bottom; i &gt;= top; --i)</span><br><span class="line">                nums.push_back(matrix[i][left]);</span><br><span class="line">            if(++left &gt; right) break;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>22/22 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 5.04 % of cpp submissions (8.9 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>498.对角线遍历</title>
      <link href="/2020/02/17/leetcode498/"/>
      <url>/2020/02/17/leetcode498/</url>
      
        <content type="html"><![CDATA[<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; findDiagonalOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        vector&lt;int&gt; v;</span><br><span class="line">        if(!matrix.size())  return v;</span><br><span class="line">        bool r = false;</span><br><span class="line">        for(int i = 2; i &lt;= matrix.size() + matrix[0].size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            int m = r ? 1 : i - 1;</span><br><span class="line">            while(1) &#123;</span><br><span class="line">                 int n = i - m;</span><br><span class="line">                if(m - 1 &lt; matrix.size() &amp;&amp; n - 1 &lt; matrix[0].size())</span><br><span class="line">                    v.push_back(matrix[m - 1][n - 1]);</span><br><span class="line">                if(r) &#123;</span><br><span class="line">                    ++m;</span><br><span class="line">                    if(m == i)</span><br><span class="line">                        break;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    --m;</span><br><span class="line">                    if(m == 0)</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            r = !r;</span><br><span class="line">        &#125;</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>32/32 cases passed (532 ms) <br ><br>Your runtime beats 5.13 % of cpp submissions <br><br>Your memory usage beats 8.42 % of cpp submissions (16 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>66. 加一</title>
      <link href="/2020/02/17/leetcode66/"/>
      <url>/2020/02/17/leetcode66/</url>
      
        <content type="html"><![CDATA[<h4 id="🥛使用数组"><a href="#🥛使用数组" class="headerlink" title="🥛使用数组"></a>🥛使用数组</h4><p>注意进位，并且不要在循环中插入元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) &#123;</span><br><span class="line">        digits.back()++;</span><br><span class="line">        bool f = false;</span><br><span class="line">        if(digits.back() == 10)</span><br><span class="line">            for(auto x = digits.rbegin(); x != digits.rend(); ++x)</span><br><span class="line">            &#123;</span><br><span class="line">                if(*x == 10) &#123;</span><br><span class="line">                    *x = 0;</span><br><span class="line">                    if(x + 1 != digits.rend()) &#123;</span><br><span class="line">                        *(x + 1) += 1;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        f = true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        if(f)</span><br><span class="line">            digits.insert(digits.begin(), 1);</span><br><span class="line">        return digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>109/109 cases passed (4 ms) <br><br>Your runtime beats 77.54 % of cpp submissions <br><br>Your memory usage beats 5.43 % of cpp submissions (8.9 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>747.至少是其他数字两倍的最大数</title>
      <link href="/2020/02/17/leetcode747/"/>
      <url>/2020/02/17/leetcode747/</url>
      
        <content type="html"><![CDATA[<h4 id="😂代码实现"><a href="#😂代码实现" class="headerlink" title="😂代码实现"></a>😂代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int dominantIndex(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        auto it = max_element(nums.begin(), nums.end());</span><br><span class="line">        for(auto be = nums.begin(); be != nums.end(); ++be) </span><br><span class="line">            if(be != it &amp;&amp; *it &lt; 2 * (*be))</span><br><span class="line">                return -1;</span><br><span class="line">        return it - nums.begin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>250/250 cases passed (8 ms) <br><br>Your runtime beats 29.62 % of cpp submissions <br><br>Your memory usage beats 45.04 % of cpp submissions (8.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>724</title>
      <link href="/2020/02/17/leetcode724/"/>
      <url>/2020/02/17/leetcode724/</url>
      
        <content type="html"><![CDATA[<h4 id="😂代码实现"><a href="#😂代码实现" class="headerlink" title="😂代码实现"></a>😂代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int pivotIndex(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int tl = 0;</span><br><span class="line">        for(auto x : nums) </span><br><span class="line">            tl += x;</span><br><span class="line">        vector&lt;int&gt; tv(nums.size());</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            if(tv[i] == tl - nums[i] - tv[i])</span><br><span class="line">                return i;</span><br><span class="line">            if(i != nums.size() - 1)</span><br><span class="line">                tv[i + 1] = tv[i] + nums[i];</span><br><span class="line">            // cout &lt;&lt; tv[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>741/741 cases passed (28 ms) <br><br>Your runtime beats 54.54 % of cpp submissions <br><br>Your memory usage beats 7.04 % of cpp submissions (10.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>841.钥匙和房间</title>
      <link href="/2020/02/17/leetcode841/"/>
      <url>/2020/02/17/leetcode841/</url>
      
        <content type="html"><![CDATA[<h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool canVisitAllRooms(vector&lt;vector&lt;int&gt;&gt;&amp; rooms) &#123;</span><br><span class="line">        stack&lt;int &gt; stk;</span><br><span class="line">        set&lt;int&gt; st;</span><br><span class="line">        stk.push(0);</span><br><span class="line">        st.insert(0);</span><br><span class="line">        while(stk.size()) &#123;</span><br><span class="line">            int pos = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            for(auto key : rooms[pos])&#123;</span><br><span class="line">                if(!st.count(key))&#123;</span><br><span class="line">                    st.insert(key);</span><br><span class="line">                    stk.push(key);</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return st.size() == rooms.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>67/67 cases passed (12 ms) <br><br>Your runtime beats 83.56 % of cpp submissions <br><br>Your memory usage beats 21.64 % of cpp submissions (11.2 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>542.01 矩阵</title>
      <link href="/2020/02/17/leetcode542/"/>
      <url>/2020/02/17/leetcode542/</url>
      
        <content type="html"><![CDATA[<h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; updateMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        int rows = matrix.size();</span><br><span class="line">        int cols = matrix[0].size();</span><br><span class="line">        vector&lt;vector&lt;int &gt; &gt; vc(rows, vector&lt;int&gt;(cols, 1000));</span><br><span class="line">        queue&lt;pair&lt;int, int&gt;&gt; q;</span><br><span class="line">        for(int i = 0; i &lt; rows; ++i)</span><br><span class="line">            for(int j = 0; j &lt; cols; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                if(!matrix[i][j]) &#123;</span><br><span class="line">                    q.push(&#123;i, j&#125;);</span><br><span class="line">                    vc[i][j] = 0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        int dir[4][2] = &#123;&#123;-1, 0&#125;, &#123;1, 0&#125;, &#123;0, -1&#125;, &#123;0, 1&#125;&#125;;</span><br><span class="line">        while(q.size()) &#123;</span><br><span class="line">            auto p = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            int n = p.first;</span><br><span class="line">            int m = p.second;</span><br><span class="line">            int dist = vc[n][m];</span><br><span class="line">            for(int i = 0; i &lt; 4; ++i) &#123;</span><br><span class="line">                int nn = n + dir[i][0];</span><br><span class="line">                int mm = m + dir[i][1];</span><br><span class="line">                if(nn &gt;=0 &amp;&amp; mm &gt;=0 &amp;&amp; nn &lt; rows &amp;&amp; mm &lt; cols) &#123;</span><br><span class="line">                    if(vc[nn][mm] &gt; dist + 1) &#123;</span><br><span class="line">                        vc[nn][mm] = dist + 1;</span><br><span class="line">                        q.push(&#123;nn, mm&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">        return vc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>48/48 cases passed (124 ms) <br><br>Your runtime beats 79.69 % of cpp submissions <br><br>Your memory usage beats 54.72 % of cpp submissions (23.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>733.图像渲染</title>
      <link href="/2020/02/17/leetcode733/"/>
      <url>/2020/02/17/leetcode733/</url>
      
        <content type="html"><![CDATA[<h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><p>类似<strong>岛屿数量</strong>这个题目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; floodFill(vector&lt;vector&lt;int&gt;&gt;&amp; image, int sr, int sc, int newColor) &#123;</span><br><span class="line">        stack&lt;pair&lt;int, int&gt;&gt; stk;</span><br><span class="line">        set&lt;pair&lt;int, int&gt;&gt; st;</span><br><span class="line">        st.insert(&#123;sr, sc&#125;);</span><br><span class="line">        stk.push(&#123;sr,sc&#125;);</span><br><span class="line">        int smc = image[sr][sc];</span><br><span class="line">        image[sr][sc] = newColor;</span><br><span class="line">        while(stk.size()) &#123;</span><br><span class="line">            auto p = stk.top();</span><br><span class="line">            // cout &lt;&lt; 1&lt;&lt; endl;</span><br><span class="line">            stk.pop();</span><br><span class="line">            int i = p.first, j = p.second;</span><br><span class="line">            if(i - 1&gt;= 0 &amp;&amp; image[i - 1][j] == smc &amp;&amp; !st.count(&#123;i - 1, j&#125;))&#123;</span><br><span class="line">                image[i - 1][j] = newColor;</span><br><span class="line">                stk.push(&#123;i - 1, j&#125;);</span><br><span class="line">                st.insert(&#123;i - 1, j&#125;);</span><br><span class="line">            &#125; </span><br><span class="line">            if(j + 1 &lt; image[0].size() &amp;&amp; image[i][j + 1] == smc &amp;&amp; !st.count(&#123;i, j + 1&#125;)) &#123;</span><br><span class="line">                image[i][j + 1] = newColor;</span><br><span class="line">                stk.push(&#123;i, j + 1&#125;);</span><br><span class="line">                st.insert(&#123;i, j + 1&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(1 + i &lt; image.size() &amp;&amp; image[i + 1][j ] == smc &amp;&amp; !st.count(&#123;i + 1, j&#125;)) &#123;</span><br><span class="line">                image[i + 1][j ] = newColor;</span><br><span class="line">                stk.push(&#123;i + 1, j&#125;);</span><br><span class="line">                st.insert(&#123;i + 1, j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(j - 1 &gt;=0 &amp;&amp; image[i][j - 1] == smc &amp;&amp; !st.count(&#123;i, j - 1&#125;))&#123;</span><br><span class="line">                image[i][j - 1] = newColor;</span><br><span class="line">                stk.push(&#123;i, j - 1&#125;);</span><br><span class="line">                st.insert(&#123;i, j - 1&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>277/277 cases passed (12 ms) <br><br>Your runtime beats 77.68 % of cpp submissions <br><br>Your memory usage beats 5.12 % of cpp submissions (11 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>394.字符串解码</title>
      <link href="/2020/02/17/leetcode394/"/>
      <url>/2020/02/17/leetcode394/</url>
      
        <content type="html"><![CDATA[<h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><p>这里递归的时候i是引用，目的是为了避免多个[]嵌套的时候，<strong>定位完成后函数该继续的位置</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string decodeString(string s) &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        return dfs(s, i);</span><br><span class="line">    &#125;</span><br><span class="line">    string dfs(string&amp; s, int&amp; i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(i &gt;= s.size())</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        string ns;</span><br><span class="line">        if(s[i] == &apos;]&apos;)</span><br><span class="line">            return ns;</span><br><span class="line">        else if(s[i] &lt;= &apos;9&apos; &amp;&amp; s[i] &gt; &apos;0&apos;)&#123;</span><br><span class="line">            int cot = 0, ti = i;</span><br><span class="line">            while(s[i] != &apos;[&apos;) &#123;</span><br><span class="line">                ++i; </span><br><span class="line">                ++cot;</span><br><span class="line">            &#125;    </span><br><span class="line">            string nus = s.substr(ti, cot);</span><br><span class="line">            int k = atoi(nus.c_str());</span><br><span class="line">            string ts = dfs(s, ++i);</span><br><span class="line">            for(int j = 0; j &lt; k; ++j)</span><br><span class="line">                ns += ts;</span><br><span class="line">            </span><br><span class="line">            ns += dfs(s, ++i);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ns += s[i];</span><br><span class="line">            ns +=  dfs(s, ++i);</span><br><span class="line">        &#125;</span><br><span class="line">        return ns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>29/29 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 11.06 % of cpp submissions (9.1 MB) <br></p></blockquote><h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string decodeString(string s) &#123;</span><br><span class="line">        stack&lt;pair&lt;int, string&gt;&gt; stk;</span><br><span class="line">        int multi = 0;</span><br><span class="line">        string pre = &quot;&quot;;</span><br><span class="line">        for(auto c : s) &#123;</span><br><span class="line">            if(c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos;) &#123;</span><br><span class="line">                if(!multi)</span><br><span class="line">                    multi = c - 48;</span><br><span class="line">                else &#123;</span><br><span class="line">                    multi *= 10;</span><br><span class="line">                    multi += c - 48;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (c == &apos;[&apos;) &#123;</span><br><span class="line">                stk.push(&#123;multi, pre&#125;);</span><br><span class="line">                multi = 0;</span><br><span class="line">                pre = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (c == &apos;]&apos;) &#123;</span><br><span class="line">                auto p = stk.top();</span><br><span class="line">                stk.pop();</span><br><span class="line">                string tm = pre;</span><br><span class="line">                pre = p.second;</span><br><span class="line">                for(int i = 0; i &lt; p.first; ++i)</span><br><span class="line">                    pre += tm;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                pre += c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>225.用队列实现栈</title>
      <link href="/2020/02/16/leetcode225/"/>
      <url>/2020/02/16/leetcode225/</url>
      
        <content type="html"><![CDATA[<h4 id="😝实现"><a href="#😝实现" class="headerlink" title="😝实现"></a>😝实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">class MyStack &#123;</span><br><span class="line">public:</span><br><span class="line">    /** Initialize your data structure here. */</span><br><span class="line">    MyStack() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Push element x onto stack. */</span><br><span class="line">    void push(int x) &#123;</span><br><span class="line">        q.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Removes the element on top of the stack and returns that element. */</span><br><span class="line">    int pop() &#123;</span><br><span class="line">        int val;</span><br><span class="line">        while(q.size() != 1) &#123;</span><br><span class="line">            int x = q.front();</span><br><span class="line">            h.push(x);</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        val = q.front();</span><br><span class="line">        // h.push(x);</span><br><span class="line">        q.pop();</span><br><span class="line">        while(h.size()) &#123;</span><br><span class="line">            int x = h.front();</span><br><span class="line">            h.pop();</span><br><span class="line">            q.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        return val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Get the top element. */</span><br><span class="line">    int top() &#123;</span><br><span class="line">        int val;</span><br><span class="line">        while(q.size() != 1) &#123;</span><br><span class="line">            int x = q.front();</span><br><span class="line">            h.push(x);</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        val = q.front();</span><br><span class="line">        h.push(val);</span><br><span class="line">        q.pop();</span><br><span class="line">        while(h.size()) &#123;</span><br><span class="line">            int x = h.front();</span><br><span class="line">            h.pop();</span><br><span class="line">            q.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        return val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Returns whether the stack is empty. */</span><br><span class="line">    bool empty() &#123;</span><br><span class="line">        return q.size() == 0;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    queue&lt;int&gt; q, h;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>16/16 cases passed (8 ms) <br><br>Your runtime beats 6.14 % of cpp submissions <br><br>Your memory usage beats 5.42 % of cpp submissions (9.1 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>232.用栈实现队列</title>
      <link href="/2020/02/16/leetcode232/"/>
      <url>/2020/02/16/leetcode232/</url>
      
        <content type="html"><![CDATA[<h4 id="😝实现"><a href="#😝实现" class="headerlink" title="😝实现"></a>😝实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">class MyQueue &#123;</span><br><span class="line">public:</span><br><span class="line">    /** Initialize your data structure here. */</span><br><span class="line">    MyQueue() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Push element x to the back of queue. */</span><br><span class="line">    void push(int x) &#123;</span><br><span class="line">        stk.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Removes the element from in front of queue and returns that element. */</span><br><span class="line">    int pop() &#123;</span><br><span class="line">        while(stk.size() != 1) &#123;</span><br><span class="line">            int x = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            helper.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        int x = stk.top();</span><br><span class="line">        stk.pop();</span><br><span class="line">        while(helper.size())</span><br><span class="line">        &#123;</span><br><span class="line">            int x = helper.top();</span><br><span class="line">            helper.pop();</span><br><span class="line">            stk.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Get the front element. */</span><br><span class="line">    int peek() &#123;</span><br><span class="line">        while(stk.size() != 1) &#123;</span><br><span class="line">            int x = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            helper.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        int x = stk.top();</span><br><span class="line">        while(helper.size())</span><br><span class="line">        &#123;</span><br><span class="line">            int x = helper.top();</span><br><span class="line">            helper.pop();</span><br><span class="line">            stk.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Returns whether the queue is empty. */</span><br><span class="line">    bool empty() &#123;</span><br><span class="line">        return stk.size() == 0;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    stack&lt;int &gt; stk, helper;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>17/17 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 5.28 % of cpp submissions (9.1 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>94.二叉树的中序遍历</title>
      <link href="/2020/02/16/leetcode94/"/>
      <url>/2020/02/16/leetcode94/</url>
      
        <content type="html"><![CDATA[<h4 id="🥧递归实现"><a href="#🥧递归实现" class="headerlink" title="🥧递归实现"></a>🥧递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; v;</span><br><span class="line">        dfs(v, root);</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">    void dfs(vector&lt;int&gt; &amp;v, TreeNode* n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!n)</span><br><span class="line">            return ;</span><br><span class="line">        if(n-&gt;left)</span><br><span class="line">            dfs(v, n-&gt;left);</span><br><span class="line">        v.push_back(n-&gt;val);</span><br><span class="line">        if(n-&gt;right)</span><br><span class="line">            dfs(v, n-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>68/68 cases passed (8 ms) <br><br>Your runtime beats 15.97 % of cpp submissions <br><br>Your memory usage beats 13.03 % of cpp submissions (9.9 MB) <br></p></blockquote><h4 id="🥧非递归实现"><a href="#🥧非递归实现" class="headerlink" title="🥧非递归实现"></a>🥧非递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; v;</span><br><span class="line">        if(!root)</span><br><span class="line">            return v;</span><br><span class="line">        stack&lt;TreeNode* &gt; stk;</span><br><span class="line">        stk.push(root);</span><br><span class="line">        while(stk.size())</span><br><span class="line">        &#123;</span><br><span class="line">            auto nd = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            if(nd-&gt;right)</span><br><span class="line">                stk.push(nd-&gt;right);</span><br><span class="line">            if(!nd-&gt;left &amp;&amp; !nd-&gt;right)</span><br><span class="line">                v.push_back(nd-&gt;val);</span><br><span class="line">            else &#123;</span><br><span class="line">                stk.push(nd);</span><br><span class="line">            &#125;</span><br><span class="line">            if(nd-&gt;left)</span><br><span class="line">                stk.push(nd-&gt;left);</span><br><span class="line">            nd-&gt;left = nullptr;</span><br><span class="line">            nd-&gt;right = nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>68/68 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions<br><br>Your memory usage beats 65.81 % of cpp submissions (9.1 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>494.目标和</title>
      <link href="/2020/02/16/leetcode494/"/>
      <url>/2020/02/16/leetcode494/</url>
      
        <content type="html"><![CDATA[<h4 id="😂非递归DFS"><a href="#😂非递归DFS" class="headerlink" title="😂非递归DFS"></a>😂非递归DFS</h4><p>非递归下，直接dfs会出现超时的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) &#123;</span><br><span class="line">        stack&lt;pair&lt;int, int&gt; &gt; stk; //值，位置</span><br><span class="line">        stk.push(&#123;0, 0&#125;);</span><br><span class="line">        int count = 0;</span><br><span class="line">        int val, pos;</span><br><span class="line">        pair&lt;int, int&gt; p;</span><br><span class="line">        while(stk.size())</span><br><span class="line">        &#123;</span><br><span class="line">            p = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            val = p.first;</span><br><span class="line">            pos = p.second;</span><br><span class="line">            if(pos + 1&lt; nums.size()) &#123;</span><br><span class="line">                stk.push(&#123;val + nums[pos], pos + 1&#125;);</span><br><span class="line">                stk.push(&#123;val - nums[pos], pos + 1&#125;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if(val + nums[pos] == S)</span><br><span class="line">                    ++count;</span><br><span class="line">                if (val - nums[pos] == S)</span><br><span class="line">                    ++count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="🙂递归DFS"><a href="#🙂递归DFS" class="headerlink" title="🙂递归DFS"></a>🙂递归DFS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) &#123;</span><br><span class="line">        return dfs(nums, S, 0, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    int dfs(vector&lt;int&gt;&amp; nums, int S, int val, int pos)</span><br><span class="line">    &#123;</span><br><span class="line">        if(pos + 1 == nums.size()) &#123;</span><br><span class="line">            bool l = val + nums[pos] == S;</span><br><span class="line">            bool r = val - nums[pos] == S;</span><br><span class="line">            if(l &amp;&amp; r)</span><br><span class="line">                return 2;</span><br><span class="line">            else if(l || r)</span><br><span class="line">                return 1;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int lc = dfs(nums, S, val + nums[pos], pos + 1);</span><br><span class="line">        int rc = dfs(nums, S, val - nums[pos], pos + 1);</span><br><span class="line">        return rc + lc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>139/139 cases passed (1192 ms) <br><br>Your runtime beats 47.34 % of cpp submissions <br><br>Your memory usage beats 30.97 % of cpp submissions (8.7 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>133.克隆图</title>
      <link href="/2020/02/16/leetcode133/"/>
      <url>/2020/02/16/leetcode133/</url>
      
        <content type="html"><![CDATA[<h4 id="🚌非递归实现"><a href="#🚌非递归实现" class="headerlink" title="🚌非递归实现"></a>🚌非递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* cloneGraph(Node* node) &#123;</span><br><span class="line">        if(!node)</span><br><span class="line">            return nullptr;</span><br><span class="line">        stack&lt;pair&lt;Node*,Node*&gt;&gt; stk;</span><br><span class="line">        vector&lt;Node* &gt; st(101, nullptr);</span><br><span class="line">        Node head(0);</span><br><span class="line">        stk.push(&#123;node, &amp;head&#125;);</span><br><span class="line">        while(stk.size()) &#123;</span><br><span class="line">            auto n = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            Node* i = n.first;</span><br><span class="line">            Node* c = n.second;</span><br><span class="line">            Node* new_one = nullptr;</span><br><span class="line">            if(!st[i-&gt;val]) &#123;</span><br><span class="line">                cout &lt;&lt; 1 &lt;&lt; endl;</span><br><span class="line">              new_one = new Node(i-&gt;val);</span><br><span class="line">              st[i-&gt;val] = new_one;</span><br><span class="line">              for(auto x: i-&gt;neighbors) &#123;</span><br><span class="line">                stk.push(&#123;x, new_one&#125;);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; else&#123;</span><br><span class="line">              new_one = st[i-&gt;val] ;</span><br><span class="line">            &#125;</span><br><span class="line">            c-&gt;neighbors.push_back(new_one);</span><br><span class="line">        &#125;</span><br><span class="line">        return head.neighbors[0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>21/21 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 100 % of cpp submissions (11.5 MB) <br></p></blockquote><h4 id="🚌递归实现"><a href="#🚌递归实现" class="headerlink" title="🚌递归实现"></a>🚌递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    Node* cloneGraph(Node* node) &#123;</span><br><span class="line">        if(!node)</span><br><span class="line">            return nullptr;</span><br><span class="line">        vc.resize(101, nullptr);</span><br><span class="line">        return dfs(node);</span><br><span class="line">    &#125;</span><br><span class="line">    Node* dfs(Node* node)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!node)</span><br><span class="line">            return nullptr;</span><br><span class="line">        if(vc[node-&gt;val])</span><br><span class="line">            return vc[node-&gt;val];</span><br><span class="line">        Node* nd = new Node(node-&gt;val);</span><br><span class="line">        vc[nd-&gt;val] = nd;</span><br><span class="line">        for(auto x: node-&gt;neighbors) &#123;</span><br><span class="line">            nd-&gt;neighbors.push_back(dfs(x));</span><br><span class="line">        &#125;</span><br><span class="line">        return nd;   </span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    vector&lt;Node*&gt; vc; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>21/21 cases passed (16 ms) <br><br>Your runtime beats 67.78 % of cpp submissions <br><br>Your memory usage beats 100 % of cpp submissions (11.5 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200.岛屿数量</title>
      <link href="/2020/02/16/leetcode200/"/>
      <url>/2020/02/16/leetcode200/</url>
      
        <content type="html"><![CDATA[<h4 id="🥩stack"><a href="#🥩stack" class="headerlink" title="🥩stack"></a>🥩stack</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        stack&lt;pair&lt;int, int&gt; &gt; stk;</span><br><span class="line">        set&lt;pair&lt;int, int&gt; &gt; rd;</span><br><span class="line">        int tl = 0;</span><br><span class="line">        for(int i = 0; i &lt; grid.size(); ++i)</span><br><span class="line">            for(int j = 0; j &lt; grid[i].size(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                if(grid[i][j] == &apos;1&apos; &amp;&amp; !rd.count(&#123;i, j&#125;)) &#123;</span><br><span class="line">                    </span><br><span class="line">                    ++tl;</span><br><span class="line">                    // cout &lt;&lt; tl &lt;&lt; endl;</span><br><span class="line">                    // cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">                    stk.push(&#123;i , j&#125;);</span><br><span class="line">                    rd.insert(&#123;i, j&#125;);</span><br><span class="line">                    while(stk.size()) &#123;</span><br><span class="line">                        auto p = stk.top();</span><br><span class="line">                        stk.pop();</span><br><span class="line">                        int i = p.first;</span><br><span class="line">                        int j = p.second;</span><br><span class="line">                        grid[i][j] == &apos;0&apos;;</span><br><span class="line">                        if(i + 1 &lt; grid.size() &amp;&amp; grid[i + 1][j] == &apos;1&apos; &amp;&amp; !rd.count(&#123;i + 1, j&#125;))</span><br><span class="line">                        &#123;</span><br><span class="line">                            // cout &lt;&lt; i + 1&lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt;endl;</span><br><span class="line">                            stk.push(&#123;i + 1, j&#125;);</span><br><span class="line">                            rd.insert(&#123;i + 1, j&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        if(j + 1 &lt; grid[i].size() &amp;&amp; grid[i][j + 1] == &apos;1&apos; &amp;&amp; !rd.count(&#123;i, j + 1&#125;))</span><br><span class="line">                        &#123;</span><br><span class="line">                            // cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j + 1&lt;&lt;endl;</span><br><span class="line">                            stk.push(&#123;i , j + 1&#125;);</span><br><span class="line">                            rd.insert(&#123;i, j + 1&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        if(j - 1 &gt;= 0 &amp;&amp; grid[i ][j - 1] == &apos;1&apos; &amp;&amp; !rd.count(&#123;i, j - 1&#125;))</span><br><span class="line">                        &#123;</span><br><span class="line">                            // cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j - 1&lt;&lt;endl;</span><br><span class="line">                            stk.push(&#123;i , j - 1&#125;);</span><br><span class="line">                            rd.insert(&#123;i, j - 1&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        if(i - 1 &gt;= 0 &amp;&amp; grid[i - 1][j ] == &apos;1&apos; &amp;&amp; !rd.count(&#123;i - 1, j &#125;))</span><br><span class="line">                        &#123;</span><br><span class="line">                            // cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j - 1&lt;&lt;endl;</span><br><span class="line">                            stk.push(&#123;i -1, j &#125;);</span><br><span class="line">                            rd.insert(&#123;i - 1, j &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        return tl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>47/47 cases passed (48 ms) <br><br>Your runtime beats 5.34 % of cpp submissions <br><br>Your memory usage beats 7.63 % of cpp submissions (13.3 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>150.逆波兰表达式求值</title>
      <link href="/2020/02/16/leetcode150/"/>
      <url>/2020/02/16/leetcode150/</url>
      
        <content type="html"><![CDATA[<h4 id="🥩stack"><a href="#🥩stack" class="headerlink" title="🥩stack"></a>🥩stack</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int evalRPN(vector&lt;string&gt;&amp; tokens) &#123;</span><br><span class="line">        stack&lt;int&gt; stk;</span><br><span class="line">        for(auto c : tokens)</span><br><span class="line">        &#123;</span><br><span class="line">            int nu = atoi(c.c_str());</span><br><span class="line">            if(!nu &amp;&amp; c != &quot;0&quot;) &#123;</span><br><span class="line">                int a = stk.top();</span><br><span class="line">                stk.pop();</span><br><span class="line">                int b = stk.top();</span><br><span class="line">                stk.pop();</span><br><span class="line">                if(c == &quot;+&quot;) &#123;</span><br><span class="line">                    stk.push(a + b);</span><br><span class="line">                &#125;</span><br><span class="line">                else if (c == &quot;-&quot;) &#123;</span><br><span class="line">                    stk.push(b - a);</span><br><span class="line">                &#125;</span><br><span class="line">                else if (c == &quot;/&quot;)&#123;</span><br><span class="line">                    stk.push(b / a);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    stk.push(b * a);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            else </span><br><span class="line">                stk.push(nu);</span><br><span class="line">        &#125;</span><br><span class="line">        return stk.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>20/20 cases passed (24 ms) <br><br>Your runtime beats 25.49 % of cpp submissions <br><br>Your memory usage beats 9.09 % of cpp submissions (11.8 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>739.每日温度</title>
      <link href="/2020/02/16/leetcode739/"/>
      <url>/2020/02/16/leetcode739/</url>
      
        <content type="html"><![CDATA[<h4 id="😂代码实现"><a href="#😂代码实现" class="headerlink" title="😂代码实现"></a>😂代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; T) &#123;</span><br><span class="line">        stack&lt;pair&lt;int, int&gt;&gt; stk;</span><br><span class="line">        vector&lt;int&gt; vec(T.size(), 0);</span><br><span class="line">        for(int i = 0 ; i &lt; T.size(); ++i) &#123;</span><br><span class="line">            if(!stk.size()) &#123;</span><br><span class="line">                stk.push(&#123;i, T[i]&#125;);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            while(stk.size()) &#123;</span><br><span class="line">                auto t = stk.top();</span><br><span class="line">                if(T[i] &gt; t.second) &#123;</span><br><span class="line">                    stk.pop();</span><br><span class="line">                    vec[t.first] = i - t.first;</span><br><span class="line">                &#125; else </span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            stk.push(&#123;i, T[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>37/37 cases passed (108 ms) <br><br>Your runtime beats 65.63 % of cpp submissions <br><br>Your memory usage beats 5.03 % of cpp submissions (19.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20.有效的括号</title>
      <link href="/2020/02/16/leetcode20/"/>
      <url>/2020/02/16/leetcode20/</url>
      
        <content type="html"><![CDATA[<h4 id="🥛stack"><a href="#🥛stack" class="headerlink" title="🥛stack"></a>🥛stack</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isValid(string s) &#123;</span><br><span class="line">        stack&lt;char&gt; stk;</span><br><span class="line">        for(auto c : s) &#123;</span><br><span class="line">            if(!stk.size()) &#123;</span><br><span class="line">                stk.push(c);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            int t = stk.top();</span><br><span class="line">            if(t == &apos;&#123;&apos; &amp;&amp; c == &apos;&#125;&apos; ||</span><br><span class="line">            t == &apos;(&apos; &amp;&amp; c == &apos;)&apos; ||</span><br><span class="line">            t == &apos;[&apos; &amp;&amp; c == &apos;]&apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                stk.pop();</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            stk.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        return stk.size() == 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>76/76 cases passed (4 ms) <br><br>Your runtime beats 69.91 % of cpp submissions <br><br>Your memory usage beats 5.33 % of cpp submissions (8.7 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>279.完全平方数</title>
      <link href="/2020/02/16/leetcode279/"/>
      <url>/2020/02/16/leetcode279/</url>
      
        <content type="html"><![CDATA[<h4 id="😂BFS"><a href="#😂BFS" class="headerlink" title="😂BFS"></a>😂BFS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numSquares(int n) &#123;</span><br><span class="line">        queue&lt;int&gt; q;</span><br><span class="line">        set&lt;int&gt; s;</span><br><span class="line">        q.push(n);</span><br><span class="line">        int ct = 0;</span><br><span class="line">        while(q.size()) &#123;</span><br><span class="line">            ct++;</span><br><span class="line">            int sz = q.size();</span><br><span class="line">            for(int i = 0; i &lt; sz; ++i)&#123;</span><br><span class="line">                int w = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                for(int j = 1; j * j &lt;= w; ++j) &#123;</span><br><span class="line">                    int x = w - j * j;</span><br><span class="line">                    if(!s.count(x)) &#123;</span><br><span class="line">                        if(x == 0) </span><br><span class="line">                            return ct;</span><br><span class="line">                        q.push(x);</span><br><span class="line">                        s.insert(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="😁动态规划"><a href="#😁动态规划" class="headerlink" title="😁动态规划"></a>😁动态规划</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numSquares(int n) &#123;</span><br><span class="line">        vector&lt;int&gt; v(n + 1);</span><br><span class="line">        for(int i = 0; i &lt;= n; ++i) </span><br><span class="line">            v[i] = i;</span><br><span class="line">        for(int i = 3; i &lt;= n; ++i) &#123;</span><br><span class="line">            </span><br><span class="line">            for(int j = 1; i - j * j &gt;= 0; ++j) &#123;</span><br><span class="line">                v[i] = min(v[i], v[i - j * j] + 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return v[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>752.打开转盘锁</title>
      <link href="/2020/02/16/leetcode752/"/>
      <url>/2020/02/16/leetcode752/</url>
      
        <content type="html"><![CDATA[<h4 id="😂代码实现"><a href="#😂代码实现" class="headerlink" title="😂代码实现"></a>😂代码实现</h4><p>必须通过set来存储deadends和已经访问过的字符串，不然会超时。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int openLock(vector&lt;string&gt;&amp; deadends, string target) &#123;</span><br><span class="line">        if(contain(deadends, &quot;0000&quot;))</span><br><span class="line">            return -1;</span><br><span class="line">        set&lt;string&gt; mp;</span><br><span class="line">        int tl = 0, c1 = 1, c2 = 0;</span><br><span class="line">        queue&lt;string&gt; q;</span><br><span class="line">        q.push(&quot;0000&quot;);</span><br><span class="line">        mp.insert(&quot;0000&quot;);</span><br><span class="line">        for(auto x:deadends)</span><br><span class="line">            mp.insert(x);</span><br><span class="line">        string s;</span><br><span class="line">        char x;</span><br><span class="line">        while(q.size()) &#123;</span><br><span class="line">            s = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            c1--;</span><br><span class="line">            // cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">            if(s == target)</span><br><span class="line">                return tl;</span><br><span class="line">            for(int i = 0; i &lt; 4; ++i) &#123;</span><br><span class="line">                char x = s[i];</span><br><span class="line">                s[i] =  change_number(x, true);</span><br><span class="line">                // cout &lt;&lt; s &lt;&lt; &quot; &quot; ;</span><br><span class="line">                if(!mp.count(s)) &#123; </span><br><span class="line">                    q.push(s);</span><br><span class="line">                    mp.insert(s);</span><br><span class="line">                    c2++;</span><br><span class="line">                &#125;</span><br><span class="line">                s[i] = change_number(x, false);</span><br><span class="line">                // cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">                if(!mp.count(s)) &#123; </span><br><span class="line">                    q.push(s);</span><br><span class="line">                    mp.insert(s);</span><br><span class="line">                    c2++;</span><br><span class="line">                &#125;</span><br><span class="line">                s[i] = x;</span><br><span class="line">            &#125;</span><br><span class="line">            if(c1 ==0) &#123;</span><br><span class="line">                c1 = c2;</span><br><span class="line">                c2 = 0;</span><br><span class="line">                tl++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    char change_number(const char&amp; c, bool zf) </span><br><span class="line">    &#123;</span><br><span class="line">        char x = c;</span><br><span class="line">        // cout &lt;&lt; x &lt;&lt; zf &lt;&lt; endl;</span><br><span class="line">        if(zf) </span><br><span class="line">            return x == &apos;9&apos; ? &apos;0&apos; : x + 1;</span><br><span class="line">        else </span><br><span class="line">            return x == &apos;0&apos; ? &apos;9&apos; : x - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    bool contain(const vector&lt;string&gt;&amp; ss, const string &amp; s)</span><br><span class="line">    &#123;</span><br><span class="line">        for(auto x : ss) &#123;</span><br><span class="line">            if(x == s)</span><br><span class="line">                return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>43/43 cases passed (508 ms) <br><br>Your runtime beats 26.86 % of cpp submissions <br><br>Your memory usage beats 27.3 % of cpp submissions (35.3 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>779.第K个语法符号</title>
      <link href="/2020/02/15/leetcode779/"/>
      <url>/2020/02/15/leetcode779/</url>
      
        <content type="html"><![CDATA[<h4 id="😂失败1：超出时间限制"><a href="#😂失败1：超出时间限制" class="headerlink" title="😂失败1：超出时间限制"></a>😂失败1：超出时间限制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int kthGrammar(int N, int K) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt; &gt; v(30, vector&lt;int&gt;());</span><br><span class="line">        helper(N , v);</span><br><span class="line">        return v[N - 1][K - 1];</span><br><span class="line">    &#125;</span><br><span class="line">    void helper(int n, vector&lt;vector&lt;int&gt;&gt; &amp; v)&#123;</span><br><span class="line">        if(n == 0)</span><br><span class="line">            return ;</span><br><span class="line">        if(n == 1) &#123;</span><br><span class="line">            v[0].push_back(0);</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        helper(n - 1, v);</span><br><span class="line">        for(auto x : v[n - 2]) &#123;</span><br><span class="line">            if(x) &#123;</span><br><span class="line">                v[n - 1].push_back(1);</span><br><span class="line">                v[n - 1].push_back(0);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                v[n - 1].push_back(0);</span><br><span class="line">                v[n - 1].push_back(1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Time Limit Exceeded <br><br>15/55 <br>cases passed (N/A) <br><br>Testcase <br><br>30 <br><br>434991989 <br></p></blockquote><h4 id="😂递归实现"><a href="#😂递归实现" class="headerlink" title="😂递归实现"></a>😂递归实现</h4><p>重点在于<strong>找规律</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int kthGrammar(int N, int K) &#123;</span><br><span class="line">        if(N == 1) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if(K % 2) return kthGrammar(N - 1, (K + 1) / 2);</span><br><span class="line">        else return !kthGrammar(N - 1, K / 2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>55/55 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 5.25 % of cpp submissions (8.5 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>50.Pow(x,n)</title>
      <link href="/2020/02/15/leetcode50/"/>
      <url>/2020/02/15/leetcode50/</url>
      
        <content type="html"><![CDATA[<p>注意边界情况：当n==INT_MIN时，-INT_MIN超出范围了，要改为INT_MAX，<br>又因为存在（-1，-INT_MIN）这个特殊情况存在，考虑到正负修正为INT_MAX-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double myPow(double x, int n) &#123;</span><br><span class="line">        if(n &lt; 0)</span><br><span class="line">            return myPow(1 / x, n == INT_MIN ? INT_MAX - 1: -n);</span><br><span class="line">        return fast(x, n);</span><br><span class="line">    &#125;</span><br><span class="line">    double fast(double x, int n) &#123;</span><br><span class="line">        if(n == 0)</span><br><span class="line">            return 1;</span><br><span class="line">        double half = fast(x, n /2);</span><br><span class="line">        if(n % 2) &#123;</span><br><span class="line">            return half*half*x;</span><br><span class="line">        &#125;</span><br><span class="line">        return half*half;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>304/304 cases passed (4 ms) <br><br>Your runtime beats 71.28 % of cpp submissions <br><br>Your memory usage beats 57.93 % of cpp submissions (8.3 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>70.爬楼梯</title>
      <link href="/2020/02/15/leetcode70/"/>
      <url>/2020/02/15/leetcode70/</url>
      
        <content type="html"><![CDATA[<h4 id="😂自顶向下"><a href="#😂自顶向下" class="headerlink" title="😂自顶向下"></a>😂自顶向下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int climbStairs(int n) &#123;</span><br><span class="line">        f.resize(1000);</span><br><span class="line">        f[1] = 1;</span><br><span class="line">        f[2] = 2;</span><br><span class="line">        return helper(n);</span><br><span class="line">    &#125;</span><br><span class="line">    int helper(int n) &#123;</span><br><span class="line">        if(f[n] || n &lt;= 2)</span><br><span class="line">            return f[n];</span><br><span class="line">        f[n] = helper(n - 1) + helper(n-2);</span><br><span class="line">        return f[n]; </span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    vector&lt;int&gt; f;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>45/45 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 5.03 % of cpp submissions (8.7 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>509.斐波那契数</title>
      <link href="/2020/02/15/leetcode509/"/>
      <url>/2020/02/15/leetcode509/</url>
      
        <content type="html"><![CDATA[<h4 id="😂自顶向下"><a href="#😂自顶向下" class="headerlink" title="😂自顶向下"></a>😂自顶向下</h4><p>通常情况下，递归是一种直观而有效的实现算法的方法。 但是，如果我们不明智地使用它，可能会给性能带来一些不希望的损失，例如重复计算。<br><strong>记忆化（memoization）</strong>，可以用来避免这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int fib(int N) &#123;</span><br><span class="line">        f.resize(1000); </span><br><span class="line">        fill(f.begin(), f.end(), -1);  </span><br><span class="line">        f[0] = 0;</span><br><span class="line">        f[1] = 1;</span><br><span class="line">        return helper(N);</span><br><span class="line">    &#125;</span><br><span class="line">    int helper(int N) </span><br><span class="line">    &#123;</span><br><span class="line">        if(f.at(N) != -1)</span><br><span class="line">            return f.at(N);</span><br><span class="line">        int val = helper(N - 1) + helper(N -2);</span><br><span class="line">        f[N] = val;</span><br><span class="line">        return val;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    vector&lt;int&gt; f;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>31/31 cases passed (4 ms) <br><br>Your runtime beats 74.12 % of cpp submissions <br><br>Your memory usage beats 5.01 % of cpp submissions (8.7 MB) <br></p></blockquote><h4 id="😂自底向上迭代"><a href="#😂自底向上迭代" class="headerlink" title="😂自底向上迭代"></a>😂自底向上迭代</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int fib(int N) &#123;</span><br><span class="line">        f.resize(1000); </span><br><span class="line">        fill(f.begin(), f.end(), -1);  </span><br><span class="line">        f[0] = 0;</span><br><span class="line">        f[1] = 1;</span><br><span class="line">        return helper(N);</span><br><span class="line">    &#125;</span><br><span class="line">    int helper(int N) </span><br><span class="line">    &#123;</span><br><span class="line">        for(int i = 2; i &lt;= N; ++i) </span><br><span class="line">            f[i] = f[i - 1] + f[i - 2];</span><br><span class="line">        return f[N];</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    vector&lt;int&gt; f;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>31/31 cases passed (4 ms) <br><br>Your runtime beats 74.12 % of cpp submissions <br><br>Your memory usage beats 8.19 % of cpp submissions (8.5 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果解决“corrupted size vs. prev_size”问题？</title>
      <link href="/2020/02/13/problems5/"/>
      <url>/2020/02/13/problems5/</url>
      
        <content type="html"><![CDATA[<p>📣</p><p>在C++中我们时常会遇见“corrupted size vs. prev_size”的报错，它的原因在于<strong>内存越界</strong>，其实解决这个问题的办法在于使用<strong>vector</strong>来代替自己申请内存，并且使用以下两种方法来访问元素：</p><ul><li>使用迭代器</li><li>使用at</li></ul><p>尽量要避免使用[]来访问vector，越界的时候很难找到错误的地方，使用at带有越界的检查，更为安全。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 遇见的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>206.反转链表</title>
      <link href="/2020/02/02/leetcode206/"/>
      <url>/2020/02/02/leetcode206/</url>
      
        <content type="html"><![CDATA[<h4 id="😝迭代"><a href="#😝迭代" class="headerlink" title="😝迭代"></a>😝迭代</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* reverseList(ListNode* head) &#123;</span><br><span class="line">        ListNode* pre = nullptr,</span><br><span class="line">         *curr = head;</span><br><span class="line">        while(curr) &#123;</span><br><span class="line">            ListNode* nextTemp = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = pre;</span><br><span class="line">            pre = curr;</span><br><span class="line">            curr = nextTemp;</span><br><span class="line">        &#125;</span><br><span class="line">        return pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>27/27 cases passed (4 ms) <br><br>Your runtime beats 99.08 % of cpp submissions <br><br>Your memory usage beats 76.29 % of cpp submissions (9.1 MB) <br></p></blockquote><h4 id="🙃递归"><a href="#🙃递归" class="headerlink" title="🙃递归"></a>🙃递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* reverseList(ListNode* head) &#123;</span><br><span class="line">        if(!head || !head-&gt;next)</span><br><span class="line">            return head;</span><br><span class="line">        auto p = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = nullptr;</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>27/27 cases passed (4 ms) <br><br>Your runtime beats 99.08 % of cpp submissions <br><br>Your memory usage beats 5.08 % of cpp submissions (9.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>119.杨辉三角 II</title>
      <link href="/2020/02/02/leetcode119/"/>
      <url>/2020/02/02/leetcode119/</url>
      
        <content type="html"><![CDATA[<h4 id="🚌递归实现"><a href="#🚌递归实现" class="headerlink" title="🚌递归实现"></a>🚌递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; getRow(int rowIndex) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt; &gt; vec;</span><br><span class="line">        for(int i = 0; i &lt;= rowIndex; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            vec.push_back(&#123;&#125;);</span><br><span class="line">            for(int j = 0; j &lt;= i; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                vec[i].push_back(helper(i, j, vec));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return vec[rowIndex];</span><br><span class="line">    &#125;</span><br><span class="line">    int helper(int i, int j, vector&lt;vector&lt;int &gt;&gt;&amp; vec)</span><br><span class="line">    &#123;</span><br><span class="line">        if(j == 0 || i == j)</span><br><span class="line">            return 1;</span><br><span class="line">        return vec[i - 1][j - 1] + vec[i - 1][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>34/34 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 5.16 % of cpp submissions (9 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>118.杨辉三角</title>
      <link href="/2020/02/01/leetcode118/"/>
      <url>/2020/02/01/leetcode118/</url>
      
        <content type="html"><![CDATA[<h4 id="🚌递归实现"><a href="#🚌递归实现" class="headerlink" title="🚌递归实现"></a>🚌递归实现</h4><p>在实现递归函数之前，有两件重要的事情需要弄清楚: <br></p><ul><li>递推关系： 一个问题的结果与其子问题的结果之间的关系。 <br></li><li>基本情况: 不需要进一步的递归调用就可以直接计算答案的情况。 有时，基本案例也被称为 <strong>bottom cases</strong>，因为它们往往是问题被减少到最小规模的情况，也就是如果我们认为将问题划分为子问题是一种自上而下的方式的最下层。<br><blockquote><p>一旦我们计算出以上两个元素，再想要实现一个递归函数，就只需要根据递推关系调用函数本身，直到其抵达<strong>基本情况</strong>。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; generate(int numRows) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt; &gt; vec;</span><br><span class="line">        for(int i = 0; i &lt; numRows; ++i) &#123;</span><br><span class="line">            vec.push_back(&#123;&#125;);</span><br><span class="line">            for(int k = 0; k &lt;= i; ++k) &#123;</span><br><span class="line">                vec[i].push_back(helper(i + 1, k + 1));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">    int helper(int i, int j) &#123;</span><br><span class="line">        if(j == 1 || j == i) </span><br><span class="line">            return 1;</span><br><span class="line">        return helper(i - 1, j - 1) + helper(i - 1, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Time Limit Exceeded <br><br>14/15 cases passed (N/A) <br><br>Testcase <br><br>30 <br></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; generate(int numRows) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt; &gt; vec;</span><br><span class="line">        for(int i = 0; i &lt; numRows; ++i) &#123;</span><br><span class="line">            vec.push_back(&#123;&#125;);</span><br><span class="line">            for(int k = 0; k &lt;= i; ++k) &#123;</span><br><span class="line">                vec[i].push_back(helper(i + 1, k + 1, vec));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">    int helper(int i, int j, vector&lt;vector&lt;int&gt; &gt;&amp; vec) &#123;</span><br><span class="line">        if(j == 1 || j == i) </span><br><span class="line">            return 1;</span><br><span class="line">        return vec[i - 2][j - 2] + vec[i - 2][j - 1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>15/15 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 34.52 % of cpp submissions (8.8 MB) <br></p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24.两两交换链表中的节点</title>
      <link href="/2020/01/31/leetcode24/"/>
      <url>/2020/01/31/leetcode24/</url>
      
        <content type="html"><![CDATA[<h4 id="🚌"><a href="#🚌" class="headerlink" title="🚌"></a>🚌</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* swapPairs(ListNode* head) &#123;</span><br><span class="line">        if(!head)</span><br><span class="line">            return nullptr;</span><br><span class="line">        return helper(head, head-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* helper(ListNode* head, ListNode* head2) &#123;</span><br><span class="line">        if(!head || !head2)</span><br><span class="line">            return head;</span><br><span class="line">        head-&gt;next = head2-&gt;next;</span><br><span class="line">        head2-&gt;next = head;</span><br><span class="line">        head-&gt;next = helper(head-&gt;next, head-&gt;next ? head-&gt;next-&gt;next : nullptr);</span><br><span class="line">        return head2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>55/55 cases passed (4 ms) <br><br>Your runtime beats 83.69 % of cpp submissions <br><br>Your memory usage beats 19.24 % of cpp submissions (8.7 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>344.反转字符串</title>
      <link href="/2020/01/28/leetcode344/"/>
      <url>/2020/01/28/leetcode344/</url>
      
        <content type="html"><![CDATA[<h4 id="🥩递归"><a href="#🥩递归" class="headerlink" title="🥩递归"></a>🥩递归</h4><p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void reverseString(vector&lt;char&gt;&amp; s) &#123;</span><br><span class="line">        int i = 0,</span><br><span class="line">        e = s.size() - 1;</span><br><span class="line">        rs(s, i, e);</span><br><span class="line">    &#125;</span><br><span class="line">    void rs(vector&lt;char&gt;&amp; s, int&amp; i, int&amp; e) &#123;</span><br><span class="line">        if(i &gt;= e) </span><br><span class="line">            return ;</span><br><span class="line">        swap(s[i], s[e]);</span><br><span class="line">        ++i;</span><br><span class="line">        --e;</span><br><span class="line">        rs(s, i, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted  <br><br>478/478 cases passed (52 ms) <br><br>Your runtime beats 88.72 % of cpp submissions <br><br>Your memory usage beats 5.04 % of cpp submissions (20.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>347.前 K 个高频元素</title>
      <link href="/2020/01/25/leetcode347/"/>
      <url>/2020/01/25/leetcode347/</url>
      
        <content type="html"><![CDATA[<h4 id="🉐查找-and-哈希表"><a href="#🉐查找-and-哈希表" class="headerlink" title="🉐查找 and 哈希表"></a>🉐查找 and 哈希表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; topKFrequent(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        map&lt;int, int&gt; count;</span><br><span class="line">        for(auto x :nums) &#123;</span><br><span class="line">            count[x] += 1;</span><br><span class="line">        &#125;</span><br><span class="line">        using value_t = pair&lt;int, int&gt;;</span><br><span class="line">        vector&lt;value_t&gt; container(count.begin(), count.end());</span><br><span class="line">         auto comp = [](const value_t &amp;v1, const value_t &amp;v2) &#123;return v1.second &lt; v2.second;&#125;;</span><br><span class="line">        make_heap(container.begin(), container.end(), comp);</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        for (int i = 0; i &lt; k; ++i) &#123;</span><br><span class="line">            result.push_back(container.begin()-&gt;first);</span><br><span class="line">            pop_heap(container.begin(), container.end() - i, comp);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>21/21 cases passed (24 ms) <br><br>Your runtime beats 62.88 % of cpp submissions <br><br>Your memory usage beats 9.89 % of cpp submissions (11.7 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>454.四数相加 II</title>
      <link href="/2020/01/25/leetcode454/"/>
      <url>/2020/01/25/leetcode454/</url>
      
        <content type="html"><![CDATA[<h4 id="😂失败1-超出时间"><a href="#😂失败1-超出时间" class="headerlink" title="😂失败1.超出时间"></a>😂失败1.超出时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int fourSumCount(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B, vector&lt;int&gt;&amp; C, vector&lt;int&gt;&amp; D) &#123;</span><br><span class="line">        set&lt;vector&lt;int&gt;&gt; st;</span><br><span class="line">        for(int a = 0; a &lt; A.size(); ++a)</span><br><span class="line">            for(int b = 0; b &lt;B.size(); ++b)</span><br><span class="line">                for(int c = 0; c &lt; C.size(); ++c)</span><br><span class="line">                    for(int d = 0; d &lt; D.size(); ++d)</span><br><span class="line">                    &#123;</span><br><span class="line">                        if(A[a] + B[b] + C[c] + D[d] == 0) &#123;</span><br><span class="line">                            st.insert(&#123;a,b,c,d&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">        return st.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="😜分为两组"><a href="#😜分为两组" class="headerlink" title="😜分为两组"></a>😜分为两组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int fourSumCount(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B, vector&lt;int&gt;&amp; C, vector&lt;int&gt;&amp; D) &#123;</span><br><span class="line">        map&lt;int,int&gt; st;</span><br><span class="line">        int count = 0;</span><br><span class="line">        int x;</span><br><span class="line">        for(int a = 0; a &lt; A.size(); ++a)</span><br><span class="line">            for(int b = 0; b &lt;B.size(); ++b)</span><br><span class="line">            &#123;</span><br><span class="line">                x = A[a] + B[b];</span><br><span class="line">                if(!st.count(x))</span><br><span class="line">                    st.insert(&#123;x, 1&#125;);</span><br><span class="line">                else </span><br><span class="line">                    st[x] += 1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        for(int c = 0; c &lt; C.size(); ++c)</span><br><span class="line">            for(int d = 0; d &lt; D.size(); ++d)</span><br><span class="line">            &#123;</span><br><span class="line">                x = C[c] + D[d];</span><br><span class="line">                if(st.count(-x)) &#123;</span><br><span class="line">                    count += st[-x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.无重复字符的最长子串</title>
      <link href="/2020/01/24/leetcode3/"/>
      <url>/2020/01/24/leetcode3/</url>
      
        <content type="html"><![CDATA[<h4 id="🥛set-emsp"><a href="#🥛set-emsp" class="headerlink" title="🥛set &emsp;"></a>🥛set &emsp;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int lengthOfLongestSubstring(string s) &#123;</span><br><span class="line">        set&lt;char&gt; st;</span><br><span class="line">        int mx = 0;</span><br><span class="line">        for(int i = 0; i &lt; s.size();) &#123;</span><br><span class="line">            if(st.count(s[i]) &gt; 0) &#123;</span><br><span class="line">                if(st.size()) &#123;</span><br><span class="line">                    st.erase(s[i - st.size()]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                st.insert(s[i]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            mx = max(mx, (int)st.size());</span><br><span class="line">        &#125;</span><br><span class="line">        return mx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>987/987 cases passed (48 ms) <br><br>Your runtime beats 25.3 % of cpp submissions <br><br>Your memory usage beats 14.41 % of cpp submissions (16 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>771.宝石与石头</title>
      <link href="/2020/01/24/leetcode771/"/>
      <url>/2020/01/24/leetcode771/</url>
      
        <content type="html"><![CDATA[<h4 id="😂代码实现"><a href="#😂代码实现" class="headerlink" title="😂代码实现"></a>😂代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numJewelsInStones(string J, string S) &#123;</span><br><span class="line">        set&lt;char&gt; mp;</span><br><span class="line">        for(auto x : J) &#123;</span><br><span class="line">            mp.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">        int tl = 0;</span><br><span class="line">        for(auto a: S) &#123;</span><br><span class="line">            if(mp.count(a) &gt; 0) &#123;</span><br><span class="line">                tl += 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return tl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>254/254 cases passed (8 ms) <br><br>Your runtime beats 25.05 % of cpp submissions <br><br>Your memory usage beats 5.26 % of cpp submissions (8.8 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>652.寻找重复的子树</title>
      <link href="/2020/01/23/leetcode652/"/>
      <url>/2020/01/23/leetcode652/</url>
      
        <content type="html"><![CDATA[<h4 id="😔失败1"><a href="#😔失败1" class="headerlink" title="😔失败1"></a>😔失败1</h4><p>&emsp;&emsp;<strong>不可以重载map的比较函数</strong>，因为map的实现是红黑树，用于红黑树排序比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"> struct TreeNode &#123;</span><br><span class="line">     int val;</span><br><span class="line">     TreeNode *left;</span><br><span class="line">     TreeNode *right;</span><br><span class="line">     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    struct Cmp &#123;</span><br><span class="line">        bool compr(const TreeNode* lhs, const TreeNode* rhs) const &#123;</span><br><span class="line">            if (!lhs &amp;&amp; !rhs)</span><br><span class="line">                return true;</span><br><span class="line">            if ((!lhs &amp;&amp; rhs) || (lhs &amp;&amp; !rhs))</span><br><span class="line">                return false;</span><br><span class="line">            bool v = lhs-&gt;val == rhs-&gt;val;</span><br><span class="line">            if (!v)</span><br><span class="line">                return false;</span><br><span class="line">            bool v1 = compr(lhs-&gt;left, rhs-&gt;left);</span><br><span class="line">            if (!v1)</span><br><span class="line">                return false;</span><br><span class="line">            bool v2 = compr(lhs-&gt;right, rhs-&gt;right);</span><br><span class="line">            if (!v2)</span><br><span class="line">                return false;</span><br><span class="line">        &#125;</span><br><span class="line">        bool operator()(const TreeNode* lhs, const TreeNode* rhs) const &#123;</span><br><span class="line">            return compr(lhs, rhs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;TreeNode*&gt; findDuplicateSubtrees(TreeNode* root) &#123;</span><br><span class="line">        map&lt;TreeNode*, int, Cmp&gt; st;</span><br><span class="line">        vector&lt;TreeNode*&gt; vec;</span><br><span class="line">        dg(root, st, vec);</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">    void dg(TreeNode* h, map&lt;TreeNode*, int, Cmp&gt;&amp; st, vector&lt;TreeNode*&gt;&amp; vec)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!h)</span><br><span class="line">            return;</span><br><span class="line">        dg(h-&gt;left, st, vec);</span><br><span class="line">        dg(h-&gt;right, st, vec);</span><br><span class="line">        size_t ct = st.count(h);</span><br><span class="line">        if (ct &gt; 0) &#123;</span><br><span class="line">            if (st.at(h) == 1) &#123;</span><br><span class="line">                cout &lt;&lt; &quot;i&quot; &lt;&lt; endl;</span><br><span class="line">                vec.push_back(h);</span><br><span class="line">            &#125;</span><br><span class="line">            st.at(h) += 1;</span><br><span class="line">            cout &lt;&lt; &quot;t&quot; &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            st.insert(&#123; h, 1 &#125;);</span><br><span class="line">            cout &lt;&lt; &quot;f&quot; &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    TreeNode* root = new TreeNode(1);</span><br><span class="line">    root-&gt;left = new TreeNode(2);</span><br><span class="line">    root-&gt;right = new TreeNode(3);</span><br><span class="line">    root-&gt;left-&gt;left = new TreeNode(4);</span><br><span class="line">    root-&gt;right-&gt;left = new TreeNode(2);</span><br><span class="line">    root-&gt;right-&gt;right = new TreeNode(4);</span><br><span class="line">    root-&gt;right-&gt;left-&gt;left = new TreeNode(4);</span><br><span class="line">    Solution().findDuplicateSubtrees(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="😍序列化"><a href="#😍序列化" class="headerlink" title="😍序列化"></a>😍序列化</h4><p>&emsp;&emsp;序列化成字符串之后再来比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;TreeNode*&gt; findDuplicateSubtrees(TreeNode* root) &#123;</span><br><span class="line">        map&lt;string, int&gt; st;</span><br><span class="line">        vector&lt;TreeNode*&gt; vec;</span><br><span class="line">        string s;</span><br><span class="line">        dg(root, st, vec, s);</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">    void dg(TreeNode* h, map&lt;string, int&gt;&amp; st, vector&lt;TreeNode*&gt;&amp; vec, string&amp; s) </span><br><span class="line">    &#123;</span><br><span class="line">        if(!h)</span><br><span class="line">            return ;</span><br><span class="line">        dg(h-&gt;left, st, vec, s);</span><br><span class="line">        dg(h-&gt;right, st, vec, s);</span><br><span class="line">        s.clear();</span><br><span class="line">        seril(h, s);</span><br><span class="line">        if(st.count(s)) &#123;</span><br><span class="line">            if(st.at(s) == 1) &#123;</span><br><span class="line">                // cout &lt;&lt; &quot;i&quot; &lt;&lt; endl;</span><br><span class="line">                vec.push_back(h);</span><br><span class="line">            &#125;</span><br><span class="line">            st.at(s) += 1;</span><br><span class="line">            // cout &lt;&lt; &quot;t&quot; &lt;&lt; endl;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            st.insert(&#123;s, 1&#125;);</span><br><span class="line">            // cout &lt;&lt; &quot;f&quot; &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void seril(TreeNode* h,string&amp; s) </span><br><span class="line">    &#123;   </span><br><span class="line">        if(!h) &#123;</span><br><span class="line">            s += &quot;@#&quot;;</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        s += to_string(h-&gt;val) + &apos;#&apos;;</span><br><span class="line">        seril(h-&gt;left, s);</span><br><span class="line">        seril(h-&gt;right, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>168/168 cases passed (684 ms) <br><br>Your runtime beats 5.25 % of cpp submissions <br><br>Your memory usage beats 15.17 % of cpp submissions (54.5 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>36.有效的数独</title>
      <link href="/2020/01/23/leetcode36/"/>
      <url>/2020/01/23/leetcode36/</url>
      
        <content type="html"><![CDATA[<h4 id="🚌"><a href="#🚌" class="headerlink" title="🚌"></a>🚌</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isValidSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) &#123;</span><br><span class="line">        int columns[9][9] = &#123;0&#125;, </span><br><span class="line">        rows[9][9] = &#123;0&#125;, </span><br><span class="line">        boxes[9][9] = &#123;0&#125;;</span><br><span class="line">        for(int r = 0; r &lt; 9; ++r)</span><br><span class="line">            for(int c = 0; c &lt; 9; ++c)</span><br><span class="line">            &#123;</span><br><span class="line">                if(board[r][c] == &apos;.&apos;)</span><br><span class="line">                    continue;</span><br><span class="line">                int val = board[r][c] - 48 - 1;</span><br><span class="line">                // cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">                int box_num = r / 3 * 3 + c / 3;</span><br><span class="line">                boxes[box_num][val] += 1;</span><br><span class="line">                columns[c][val] += 1;</span><br><span class="line">                rows[r][val] += 1;</span><br><span class="line">                if(boxes[box_num][val] &gt; 1 ||</span><br><span class="line">                columns[c][val] &gt; 1 || rows[r][val] &gt; 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>504/504 cases passed (16 ms) <br><br>Your runtime beats 71.31 % of cpp submissions <br><br>Your memory usage beats 63.82 % of cpp submissions (9.4 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>49.字母异位词分组</title>
      <link href="/2020/01/23/leetcode49/"/>
      <url>/2020/01/23/leetcode49/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) </span><br><span class="line">    &#123;</span><br><span class="line">        map&lt;string, vector&lt;string&gt;&gt; mp;</span><br><span class="line">        for(auto str: strs) &#123;</span><br><span class="line">            string s = respell(str);</span><br><span class="line">            mp[s].push_back(str);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; vs;</span><br><span class="line">        for(auto v : mp) </span><br><span class="line">            vs.push_back(v.second);</span><br><span class="line">        return vs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string respell(string s) &#123;</span><br><span class="line">        vector&lt;char&gt; vec;</span><br><span class="line">        for(auto i : s) &#123;</span><br><span class="line">            vec.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(vec.begin(), vec.end());</span><br><span class="line">        string ns = &quot;&quot;;</span><br><span class="line">        for(auto x : vec) &#123;</span><br><span class="line">            ns += x;</span><br><span class="line">        &#125;</span><br><span class="line">        return ns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>101/101 cases passed (64 ms) <br><br>Your runtime beats 47.5 % of cpp submissions <br><br>Your memory usage beats 11.54 % of cpp submissions (22.7 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>219.存在重复元素 II</title>
      <link href="/2020/01/23/leetcode219/"/>
      <url>/2020/01/23/leetcode219/</url>
      
        <content type="html"><![CDATA[<h4 id="😝实现"><a href="#😝实现" class="headerlink" title="😝实现"></a>😝实现</h4><p>set的大小用来记录距离值K。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool containsNearbyDuplicate(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        set&lt;int&gt; st;</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            if(st.count(nums[i]) == 1) </span><br><span class="line">                return true;</span><br><span class="line">            st.insert(nums[i]);</span><br><span class="line">            if(st.size() &gt; k) &#123;</span><br><span class="line">                st.erase(nums[i - k]);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>23/23 cases passed (48 ms)<br><br>Your runtime beats 41.06 % of cpp submissions<br><br>Your memory usage beats 6.78 % of cpp submissions (15.6 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>350.两个数组的交集 II</title>
      <link href="/2020/01/23/leetcode350/"/>
      <url>/2020/01/23/leetcode350/</url>
      
        <content type="html"><![CDATA[<h4 id="😂二分查找"><a href="#😂二分查找" class="headerlink" title="😂二分查找"></a>😂二分查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">     vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        if(!nums1.size() || !nums2.size()) </span><br><span class="line">            return vector&lt;int&gt;();</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        int lo, ho, mid;</span><br><span class="line">        sort(nums2.begin(), nums2.end());</span><br><span class="line">        for(auto x: nums1) &#123;</span><br><span class="line">            lo = 0;</span><br><span class="line">            ho = nums2.size() - 1;</span><br><span class="line">            while(lo &lt; ho) &#123;</span><br><span class="line">                mid = lo + (ho - lo) / 2;</span><br><span class="line">                if(nums2[mid] &lt; x) &#123;</span><br><span class="line">                    lo = mid + 1;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    ho = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(nums2[lo] == x) &#123;</span><br><span class="line">                res.push_back(x);</span><br><span class="line">                nums2.erase(nums2.begin() + lo);</span><br><span class="line">                if(!nums2.size())</span><br><span class="line">                    return res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>61/61 cases passed (12 ms) <br><br>Your runtime beats 55.05 % of cpp submissions <br><br>Your memory usage beats 52.41 % of cpp submissions (9.4 MB) <br></p></blockquote><h4 id="😧map"><a href="#😧map" class="headerlink" title="😧map"></a>😧map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">     vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        map&lt;int ,int&gt; mp;</span><br><span class="line">        for(auto x : nums1) &#123;</span><br><span class="line">            if(mp.count(x)) &#123;</span><br><span class="line">                mp[x] += 1;</span><br><span class="line">            &#125; else </span><br><span class="line">                mp[x] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;int&gt; vec;</span><br><span class="line">        for(auto x : nums2) &#123;</span><br><span class="line">            if(mp.count(x)) &#123;</span><br><span class="line">                if(mp[x] &gt; 0) &#123;</span><br><span class="line">                    mp[x]--;</span><br><span class="line">                    vec.push_back(x);</span><br><span class="line">                &#125;</span><br><span class="line">                if(mp[x] == 0) &#123;</span><br><span class="line">                    mp.erase(x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        return vec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>61/61 cases passed (12 ms)<br><br>Your runtime beats 46.09 % of cpp submissions<br><br>Your memory usage beats 16.76 % of cpp submissions (9.7 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>387.字符串中的第一个唯一字符</title>
      <link href="/2020/01/23/leetcode387/"/>
      <url>/2020/01/23/leetcode387/</url>
      
        <content type="html"><![CDATA[<h4 id="😂代码实现"><a href="#😂代码实现" class="headerlink" title="😂代码实现"></a>😂代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int firstUniqChar(string s) &#123;</span><br><span class="line">        if(!s.size())</span><br><span class="line">            return -1;</span><br><span class="line">        map&lt;char, int&gt; st;</span><br><span class="line">        for(int i = 0; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            if(!st.count(s[i])) &#123;</span><br><span class="line">                st[s[i]] = i;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                st[s[i]] = INT_MAX;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!st.size())</span><br><span class="line">            return -1;</span><br><span class="line">        auto x = min_element(st.begin(), st.end(), [](auto&amp; a, auto&amp; b)&#123;</span><br><span class="line">            if(a.second &lt; b.second) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;);</span><br><span class="line">        if(x-&gt;second == INT_MAX)</span><br><span class="line">            return -1;</span><br><span class="line">        return x-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>104/104 cases passed (92 ms) <br><br>Your runtime beats 20.33 % of cpp submissions <br><br>Your memory usage beats 5.07 % of cpp submissions (13.5 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>599.两个列表的最小索引总和</title>
      <link href="/2020/01/23/leetcode599/"/>
      <url>/2020/01/23/leetcode599/</url>
      
        <content type="html"><![CDATA[<h4 id="😂代码实现"><a href="#😂代码实现" class="headerlink" title="😂代码实现"></a>😂代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;string&gt; findRestaurant(vector&lt;string&gt;&amp; list1, vector&lt;string&gt;&amp; list2) &#123;</span><br><span class="line">        vector&lt;string&gt; vec;</span><br><span class="line">        if(!list1.size())</span><br><span class="line">            return vec;</span><br><span class="line">        map&lt;string, int&gt; st1, st2;</span><br><span class="line">        for(int i = 0; i &lt; list1.size(); ++i) </span><br><span class="line">            st1.insert(&#123;list1[i], i&#125;);</span><br><span class="line">        for(int i = 0; i &lt; list2.size(); ++i) &#123;</span><br><span class="line">            if(st1.count(list2[i]) != 0) &#123;</span><br><span class="line">                auto x = st1.at(list2[i]);</span><br><span class="line">                st2.insert(&#123;list2[i], x + i&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int mi = INT_MAX;</span><br><span class="line">        for(auto x :st2) &#123;</span><br><span class="line">            if(mi &gt; x.second) &#123;</span><br><span class="line">                mi = x.second;</span><br><span class="line">                // ms = x.first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(auto x : st2) &#123;</span><br><span class="line">            if(mi == x.second) </span><br><span class="line">                vec.push_back(x.first);</span><br><span class="line">        &#125;</span><br><span class="line">        return vec;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>133/133 cases passed (152 ms) <br><br>Your runtime beats 33.28 % of cpp submissions <br><br>Your memory usage beats 21.41 % of cpp submissions (31.6 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>205.同构字符串</title>
      <link href="/2020/01/23/leetcode205/"/>
      <url>/2020/01/23/leetcode205/</url>
      
        <content type="html"><![CDATA[<h4 id="😂实现一"><a href="#😂实现一" class="headerlink" title="😂实现一"></a>😂实现一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isIsomorphic(string s, string t) &#123;</span><br><span class="line">        unordered_map&lt;char, int&gt; st, tt;</span><br><span class="line">        for(int i = 0; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            if(st.count(s[i]) == 1 || tt.count(t[i]) == 1) &#123;</span><br><span class="line">                if(tt.count(t[i]) != 1 || st.count(s[i]) != 1 || tt.at(t[i]) != st.at(s[i])) </span><br><span class="line">                    return false;</span><br><span class="line">            &#125; </span><br><span class="line">            st.insert(&#123;s[i], i&#125;);</span><br><span class="line">            tt.insert(&#123;t[i], i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>30/30 cases passed (40 ms) <br><br>Your runtime beats 5.2 % of cpp submissions <br><br>Your memory usage beats 5.04 % of cpp submissions (15 MB) <br></p></blockquote><h4 id="🤫实现二"><a href="#🤫实现二" class="headerlink" title="🤫实现二"></a>🤫实现二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isIsomorphic(string s, string t) &#123;</span><br><span class="line">        map&lt;char, char&gt; mp1, mp2;</span><br><span class="line">        for(int i = 0; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            if(mp1.find(s[i]) == mp1.end()) &#123;</span><br><span class="line">                mp1.insert(&#123;s[i], t[i]&#125;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if(mp1[s[i]] != t[i]) </span><br><span class="line">                    return false;</span><br><span class="line">            &#125;</span><br><span class="line">            if(mp2.find(t[i]) == mp2.end()) &#123;</span><br><span class="line">                mp2.insert(&#123;t[i], s[i]&#125;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if(mp2[t[i]] != s[i]) </span><br><span class="line">                    return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>30/30 cases passed (24 ms)<br><br>Your runtime beats 13.07 % of cpp submissions<br><br>Your memory usage beats 6.98 % of cpp submissions (9.5 MB) <br></p></blockquote><h4 id="🤫实现三"><a href="#🤫实现三" class="headerlink" title="🤫实现三"></a>🤫实现三</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isIsomorphic(string s, string t) &#123;</span><br><span class="line">        return transf(s) == transf(t);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;int&gt; transf(string s) &#123;</span><br><span class="line">        int count = 0;</span><br><span class="line">        int a[128] = &#123;0&#125;;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        for(int i = 0; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            if(a[s[i]] == 0) &#123;</span><br><span class="line">                a[s[i]] = ++count;</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(a[s[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>30/30 cases passed (8 ms)<br><br>Your runtime beats 90.9 % of cpp submissions<br><br>Your memory usage beats 5.06 % of cpp submissions (10.8 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>202.快乐数</title>
      <link href="/2020/01/23/leetcode202/"/>
      <url>/2020/01/23/leetcode202/</url>
      
        <content type="html"><![CDATA[<h4 id="🐤初次"><a href="#🐤初次" class="headerlink" title="🐤初次"></a>🐤初次</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isHappy(int n) &#123;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        int count = 0;</span><br><span class="line">        while(n != 1 &amp;&amp; count != 10) &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            helper(n, res);</span><br><span class="line">            n = 0;</span><br><span class="line">            for(auto x: res) &#123;</span><br><span class="line">                n += pow(x, 2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(count == 10)</span><br><span class="line">            return false;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void helper(int n, vector&lt;int&gt;&amp; res) &#123;</span><br><span class="line">        res.clear();</span><br><span class="line">        while(n) &#123;</span><br><span class="line">            res.push_back(n % 10);</span><br><span class="line">            n /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="🐤改进一"><a href="#🐤改进一" class="headerlink" title="🐤改进一"></a>🐤改进一</h4><p>改用set来存储得到的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isHappy(int n) &#123;</span><br><span class="line">        while(n != -1) &#123;</span><br><span class="line">            n = helper(n);</span><br><span class="line">            if(n == 1)</span><br><span class="line">                return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    int helper(int n) &#123;</span><br><span class="line">        int tl = 0;</span><br><span class="line">        while(n) &#123;</span><br><span class="line">            tl += pow(n % 10, 2);</span><br><span class="line">            n /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!st.count(tl)) &#123;</span><br><span class="line">            st.insert(tl);</span><br><span class="line">            return tl;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    set&lt;int&gt; st;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="🐤改进二"><a href="#🐤改进二" class="headerlink" title="🐤改进二"></a>🐤改进二</h4><p>&emsp;&emsp;改用链表中查找是否有环的快慢指针思想来实现。</p><p>&emsp;&emsp;这里必然存在循环，快指针会追上慢指针。如果是快乐数，那么最后两个指针都会得到结果1；如果不是快乐数，那么两个指针在循环中也是会相遇的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isHappy(int n) &#123;</span><br><span class="line">        int fast = n, slow = n;</span><br><span class="line">        do &#123;</span><br><span class="line">            slow = helper(slow);</span><br><span class="line">            fast = helper(fast);</span><br><span class="line">            fast = helper(fast);</span><br><span class="line">        &#125; while(fast != slow);</span><br><span class="line">        if(fast == 1)</span><br><span class="line">            return true;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    int helper(int n) &#123;</span><br><span class="line">        int tl = 0;</span><br><span class="line">        while(n) &#123;</span><br><span class="line">            tl += pow(n % 10, 2);</span><br><span class="line">            n /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return tl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>401/401 cases passed (0 ms)<br><br>Your runtime beats 100 % of cpp submissions<br><br>Your memory usage beats 83.82 % of cpp submissions (8 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>349.两个数组的交集</title>
      <link href="/2020/01/23/leetcode349/"/>
      <url>/2020/01/23/leetcode349/</url>
      
        <content type="html"><![CDATA[<h4 id="🉐二分查找-and-哈希表"><a href="#🉐二分查找-and-哈希表" class="headerlink" title="🉐二分查找 and 哈希表"></a>🉐二分查找 and 哈希表</h4><p>&emsp;&emsp;一个哈希表的set来得到一个数组的唯一值，再通过二分查找来比较，得到一样的值，放入结果的vector中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        set&lt;int&gt; st;</span><br><span class="line">        if(!nums1.size() || !nums2.size()) </span><br><span class="line">            return vector&lt;int&gt;();</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        int lo, ho, mid;</span><br><span class="line">        sort(nums2.begin(), nums2.end());</span><br><span class="line">        for(auto x: nums1) </span><br><span class="line">            st.insert(x);</span><br><span class="line">        for(auto x: st) &#123;</span><br><span class="line">            lo = 0;</span><br><span class="line">            ho = nums2.size() - 1;</span><br><span class="line">            while(lo &lt; ho) &#123;</span><br><span class="line">                mid = lo + (ho - lo) / 2;</span><br><span class="line">                if(nums2[mid] &lt; x) &#123;</span><br><span class="line">                    lo = mid + 1;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    ho = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(nums2[lo] == x) &#123;</span><br><span class="line">                res.push_back(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>136.只出现一次的数字</title>
      <link href="/2020/01/23/leetcode136/"/>
      <url>/2020/01/23/leetcode136/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        set&lt;int&gt; st;</span><br><span class="line">        for(auto x : nums) &#123;</span><br><span class="line">            if(st.count(x) == 0)</span><br><span class="line">                st.insert(x);</span><br><span class="line">            else </span><br><span class="line">                st.erase(x);</span><br><span class="line">        &#125;</span><br><span class="line">        return *st.begin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>16/16 cases passed (36 ms) <br><br>Your runtime beats 8.92 % of cpp submissions <br><br>Your memory usage beats 5.02 % of cpp submissions (12.1 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>217.存在重复元素</title>
      <link href="/2020/01/23/leetcode217/"/>
      <url>/2020/01/23/leetcode217/</url>
      
        <content type="html"><![CDATA[<p>因为不需要有序，所以可以用unordered_set而不是set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool containsDuplicate(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        unordered_set&lt;int&gt; st;</span><br><span class="line">        for(auto x : nums) &#123;</span><br><span class="line">            if(st.count(x) &gt; 0)</span><br><span class="line">                return true;</span><br><span class="line">            st.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>706.设计哈希映射</title>
      <link href="/2020/01/23/leetcode706/"/>
      <url>/2020/01/23/leetcode706/</url>
      
        <content type="html"><![CDATA[<h4 id="😂代码实现"><a href="#😂代码实现" class="headerlink" title="😂代码实现"></a>😂代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">class MyHashMap &#123;</span><br><span class="line">public:</span><br><span class="line">    /** Initialize your data structure here. */</span><br><span class="line">    MyHashMap() : </span><br><span class="line">        N(0), M(10000)</span><br><span class="line">    &#123;</span><br><span class="line">        keys = new int [10000]();</span><br><span class="line">        vals = new int [10000]();</span><br><span class="line">        for(int i = 0; i &lt; 10000; ++i) &#123;</span><br><span class="line">            keys[i] = -1;</span><br><span class="line">            vals[i] = -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** value will always be non-negative. */</span><br><span class="line">    void put(int key, int value) &#123;</span><br><span class="line">        int i = (key &amp; 0x7fffffff) % M;</span><br><span class="line">        for( ; keys[i] != -1; i = (i + 1) % M) &#123;</span><br><span class="line">            if(keys[i] == key) &#123;</span><br><span class="line">                vals[i] = value;</span><br><span class="line">                return ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vals[i] = value;</span><br><span class="line">        keys[i] = key;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */</span><br><span class="line">    int get(int key) &#123;</span><br><span class="line">        int i = (key &amp; 0x7fffffff) % M;</span><br><span class="line">        for( ; keys[i] != -1; i = (i + 1) % M) &#123;</span><br><span class="line">            if(keys[i] == key)</span><br><span class="line">                return vals[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Removes the mapping of the specified value key if this map contains a mapping for the key */</span><br><span class="line">    void remove(int key) &#123;</span><br><span class="line">        int i = (key &amp; 0x7fffffff) % M;</span><br><span class="line">        for( ; keys[i] != -1; i = (i + 1) % M) &#123;</span><br><span class="line">            if(keys[i] == key)</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        if(keys[i] == -1)</span><br><span class="line">            return ;</span><br><span class="line">        int k2, v2;</span><br><span class="line">        keys[i] = -1;</span><br><span class="line">        vals[i] = -1;</span><br><span class="line">        i = (i + 1) % M;</span><br><span class="line">        while(keys[i] != -1)&#123;</span><br><span class="line">            k2 = keys[i];</span><br><span class="line">            v2 = vals[i];</span><br><span class="line">            keys[i] = -1;</span><br><span class="line">            vals[i] = -1;</span><br><span class="line">            --N;</span><br><span class="line">            put(k2, v2);</span><br><span class="line">            i = (i + 1) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        --N;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    int *keys;</span><br><span class="line">    int *vals;</span><br><span class="line">    int N;</span><br><span class="line">    int M;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>705.设计哈希集合</title>
      <link href="/2020/01/23/leetcode705/"/>
      <url>/2020/01/23/leetcode705/</url>
      
        <content type="html"><![CDATA[<h4 id="😂代码实现"><a href="#😂代码实现" class="headerlink" title="😂代码实现"></a>😂代码实现</h4><p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">class MyHashSet &#123;</span><br><span class="line">public:</span><br><span class="line">    /** Initialize your data structure here. */</span><br><span class="line">    MyHashSet() : </span><br><span class="line">        N(0), M(10000)</span><br><span class="line">    &#123;</span><br><span class="line">        keys = new int [10000]();</span><br><span class="line">        for(int i = 0; i &lt; 10000; ++i)</span><br><span class="line">            keys[i] = -1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void add(int key) &#123;</span><br><span class="line">        int i = (key &amp; 0x7fffffff) % M;</span><br><span class="line">        for( ; keys[i] != -1; i = (i + 1) % M) &#123;</span><br><span class="line">            if(keys[i] == key)</span><br><span class="line">                return ;</span><br><span class="line">        &#125;</span><br><span class="line">        keys[i] = key;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void remove(int key) &#123;</span><br><span class="line">        if(!contains(key))</span><br><span class="line">            return ;</span><br><span class="line">        int i = (key &amp; 0x7fffffff) % M;</span><br><span class="line">        for( ; keys[i] != -1; i = (i + 1) % M) &#123;</span><br><span class="line">            if(keys[i] == key)</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        int k2;</span><br><span class="line">        keys[i] = -1;</span><br><span class="line">        i = (i + 1) % M;</span><br><span class="line">        while(keys[i] != -1)&#123;</span><br><span class="line">            k2 = keys[i];</span><br><span class="line">            keys[i] = -1;</span><br><span class="line">            --N;</span><br><span class="line">            add(k2);</span><br><span class="line">            i = (i + 1) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        --N;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /** Returns true if this set contains the specified element */</span><br><span class="line">    bool contains(int key) &#123;</span><br><span class="line">        int i = (key &amp; 0x7fffffff) % M;</span><br><span class="line">        for( ; keys[i] != -1; i = (i + 1) % M) &#123;</span><br><span class="line">            if(keys[i] == key)</span><br><span class="line">                return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    int *keys;</span><br><span class="line">    int N;</span><br><span class="line">    int M;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章 Internet协议</title>
      <link href="/2020/01/23/TIV5/"/>
      <url>/2020/01/23/TIV5/</url>
      
        <content type="html"><![CDATA[<p><strong>IPv4头部长度</strong>包含20个字节（没有选项），<strong>IPv6头部长度</strong>固定（40字节）。<br><br><strong>网络字节序</strong>：高位优先字节序。<br><br>Internet头部被限制为60个字节，因为<strong>IHL字段长度</strong>为4位，保存IPv4头部中32位字的数量。<br><br>主机不需要接收大于576字节的IPv4数据报。<br><br><strong>头部校验和</strong>字段仅计算IPv4头部。 <br></p>]]></content>
      
      
      
        <tags>
            
            <tag> 《TCP/IP详解》读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 链路层</title>
      <link href="/2020/01/23/TIV3/"/>
      <url>/2020/01/23/TIV3/</url>
      
        <content type="html"><![CDATA[<h4 id="🐘关键词汇"><a href="#🐘关键词汇" class="headerlink" title="🐘关键词汇"></a>🐘关键词汇</h4><p><strong>最大传输单元</strong>： MTU<br><br><strong>以太网</strong>：通常指一套标准。10Mbit/s以太网，又称802.3标准。<br></p><h4 id="🐳关键概念"><a href="#🐳关键概念" class="headerlink" title="🐳关键概念"></a>🐳关键概念</h4><p>&emsp;交换机以双工方式运行，并且不需要使用CSMA/CD算法.<br><br>&emsp;传统以太网最小的帧是64字节，要求数据区长度最小为48字节，最大帧长度为1518字节，MTU大小限制为1500字节。<br></p>]]></content>
      
      
      
        <tags>
            
            <tag> 《TCP/IP详解》读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 Internet地址结构</title>
      <link href="/2020/01/23/TIV2/"/>
      <url>/2020/01/23/TIV2/</url>
      
        <content type="html"><![CDATA[<h4 id="🐘关键词汇"><a href="#🐘关键词汇" class="headerlink" title="🐘关键词汇"></a>🐘关键词汇</h4><p><strong>子网寻址</strong>：一个站点被分配一个A类、B类和C类的网络号，保留一些剩余主机号进一步用站点分配。该站点可能将基础地址中的主机部分进一步划分为一个子网号和一个主机号。<br><br><strong>A类网络地址</strong>：网络号8位，0 + 7位自由;主机号24位 <br><br><strong>B类网络地址</strong>：网络号16位，10 + 14位自由；主机16位 <br><br><strong>C类网络地址</strong>：网络号24位，110 + 21位自由 ；主机8位<br><br><strong>D类网络地址</strong>：网络号32位，1110 + 28位自由 <br><br><strong>E类网络地址</strong>：网络号32位，1111 + 28位自由 <br><br><strong>子网掩码</strong>：由主机或路由器使用的分配位，以确定如何从一台主机对应IP地址中获得网络和子网信息。子网掩码纯粹是站点内部的局部问题。<br><br><strong>定向广播</strong>： 使用<strong>子网广播地址</strong>作为目的地的数据报。<br><br><strong>有限广播</strong>：255.255.255.255被保留为<strong>本地网络广播</strong>，它根本不会被路由器转发。<br><br><strong>任意源组播</strong>：ASM,任何发送方可以发送给任何组。<br><br><strong>特点组播</strong>：SSM，在每个组中只使用一个发送方。<br></p><h4 id="🐳关键概念"><a href="#🐳关键概念" class="headerlink" title="🐳关键概念"></a>🐳关键概念</h4><p>&emsp;IPv6地址长度128位（16* 8），IPv4地址长度32位（8* 4） <br><br>&emsp;IPv6块的前导的零不必书写。全零的块可以省略，并用符号::代替，为了避免歧义，一个IPv6地址中的符号::只能使用一次。在IPv6格式中嵌入IPv4地址可以使用混合符号形式，紧接着IPv4部分的地址块的值为ffff，地址的其他部分使用点分四组格式（::ffff:10.0.0.1） <br><br>&emsp;只有划分子网的网络中的主机和路由器知道子网结构，Internet其他部分仍然将它作为站点相关的地址来看待.<br><br>&emsp;128.32.1.255/24这个地址称为<strong>子网广播地址</strong>。<br><br>&emsp;CIDR缓解IPv4地址的压力，处理大于255小于65536的主机数。<br></p>]]></content>
      
      
      
        <tags>
            
            <tag> 《TCP/IP详解》读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 概述</title>
      <link href="/2020/01/22/TIV1/"/>
      <url>/2020/01/22/TIV1/</url>
      
        <content type="html"><![CDATA[<h4 id="🐘关键词汇"><a href="#🐘关键词汇" class="headerlink" title="🐘关键词汇"></a>🐘关键词汇</h4><p><strong>协议族</strong>： 一系列相关协议的集合。 <br><br><strong>网关</strong>：又称路由器。 <br><br><strong>虚电路</strong>：表现出很多电路行为，但是不依赖于物理的交换机，而通过顶层的<strong>面向连接的分组</strong>来实现 <br><br><strong>数据报</strong>：一个特定类型的<strong>分组</strong>，包含所有来源地和目的地的所有识别信息。 <br><br><strong>消息边界</strong>：假设发送3个数据报，接收时必须是3个数据报，那么这就是有消息边界的；如果可以自己选择接收次数，一次接收3个数据报，或者2次，这就是没有消息边界。<br><br><strong>会话层</strong>：表示运行中的应用之间的交互，会话层协议可提供例如连接初始化和重新启动、增加检查点等功能。<br><br><strong>表示层</strong>：负责信息格式转换和标准化编码。<br><br><strong>PDU</strong>：协议数据单元 <br><br><strong>转发</strong>：每个数据报的目的地址用于决定将该数据报发送到哪里，而做出此决定和发送数据报到下一跳的过程。<br><br><strong>单播</strong>：目的地是一台主机。<br><br><strong>广播</strong>：目的地是一个指定网络中的所有主机。 <br><br><strong>组播</strong>：目的地是属于一个组播组的一组主机。 <br><br><strong>ICMP</strong>: Internet控制消息协议是<strong>IP的一个辅助协议</strong>。IP层使用它与其他主机或路由器的IP层之间交换差错消息和其他重要消息。 应用：ping、traceroute。<br><br><strong>IGMP</strong>：Internet组管理协议是<strong>IPv4的另一个辅助协议</strong>。它采用组播寻址和交付来管理作为组播成员的主机。<br><br><strong>SCTP</strong>: 流控制传输协议. <br><br><strong>端口号</strong>：16位非负整数（0~65535），熟知端口号（0 ~ 1023），注册端口号（1024 ~ 49151），动态/私有端口号（49152 ~ 65535）<br><br><strong>internet</strong>：常见协议族互联的多个网络。<br><br><strong>Internet</strong>: TCP/IP通信的世界范围的主机集合。<br></p><h4 id="🐳关键概念"><a href="#🐳关键概念" class="headerlink" title="🐳关键概念"></a>🐳关键概念</h4><p>&emsp;TCP/IP是一个实现Internet体系结构的<strong>协议族</strong>。 <br><br>&emsp;在<strong>尽力而为</strong>的交付中，网络不会花费很大努力来确保数据在没有差错或缺陷的情况下交付。<br><br>&emsp;在尽力而为的IP网络中，降低发送方的发送速度可通过<strong>流量控制</strong>机制实现。<br><br>&emsp;通常认为TCP/IP体系结构包含5层。<br><br>&emsp;端主机实现所有层，交换机实现到第二层，路由器实现到第三层。 <br><br>&emsp;<strong>通常不认为交换机或桥接是一个中间系统</strong>，这时由于它们没有使用互联网络协议的地址格式来编址，并在很大程度上以透明于网络层协议的方式运行。<br><br>&emsp;有多个接口的系统称为<strong>多宿主</strong>. <br><br>&emsp;IP发送给<strong>链路层协议</strong>的PDU称为<strong>IP数据报</strong>，它的大小是64KB（IPv6是4GB）,我们简化称为<strong>分组</strong><br><br>&emsp;大的分组放入链路层PDU（称为<strong>帧</strong>）时需要进行缩小处理，这个过程称为<strong>分片</strong>。 <br><br>&emsp;TCP发送到IP的PDU称为<strong>TCP段</strong>。 <br><br>&emsp;用户可以通过<strong>虚拟专用网VPN</strong>连接到内联网。<br><br>&emsp;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 《TCP/IP详解》读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列表</title>
      <link href="/2020/01/22/alg6/"/>
      <url>/2020/01/22/alg6/</url>
      
        <content type="html"><![CDATA[<h4 id="🥣拉链法的散列表"><a href="#🥣拉链法的散列表" class="headerlink" title="🥣拉链法的散列表"></a>🥣拉链法的散列表</h4><p>&emsp;&emsp;基于<strong>链表实现的字典</strong>实现而来 <br><br>散列表的重点在于解决冲突，拉链法解决冲突的方法是通过数组＋链表的形式来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &quot;BinarySearchST.hpp&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 拉链法散列表</span><br><span class="line"> * 因为没有Java的hasCode方法，</span><br><span class="line"> * 所以这里的代码直接使用int类型</span><br><span class="line"> **/ </span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">class SeparateChainingHashST</span><br><span class="line">&#123;</span><br><span class="line">  public:</span><br><span class="line">    SeparateChainingHashST(int M);</span><br><span class="line">    ~SeparateChainingHashST();</span><br><span class="line">    Value get(int key);</span><br><span class="line">    void put(int key, Value val);</span><br><span class="line">    int size() const &#123;return this-&gt;N;&#125;</span><br><span class="line">  private:</span><br><span class="line">    int N; //键值对总数</span><br><span class="line">    int M; //散列表的大小</span><br><span class="line">    BinarySearchST&lt;int, Value&gt; *st;</span><br><span class="line"></span><br><span class="line">    int hash(int key) const;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">SeparateChainingHashST&lt;Value&gt;::SeparateChainingHashST(int M)</span><br><span class="line">  : N(0), M(M)</span><br><span class="line">&#123;</span><br><span class="line">  st = new BinarySearchST&lt;int, Value&gt;[M]();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">SeparateChainingHashST&lt;Value&gt;::~SeparateChainingHashST()</span><br><span class="line">&#123;</span><br><span class="line">  delete [] st;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">int SeparateChainingHashST&lt;Value&gt;::hash(int key) const</span><br><span class="line">&#123;</span><br><span class="line">  return (key &amp; 0x7fffffff) % M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">Value SeparateChainingHashST&lt;Value&gt;::get(int key)</span><br><span class="line">&#123;</span><br><span class="line">  return st[hash(key)].get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">void SeparateChainingHashST&lt;Value&gt;::put(int key, Value val)</span><br><span class="line">&#123;</span><br><span class="line">  st[hash(key)].put(key, val);</span><br><span class="line">  N++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="😤线性探测法的散列表"><a href="#😤线性探测法的散列表" class="headerlink" title="😤线性探测法的散列表"></a>😤线性探测法的散列表</h4><p>&emsp;&emsp;线性探测法的重点在于hash值相同时，将键值往后移，这样就共用一个数组，对于拉链法的散列表，这种方法是<strong>用时间复杂度来换取空间复杂度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 线性探测法的散列表</span><br><span class="line"> **/ </span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">class LinearProbingHashST&#123;</span><br><span class="line">  public:</span><br><span class="line">    LinearProbingHashST(int M);</span><br><span class="line">    int size() const &#123;return N;&#125;</span><br><span class="line">    void put(int key, Value val);</span><br><span class="line">    Value get(int key);</span><br><span class="line">    void delet(int key);</span><br><span class="line">    bool contain(int key) const;</span><br><span class="line">  private:</span><br><span class="line">    int M; //长度</span><br><span class="line">    int N; //键值对数量</span><br><span class="line">    int* keys;</span><br><span class="line">    Value* vals;</span><br><span class="line"></span><br><span class="line">    void resize(int sz);</span><br><span class="line">    int hash(int key) const;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">int LinearProbingHashST&lt;Value&gt;::hash(int key) const</span><br><span class="line">&#123;</span><br><span class="line">  return (key &amp; 0x7fffffff) % M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">LinearProbingHashST&lt;Value&gt;::LinearProbingHashST(int M)</span><br><span class="line"> :M(M), N(0)</span><br><span class="line">&#123;</span><br><span class="line">  keys = new int [M]();</span><br><span class="line">  vals = new Value [M]();</span><br><span class="line">  for(int i  = 0; i &lt; M; ++i)</span><br><span class="line">    keys[i] = -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">void </span><br><span class="line">LinearProbingHashST&lt;Value&gt;::put(int key, Value val)</span><br><span class="line">&#123;</span><br><span class="line">  if(N &gt; M / 2) &#123;</span><br><span class="line">    resize(2 * M);</span><br><span class="line">  &#125;</span><br><span class="line">  int i;</span><br><span class="line">  for(i = hash(key); keys[i] != -1; i = (i + 1) % M) &#123;</span><br><span class="line">    if(keys[i] == key) </span><br><span class="line">    &#123;</span><br><span class="line">      vals[i] = val;</span><br><span class="line">      return ;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  keys[i] = key;</span><br><span class="line">  vals[i] = val;</span><br><span class="line">  N++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">void </span><br><span class="line">LinearProbingHashST&lt;Value&gt;::resize(int sz)</span><br><span class="line">&#123;</span><br><span class="line">  int * keys1 = keys;</span><br><span class="line">  Value* vals1 = vals;</span><br><span class="line">  int M1 = M;</span><br><span class="line">  keys = new int [sz]();</span><br><span class="line">  vals = new Value [sz] ();</span><br><span class="line">  for(int i = 0; i &lt; sz; ++i) &#123;</span><br><span class="line">    keys[i] = -1;</span><br><span class="line">  &#125;</span><br><span class="line">  N = 0;</span><br><span class="line">  M = sz;</span><br><span class="line">  for(int i = 0; i &lt; M1; ++i) &#123;</span><br><span class="line">    if(keys1[i] != -1) &#123;</span><br><span class="line">      put(keys1[i], vals1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  delete [] keys1;</span><br><span class="line">  delete [] vals1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">Value </span><br><span class="line">LinearProbingHashST&lt;Value&gt;::get(int key)</span><br><span class="line">&#123;</span><br><span class="line">  int i = hash(key);</span><br><span class="line">  for(; keys[i] != -1; i = (i + 1) % M) &#123;</span><br><span class="line">    if(keys[i] == key) &#123;</span><br><span class="line">      return vals[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return Value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">void </span><br><span class="line">LinearProbingHashST&lt;Value&gt;::delet(int key)</span><br><span class="line">&#123;</span><br><span class="line">  if(!contain(key))</span><br><span class="line">    return ;</span><br><span class="line">  int i = hash(key);</span><br><span class="line">  for(; keys[i] != -1; i = (i + 1) % M)</span><br><span class="line">    if(keys[i] == key)</span><br><span class="line">      break;</span><br><span class="line">  keys[i] = -1;</span><br><span class="line">  vals[i] = Value();</span><br><span class="line">  i = (i + 1) % M;</span><br><span class="line">  int k;</span><br><span class="line">  Value v;</span><br><span class="line">  while(keys[i] != -1) &#123;</span><br><span class="line">    k = keys[i];</span><br><span class="line">    v = vals[i];</span><br><span class="line">    N--;</span><br><span class="line">    keys[i] = -1;</span><br><span class="line">    vals[i] = Value();</span><br><span class="line">    put(k, v);</span><br><span class="line">    i = (i + 1) % M; </span><br><span class="line">  &#125;</span><br><span class="line">  N--;</span><br><span class="line">  if(N &gt; 0 &amp;&amp; N == M/8)</span><br><span class="line">    resize(M / 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Value&gt;</span><br><span class="line">bool </span><br><span class="line">LinearProbingHashST&lt;Value&gt;::contain(int key) const</span><br><span class="line">&#123;</span><br><span class="line">  int i = hash(key);</span><br><span class="line">  for(; keys[i] != -1; i = (i + 1) % M) &#123;</span><br><span class="line">    if(keys[i] == key)</span><br><span class="line">      return true;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>98.验证二叉搜索树</title>
      <link href="/2020/01/22/leetcode98/"/>
      <url>/2020/01/22/leetcode98/</url>
      
        <content type="html"><![CDATA[<h4 id="🥧中序遍历"><a href="#🥧中序遍历" class="headerlink" title="🥧中序遍历"></a>🥧中序遍历</h4><p>&emsp;&emsp;二叉搜索树的<strong>中序遍历</strong>得到的是一个递增的序列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isValidBST(TreeNode* root) &#123;</span><br><span class="line">        if(!root)</span><br><span class="line">            return true;</span><br><span class="line">        vector&lt;int&gt; vec;</span><br><span class="line">        helper(root, vec);</span><br><span class="line">        if(vec.size() &lt;  2)</span><br><span class="line">            return true;</span><br><span class="line">        for(int i = 0; i &lt;= vec.size() - 2; ++i) &#123;</span><br><span class="line">            if(vec[i] &gt;= vec[i+1])</span><br><span class="line">                return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    void helper(TreeNode* root, vector&lt;int&gt;&amp; vec) &#123;</span><br><span class="line">        if(!root)</span><br><span class="line">            return ;</span><br><span class="line">        if(root-&gt;left)</span><br><span class="line">            helper(root-&gt;left, vec);</span><br><span class="line">        vec.push_back(root-&gt;val);</span><br><span class="line">        if(root-&gt;right)</span><br><span class="line">            helper(root-&gt;right, vec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>75/75 cases passed (20 ms)<br><br>Your runtime beats 49.34 % of cpp submissions<br><br>Your memory usage beats 5.03 % of cpp submissions (21.3 MB)<br></p></blockquote><h4 id="🥧递归"><a href="#🥧递归" class="headerlink" title="🥧递归"></a>🥧递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isValidBST(TreeNode* root) &#123;</span><br><span class="line">        return check(root,  LONG_MIN, LONG_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">    bool check(TreeNode* root, long low, long high) &#123;</span><br><span class="line">        if(!root)</span><br><span class="line">            return true;</span><br><span class="line">        if(root-&gt;val &lt;= low) return false;</span><br><span class="line">        if(root-&gt;val &gt;= high) return false;</span><br><span class="line"></span><br><span class="line">        if(!check(root-&gt;left, low, root-&gt;val) ||</span><br><span class="line">        !check(root-&gt;right, root-&gt;val, high))</span><br><span class="line">            return false;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>75/75 cases passed (16 ms)<br><br>Your runtime beats 76.98 % of cpp submissions<br><br>Your memory usage beats 5.07 % of cpp submissions (24 MB)<br></p></blockquote><h4 id="中序遍历改良"><a href="#中序遍历改良" class="headerlink" title="中序遍历改良"></a>中序遍历改良</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isValidBST(TreeNode* root) &#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; stk;</span><br><span class="line">        long prev = LONG_MIN;</span><br><span class="line">        while(stk.size() || root) &#123;</span><br><span class="line">            while(root) &#123;</span><br><span class="line">                stk.push(root);</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            auto top = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            if(prev &gt;= top-&gt;val)</span><br><span class="line">                return false;</span><br><span class="line">            prev = top-&gt;val;</span><br><span class="line">            root = top-&gt;right;</span><br><span class="line">        &#125;   </span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>75/75 cases passed (8 ms)<br><br>Your runtime beats 98.79 % of cpp submissions<br><br>Your memory usage beats 5.07 % of cpp submissions (24.1 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>110.平衡二叉树</title>
      <link href="/2020/01/22/leetcode110/"/>
      <url>/2020/01/22/leetcode110/</url>
      
        <content type="html"><![CDATA[<h4 id="🥧递归"><a href="#🥧递归" class="headerlink" title="🥧递归"></a>🥧递归</h4><p>&emsp;&emsp;和一般递归不同的地方在于，不能返回<strong>平衡因子</strong>，必须返回高度，并且设置一个-1的特殊值来作为失败的结果（用来代替bool）。<br>这里不能返回bool类型，因为bool无法传递高度值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isBalanced(TreeNode* root) &#123;</span><br><span class="line">        return helper(root) != -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int helper(TreeNode* h) &#123;</span><br><span class="line">        if(!h)</span><br><span class="line">            return 0;</span><br><span class="line">        int lf = helper(h-&gt;left),</span><br><span class="line">            rf = helper(h-&gt;right);</span><br><span class="line">        if(lf == -1 || rf == -1)</span><br><span class="line">            return -1;</span><br><span class="line">        return abs(rf - lf) &lt;= 1 ? max(lf, rf) + 1: -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>227/227 cases passed (20 ms) <br><br>Your runtime beats 44.47 % of cpp submissions <br><br>Your memory usage beats 9.13 % of cpp submissions (17.6 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>96.不同的二叉搜索树</title>
      <link href="/2020/01/21/leetcode96/"/>
      <url>/2020/01/21/leetcode96/</url>
      
        <content type="html"><![CDATA[<h4 id="🥧动态规划"><a href="#🥧动态规划" class="headerlink" title="🥧动态规划"></a>🥧动态规划</h4><p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numTrees(int n) &#123;</span><br><span class="line">        int tr[n + 1] = &#123;0&#125;;</span><br><span class="line">        tr[0] = 1;</span><br><span class="line">        tr[1] = 1;</span><br><span class="line">        for(int i = 2; i &lt;= n; ++i)</span><br><span class="line">            for(int j = 1; j &lt;= i; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                tr[i] += tr[j - 1] * tr[i - j];</span><br><span class="line">            &#125; </span><br><span class="line">        return tr[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>19/19 cases passed (0 ms) <br><br>Your runtime beats 100 % of cpp submissions <br><br>Your memory usage beats 32.61 % of cpp submissions (8.3 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>95.不同的二叉搜索树 II</title>
      <link href="/2020/01/21/leetcode95/"/>
      <url>/2020/01/21/leetcode95/</url>
      
        <content type="html"><![CDATA[<h4 id="🥧递归"><a href="#🥧递归" class="headerlink" title="🥧递归"></a>🥧递归</h4><p>&emsp;&emsp;写递归最重要的点在于：<br> 不要在乎递归是如何运行的，你要在乎的是，通过设计什么样的递归公式，递归出口，就一定可以通过递归获得最终的值。而不是去考虑递归在计算机中以什么样的形式和流程去执行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;TreeNode*&gt; generateTrees(int n) &#123;</span><br><span class="line">        if(!n)</span><br><span class="line">            return vector&lt;TreeNode*&gt;();</span><br><span class="line">        return helper(1, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;TreeNode*&gt; helper(int start, int end) &#123;</span><br><span class="line">        vector&lt;TreeNode*&gt; ret;</span><br><span class="line">        if(start &gt; end) &#123;</span><br><span class="line">            ret.push_back(nullptr);</span><br><span class="line">            return ret;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = start; i &lt;= end; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            auto leftList = helper(start, i - 1);</span><br><span class="line">            auto rightList = helper(i + 1, end);</span><br><span class="line">            for(auto l : leftList) </span><br><span class="line">                for(auto r: rightList) </span><br><span class="line">                &#123;</span><br><span class="line">                    auto newOne = new TreeNode(i);</span><br><span class="line">                    newOne-&gt;left = l;</span><br><span class="line">                    newOne-&gt;right = r;</span><br><span class="line">                    ret.push_back(newOne);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>9/9 cases passed (12 ms) <br><br>Your runtime beats 99.22 % of cpp submissions <br><br>Your memory usage beats 8.96 % of cpp submissions (17.6 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>315.计算右侧小于当前元素的个数</title>
      <link href="/2020/01/17/leetcode315/"/>
      <url>/2020/01/17/leetcode315/</url>
      
        <content type="html"><![CDATA[<h4 id="😝二叉查找树实现"><a href="#😝二叉查找树实现" class="headerlink" title="😝二叉查找树实现"></a>😝二叉查找树实现</h4><p>&emsp;&emsp;有几个难点</p><ul><li>递归插入的时候要通过一个辅助变量来更新每个节点的值（low_count）</li><li>处理值相同时的情况<br>因为插入是沿着一条路径下去的，所以是<strong>没有办法在插入的时候更新全部节点的</strong>。 <br><br>😳方案一是：选择单独在插入之后再来更新节点。 <br><br>😳方案二是：更新一边的节点，在这个题目中，我们的选择就是只更新左边的节点，这时Node-&gt;low_count代表的就不是全体中比它小的节点数量，而是<strong>当前根节点下比它小的数量</strong>，而向右移动就是切换根节点。<br><br>因为我们是<strong>以根节点标准</strong>开始进行比较，所以我们用辅助变量更新节点是更新不到起点以外的地方的。</li></ul><p>🥦方案二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    struct Node &#123;</span><br><span class="line">        int low_count;  //统计比它小的节点</span><br><span class="line">        int val;</span><br><span class="line">        shared_ptr&lt;Node&gt; left, right;</span><br><span class="line">        Node(int val, int count) : </span><br><span class="line">        low_count(count), val(val), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line">        int compareTo(int k) &#123;</span><br><span class="line">            if(val &lt; k) </span><br><span class="line">                return -1;</span><br><span class="line">            else if (val &gt; k) </span><br><span class="line">                return 1;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    int low_c = 0;</span><br><span class="line">    shared_ptr&lt;Node&gt; insert(shared_ptr&lt;Node&gt; h, int val) &#123;</span><br><span class="line">        if(!h) </span><br><span class="line">            return make_shared&lt;Node&gt;(val ,0);</span><br><span class="line">        int cmp = h-&gt;compareTo(val);</span><br><span class="line">        if(cmp &gt;= 0) &#123;</span><br><span class="line">            h-&gt;low_count += 1;</span><br><span class="line">            h-&gt;left = insert(h-&gt;left, val);</span><br><span class="line">        &#125; </span><br><span class="line">        else if(cmp &lt; 0) &#123;</span><br><span class="line">            low_c += h-&gt;low_count + 1;</span><br><span class="line">            h-&gt;right = insert(h-&gt;right, val);</span><br><span class="line">        &#125; </span><br><span class="line">        return h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt; countSmaller(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;int&gt; counts(nums.size());</span><br><span class="line">        if(!nums.size())</span><br><span class="line">            return counts;</span><br><span class="line">        counts[0] = 0;</span><br><span class="line">        if(nums.size() == 1) &#123;</span><br><span class="line">            return counts;</span><br><span class="line">        &#125;</span><br><span class="line">        shared_ptr&lt;Node&gt; head = make_shared&lt;Node&gt;(nums.back(), 0);</span><br><span class="line">        for(int i = nums.size() - 2; i &gt;=0 ; -- i)&#123;</span><br><span class="line">            low_c = 0;</span><br><span class="line">            head = insert(head, nums[i]);</span><br><span class="line">            counts[i] = low_c;</span><br><span class="line">        &#125;</span><br><span class="line">        return counts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>16/16 cases passed (64 ms) <br><br>Your runtime beats 55.66 % of cpp submissions <br><br>Your memory usage beats 10.86 % of cpp submissions (29.7 MB)<br></p></blockquote><p>🍅方案一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    struct Node &#123;</span><br><span class="line">        int low_count;</span><br><span class="line">        int val;</span><br><span class="line">        shared_ptr&lt;Node&gt; left, right;</span><br><span class="line">        Node(int val, int count) : </span><br><span class="line">        low_count(count), val(val), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line">        int compareTo(int k) &#123;</span><br><span class="line">            if(val &lt; k) </span><br><span class="line">                return -1;</span><br><span class="line">            else if (val &gt; k) </span><br><span class="line">                return 1;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    int Nsize( shared_ptr&lt;Node&gt; h) &#123;</span><br><span class="line">        if(h)</span><br><span class="line">            return h-&gt;low_count;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125; </span><br><span class="line">    shared_ptr&lt;Node&gt; insert(shared_ptr&lt;Node&gt; h, int val) &#123;</span><br><span class="line">        if(!h) </span><br><span class="line">            return make_shared&lt;Node&gt;(val ,0);</span><br><span class="line">        int cmp = h-&gt;compareTo(val);</span><br><span class="line">        if(cmp &gt;= 0) &#123;</span><br><span class="line">            h-&gt;left = insert(h-&gt;left, val);</span><br><span class="line">        &#125; </span><br><span class="line">        else if(cmp &lt; 0) &#123;</span><br><span class="line">            h-&gt;right = insert(h-&gt;right, val);</span><br><span class="line">        &#125; </span><br><span class="line">        return h;</span><br><span class="line">    &#125;</span><br><span class="line">    int g = 0;</span><br><span class="line">    void rank(shared_ptr&lt;Node&gt; h) &#123;</span><br><span class="line">        if(!h)</span><br><span class="line">            return ;</span><br><span class="line">        if(h-&gt;left) </span><br><span class="line">            rank(h-&gt;left);</span><br><span class="line">        h-&gt;low_count = g;</span><br><span class="line">        g += 1;</span><br><span class="line">        if(h-&gt;right)</span><br><span class="line">            rank(h-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int xx(shared_ptr&lt;Node&gt; h,int val) &#123;</span><br><span class="line">        if(!h)</span><br><span class="line">            return 0;</span><br><span class="line">        while(h) &#123;</span><br><span class="line">            int cmp = h-&gt;compareTo(val);</span><br><span class="line">            if(cmp &lt; 0 )</span><br><span class="line">                h = h-&gt;right;</span><br><span class="line">            else if(cmp &gt; 0)</span><br><span class="line">                h = h-&gt;left;</span><br><span class="line">            else if(cmp == 0 &amp;&amp; !h-&gt;left)</span><br><span class="line">                break;</span><br><span class="line">            else </span><br><span class="line">                h = h-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        return h-&gt;low_count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt; countSmaller(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;int&gt; counts(nums.size());</span><br><span class="line">        if(!nums.size())</span><br><span class="line">            return counts;</span><br><span class="line">        counts[0] = 0;</span><br><span class="line">        if(nums.size() == 1) &#123;</span><br><span class="line">            return counts;</span><br><span class="line">        &#125;</span><br><span class="line">        shared_ptr&lt;Node&gt; head = make_shared&lt;Node&gt;(nums.back(), 0);</span><br><span class="line">        for(int i = nums.size() - 2; i &gt;=0 ; -- i)&#123;</span><br><span class="line">            head = insert(head, nums[i]);</span><br><span class="line">            g = 0;</span><br><span class="line">            rank(head);</span><br><span class="line">            counts[i] = xx(head, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return counts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Time Limit Exceeded <br><br>15/16 cases passed (N/A) <br><br>Testcase<br>[5183,2271,3067,539,8939,2999,9264,737,3974,5846,-210,9278,5800,2675,6608,1133,-1,6018,9672,5179,9842,7424,-209,2988,2757,5984,1107,2644,-499,7234,7539,6525,347,5718,-742,1797,5292,976,8752,8297,1312,3385,5924,2882,6091,-282,2595,96,1906,8014,7667,5895,7283,7974,-167,7068,3946,6223,189,1589,2058,9277,-302,8157,8256,5261,8067,1071,9470,2682,8197,5632,753,3179,8187,9042,8167,4657,7080,7801,5627,7917,8085,928,-892,-427,3685,4676,2431,8064,8537,343,505,4352,2108,4399,66,2086,1922,9126,9460,393,443,5689,7595,850,8493,2866,732,3738,7933,3666,2370,5804,4045,7903,8009,5387,5542,7593,6862,1547,6934,-160,9693,4560,7429,9989,7232,-594,587,6476,9277,4471,5979,6268,2419,6706,-727,1927,7361,9684,5519,2703,1723…..</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>449.序列化和反序列化二叉搜索树</title>
      <link href="/2020/01/17/leetcode449/"/>
      <url>/2020/01/17/leetcode449/</url>
      
        <content type="html"><![CDATA[<h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><p>&emsp;&emsp;先序遍历，类似于数组表示二叉树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Codec &#123;</span><br><span class="line">public:</span><br><span class="line">    void se_helper(TreeNode* root, string&amp; str) &#123;</span><br><span class="line">        if(!root) &#123; </span><br><span class="line">            str += &quot;x#&quot;;</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        str += to_string(root-&gt;val) + &apos;#&apos;;</span><br><span class="line">        se_helper(root-&gt;left, str);</span><br><span class="line">        se_helper(root-&gt;right, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Encodes a tree to a single string.</span><br><span class="line">    string serialize(TreeNode* root) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        se_helper(root, s);</span><br><span class="line">        // cout &lt;&lt;s &lt;&lt; endl;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Decodes your encoded data to tree.</span><br><span class="line">    TreeNode* deserialize(string data) &#123;</span><br><span class="line">        if(data == &quot;x#&quot;)</span><br><span class="line">            return nullptr;</span><br><span class="line">        auto iter = data.begin();</span><br><span class="line">        return deserialize1(iter, data.end());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode* deserialize1(string::iterator&amp; iter, string::iterator end) </span><br><span class="line">    &#123;</span><br><span class="line">        if(iter == end) </span><br><span class="line">            return nullptr;</span><br><span class="line">        string s;</span><br><span class="line">        while(*iter != &apos;#&apos;) &#123;</span><br><span class="line">            s += *iter++;</span><br><span class="line">        &#125;    </span><br><span class="line">        ++iter;</span><br><span class="line">        if(s == &quot;x&quot;) </span><br><span class="line">            return nullptr;</span><br><span class="line">        int val = atoi(s.c_str());</span><br><span class="line">        TreeNode* newOne = new TreeNode(val);</span><br><span class="line">        newOne-&gt;left = deserialize1(iter, end);</span><br><span class="line">        newOne-&gt;right = deserialize1(iter, end);</span><br><span class="line">        return newOne;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>62/62 cases passed (32 ms) <br><br>Your runtime beats 87.21 % of cpp submissions <br><br>Your memory usage beats 43.82 % of cpp submissions (24.2 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>538.把二叉搜索树转换为累加树</title>
      <link href="/2020/01/17/leetcode538/"/>
      <url>/2020/01/17/leetcode538/</url>
      
        <content type="html"><![CDATA[<h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int k = 0;</span><br><span class="line">    TreeNode* convertBST(TreeNode* root) &#123;</span><br><span class="line">        if(!root) &#123;</span><br><span class="line">            return nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">        convertBST(root-&gt;right);</span><br><span class="line">        k += root-&gt;val;</span><br><span class="line">        root-&gt;val = k;</span><br><span class="line">        convertBST(root-&gt;left);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>450.删除二叉搜索树中的节点</title>
      <link href="/2020/01/16/leetcode450/"/>
      <url>/2020/01/16/leetcode450/</url>
      
        <content type="html"><![CDATA[<ol><li>如果在根节点，怎么操作？ </li></ol><p>&emsp;&emsp;迭代需要处理根节点的特殊情况，而递归不需要特殊处理。</p><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int compar(int a, int b) &#123;</span><br><span class="line">        if(a &gt; b) return 1;</span><br><span class="line">        else if(b &gt; a) return -1;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* deleteNode(TreeNode* root, int key) &#123;</span><br><span class="line">        if(!root) </span><br><span class="line">            return nullptr;</span><br><span class="line">        int cmp = compar(root-&gt;val, key);</span><br><span class="line">        if(cmp &lt; 0) &#123;</span><br><span class="line">            root-&gt;right = deleteNode(root-&gt;right, key);</span><br><span class="line">        &#125; else if(cmp &gt; 0) &#123;</span><br><span class="line">            root-&gt;left = deleteNode(root-&gt;left, key);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if(!root-&gt;left) return root-&gt;right;</span><br><span class="line">            if(!root-&gt;right) return root-&gt;left;</span><br><span class="line">            auto rm = min(root-&gt;right);</span><br><span class="line">            root-&gt;right = deleteMin(root-&gt;right);</span><br><span class="line">            rm-&gt;left = root-&gt;left;</span><br><span class="line">            rm-&gt;right = root-&gt;right;</span><br><span class="line">            root = rm;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* min(TreeNode* root) &#123;</span><br><span class="line">        if(!root-&gt;left) </span><br><span class="line">            return root;</span><br><span class="line">        return min(root-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* deleteMin(TreeNode* root) &#123;</span><br><span class="line">        if(!root-&gt;left) </span><br><span class="line">            return root-&gt;right;</span><br><span class="line">        root-&gt;left = deleteMin(root-&gt;left);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="迭代实现"><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int compar(int a, int b) &#123;</span><br><span class="line">        if(a &gt; b) return 1;</span><br><span class="line">        else if(b &gt; a) return -1;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* deleteNode(TreeNode* root, int key) &#123;</span><br><span class="line">        if(!root)</span><br><span class="line">            return nullptr;</span><br><span class="line">        TreeNode* node = root, *prev_node = nullptr;</span><br><span class="line">        bool is_left =false;</span><br><span class="line">        while(node) &#123;</span><br><span class="line">            int cmp = compar(node-&gt;val, key);</span><br><span class="line">            if(cmp &gt; 0) &#123;</span><br><span class="line">                prev_node = node;</span><br><span class="line">                node = node-&gt;left;</span><br><span class="line">                is_left = true;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(cmp &lt; 0) &#123;</span><br><span class="line">                prev_node = node;</span><br><span class="line">                node = node-&gt;right;</span><br><span class="line">                is_left = false;</span><br><span class="line">            &#125; else </span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!node &amp;&amp; prev_node)</span><br><span class="line">            return root;</span><br><span class="line">        if(!node-&gt;left &amp;&amp; !node-&gt;right) &#123;</span><br><span class="line">            if(!prev_node) return nullptr;</span><br><span class="line">            if(is_left) prev_node-&gt;left = nullptr;</span><br><span class="line">            else prev_node-&gt;right = nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (node-&gt;left &amp;&amp; !node-&gt;right) &#123;</span><br><span class="line">            if(!prev_node) return node-&gt;left;</span><br><span class="line">            if(is_left) prev_node-&gt;left = node-&gt;left;</span><br><span class="line">            else prev_node-&gt;right = node-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (node-&gt;right &amp;&amp; !node-&gt;left) &#123;</span><br><span class="line">            if(!prev_node) return node-&gt;right;</span><br><span class="line">            if(is_left) prev_node-&gt;left = node-&gt;right;</span><br><span class="line">            else prev_node-&gt;right = node-&gt;right;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int min_val = min(node-&gt;right);</span><br><span class="line">            node-&gt;val = min_val;</span><br><span class="line">            node-&gt;right = deleteMin(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int min(TreeNode* node) &#123;</span><br><span class="line">        while(node-&gt;left) </span><br><span class="line">            node = node-&gt;left;</span><br><span class="line">        return node-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode* deleteMin(TreeNode* node) &#123;</span><br><span class="line">        if(!node-&gt;left)</span><br><span class="line">            return node-&gt;right;</span><br><span class="line">        node-&gt;left = deleteMin(node-&gt;left);</span><br><span class="line">        return node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>85/85 cases passed (24 ms) <br><br>Your runtime beats 90.96 % of cpp submissions <br><br>Your memory usage beats 5.26 % of cpp submissions (17.6 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>108.将有序数组转换为二叉搜索树</title>
      <link href="/2020/01/16/leetcode108/"/>
      <url>/2020/01/16/leetcode108/</url>
      
        <content type="html"><![CDATA[<h4 id="🥛中序构造"><a href="#🥛中序构造" class="headerlink" title="🥛中序构造"></a>🥛中序构造</h4><p>&emsp;&emsp;不用担心mid+1超出范围，因为nums[mid]是存在的，所以在构造r时，nums.begin() + mid + 1极限时就是与nums.end()相等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums)&#123;</span><br><span class="line">        if(!nums.size())</span><br><span class="line">            return nullptr;</span><br><span class="line">        int mid = nums.size() / 2;</span><br><span class="line">        TreeNode* root = new TreeNode(nums[mid]);</span><br><span class="line"></span><br><span class="line">        vector&lt;int&gt; l(nums.begin(), nums.begin() + mid);</span><br><span class="line">        vector&lt;int&gt; r(nums.begin() + mid + 1, nums.end());</span><br><span class="line">        root-&gt;left = sortedArrayToBST(l);</span><br><span class="line">        root-&gt;right =  sortedArrayToBST(r);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在C++中是否有替代INT_MIN这些宏定义的功能？</title>
      <link href="/2020/01/13/problems4/"/>
      <url>/2020/01/13/problems4/</url>
      
        <content type="html"><![CDATA[<p>📣在C++中我们依然可以包含 <cstdint>头文件，然后去使用INT_MIN这些宏定义,但是其实在C++中是存在更加优雅的方式的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;limits&gt;</span><br><span class="line">std::numeric_limits&lt;int&gt;::min() //INT_MIN</span><br><span class="line">std::numeric_limits&lt;int&gt;::max() //INT_MAX</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 遇见的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建数组的共享指针</title>
      <link href="/2020/01/12/problems3/"/>
      <url>/2020/01/12/problems3/</url>
      
        <content type="html"><![CDATA[<p>C++11在shared_ptr是没有shared_ptr&lt;int []&gt;这样的东西的，<br>但是std::unique_ptr&lt;int[]&gt;是有的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::shared_ptr&lt;int[]&gt; a(new int[10]()); // 错误，c++17前不能传递数组类型作为shared_ptr的模板参数</span><br><span class="line">std::unique_ptr&lt;int[]&gt; b(new int[10]()); // ok, unique_ptr对此做了特化</span><br><span class="line"></span><br><span class="line">std::shared_ptr&lt;int&gt; c(new int[10]()); // 错误，可以编译，但会产生未定义行为，请不要这么做</span><br><span class="line">std::shared_ptr&lt;int&gt; sp3(new int[10](), std::default_delete&lt;int[]&gt;()); //正确做法</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 遇见的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典</title>
      <link href="/2020/01/12/alg5/"/>
      <url>/2020/01/12/alg5/</url>
      
        <content type="html"><![CDATA[<h4 id="🥣链表实现"><a href="#🥣链表实现" class="headerlink" title="🥣链表实现"></a>🥣链表实现</h4><p>链表实现插入、查询的时间复杂度都是N，并非一个高效的实现方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 链表实现</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">class SequentialSearchST &#123;</span><br><span class="line">  public:</span><br><span class="line">    struct Node &#123;</span><br><span class="line">      Node(const S&amp; key, const T&amp; val, shared_ptr&lt;Node&gt; next = nullptr)</span><br><span class="line">      :key(key), val(val), next(next) &#123;&#125;</span><br><span class="line">      </span><br><span class="line">      const S key;</span><br><span class="line">      T val;</span><br><span class="line">      shared_ptr&lt;Node&gt; next;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    void show() const; </span><br><span class="line">    void put(S key, T val);</span><br><span class="line">    const T get(const S&amp; key) const;</span><br><span class="line">    bool contain(const S&amp; key) const;</span><br><span class="line">    const vector&lt;S&gt; keys() const;</span><br><span class="line">  private:</span><br><span class="line">    shared_ptr&lt;Node&gt; head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const T SequentialSearchST&lt;S,T&gt;::get(const S&amp; key) const &#123;</span><br><span class="line">  shared_ptr&lt;Node&gt; sk(head);</span><br><span class="line">  while(sk &amp;&amp; sk-&gt;key != key) &#123;</span><br><span class="line">    sk = sk-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  if(!sk) </span><br><span class="line">    return T();</span><br><span class="line">  return sk-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void SequentialSearchST&lt;S,T&gt;::put(S key, T val) &#123;</span><br><span class="line">  shared_ptr&lt;Node&gt; sk(head);</span><br><span class="line">  while(sk &amp;&amp; sk-&gt;key != key) &#123;</span><br><span class="line">    sk = sk-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  if(sk) </span><br><span class="line">    sk-&gt;val = val;</span><br><span class="line">  else &#123;</span><br><span class="line">    shared_ptr&lt;Node&gt; newOne(make_shared&lt;Node&gt;(key, val, head));</span><br><span class="line">    head = newOne;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void SequentialSearchST&lt;S,T&gt;::show() const &#123;</span><br><span class="line">  shared_ptr&lt;Node&gt; sk(head);</span><br><span class="line">  while(sk) &#123;</span><br><span class="line">    cout &lt;&lt; sk-&gt;key &lt;&lt; &quot; &quot; &lt;&lt; sk-&gt;val &lt;&lt; endl;</span><br><span class="line">    sk = sk-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">bool SequentialSearchST&lt;S,T&gt;::contain(const S&amp; key) const &#123;</span><br><span class="line">  shared_ptr&lt;Node&gt; sk(head);</span><br><span class="line">  while(sk &amp;&amp; sk-&gt;key != key) &#123;</span><br><span class="line">    sk = sk-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  if(!sk) </span><br><span class="line">    return false;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const vector&lt;S&gt; SequentialSearchST&lt;S,T&gt;::keys() const &#123;</span><br><span class="line">  vector&lt;S&gt; res;</span><br><span class="line">  shared_ptr&lt;Node&gt; sk(head);</span><br><span class="line">  while(sk) &#123;</span><br><span class="line">    res.push_back(sk-&gt;key);</span><br><span class="line">    sk = sk-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🚆改进1：改用数组实现，二分查找"><a href="#🚆改进1：改用数组实现，二分查找" class="headerlink" title="🚆改进1：改用数组实现，二分查找"></a>🚆改进1：改用数组实现，二分查找</h4><p>查找的时间复杂度降低为lgN，但是因为数组移位的原因，插入的时间复杂度还是N</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;iterator&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数组实现</span><br><span class="line"> **/</span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">class BinarySearchST &#123;</span><br><span class="line">  public:</span><br><span class="line">    BinarySearchST(int size = 10000);</span><br><span class="line">    ~BinarySearchST();</span><br><span class="line">    void put(const S&amp;, const T&amp;);</span><br><span class="line">    const T get(const S&amp;);</span><br><span class="line">    bool contain(const S&amp; key) const;</span><br><span class="line">    const vector&lt;S&gt; keys() const;</span><br><span class="line">    void show() const;</span><br><span class="line">  private:</span><br><span class="line">    const int rank(const S&amp;) const;</span><br><span class="line">    S* _keys;</span><br><span class="line">    T* vals;</span><br><span class="line">    int _capacity;</span><br><span class="line">    int n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">BinarySearchST&lt;S,T&gt;::BinarySearchST(int size) </span><br><span class="line">  : _keys(new S[size]),</span><br><span class="line">  vals(new T[size]),</span><br><span class="line">  _capacity(size),</span><br><span class="line">  n(0)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">BinarySearchST&lt;S,T&gt;::~BinarySearchST()&#123;</span><br><span class="line">  delete []_keys;</span><br><span class="line">  delete []vals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const int BinarySearchST&lt;S,T&gt;::rank(const S&amp; key) const&#123;</span><br><span class="line">  if(n == 0) </span><br><span class="line">    return 0;</span><br><span class="line">  int lo = 0,</span><br><span class="line">    hi = n - 1,</span><br><span class="line">    mid;</span><br><span class="line">  while(lo &lt; hi) &#123;</span><br><span class="line">    mid = lo + (hi - lo) / 2;</span><br><span class="line">    if(_keys[mid] &lt; key) </span><br><span class="line">      lo = mid + 1;</span><br><span class="line">    else </span><br><span class="line">      hi = mid;</span><br><span class="line">  &#125;</span><br><span class="line">  if(_keys[lo] &lt; key)</span><br><span class="line">    return lo + 1;</span><br><span class="line">  else </span><br><span class="line">    return lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void BinarySearchST&lt;S,T&gt;::put(const S&amp; key, const T&amp; val)</span><br><span class="line">&#123;</span><br><span class="line">  int pos = rank(key);</span><br><span class="line">  if(pos &lt; n &amp;&amp; _keys[pos] == key) &#123; </span><br><span class="line">    vals[pos] = val;</span><br><span class="line">    return ;</span><br><span class="line">  &#125;</span><br><span class="line">  //暂时不考虑超出容量的情况</span><br><span class="line">  for(int i = n; i &gt; pos; --i) &#123;</span><br><span class="line">    _keys[i] = _keys[i - 1];</span><br><span class="line">    vals[i] = vals[i - 1];</span><br><span class="line">  &#125;</span><br><span class="line">  _keys[pos] = key;</span><br><span class="line">  vals[pos] = val;</span><br><span class="line">  ++n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const T BinarySearchST&lt;S,T&gt;::get(const S&amp; key) &#123;</span><br><span class="line">  int pos = rank(key);</span><br><span class="line">  if(pos &lt; n &amp;&amp; _keys[pos] == key) &#123; </span><br><span class="line">    return vals[pos];</span><br><span class="line">  &#125;</span><br><span class="line">  return T();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">bool BinarySearchST&lt;S,T&gt;::contain(const S&amp; key) const &#123;</span><br><span class="line">  if(!n) </span><br><span class="line">    return false;</span><br><span class="line">  int pos = rank(key);</span><br><span class="line">  return _keys[pos] == key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const vector&lt;S&gt; BinarySearchST&lt;S,T&gt;::keys() const &#123;</span><br><span class="line">  return vector&lt;S&gt;(_keys, _keys + n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void BinarySearchST&lt;S,T&gt;::show() const &#123;</span><br><span class="line">  for(int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">    cout &lt;&lt; _keys[i] &lt;&lt; &quot; &quot; &lt;&lt; vals[i] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🚆改进2：改用二叉查找树"><a href="#🚆改进2：改用二叉查找树" class="headerlink" title="🚆改进2：改用二叉查找树"></a>🚆改进2：改用二叉查找树</h4><p>查找、修改的平均时间复杂度都是lgN，但是最坏情况两者都退回到N</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;iterator&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 二叉查找树的实现</span><br><span class="line"> **/</span><br><span class="line">#pragma once</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;iterator&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 二叉查找树的实现</span><br><span class="line"> **/</span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">class BST&#123;</span><br><span class="line">  public:</span><br><span class="line">    struct Node &#123;</span><br><span class="line">      const S key;</span><br><span class="line">      T val;</span><br><span class="line">      shared_ptr&lt;Node&gt; left, right;</span><br><span class="line">      int N;</span><br><span class="line">      Node(const S&amp;key, const T&amp; val, int N) :</span><br><span class="line">        key(key), val(val), left(), right(), N(N) &#123;&#125;</span><br><span class="line">      int compareTo(shared_ptr&lt;Node&gt; node) const;</span><br><span class="line">      int compareTo(const S&amp;) const;</span><br><span class="line">      static int Nsize(shared_ptr&lt;Node&gt; x);  </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    const S min() const;</span><br><span class="line">    const S max() const;</span><br><span class="line">    bool contain(const S&amp;) const;</span><br><span class="line">    const T get(const S&amp;) const;</span><br><span class="line">    void put(const S&amp; key, const T&amp; val);</span><br><span class="line">    void show() const; //调试</span><br><span class="line">    const vector&lt;S&gt; keys() const;</span><br><span class="line">    const S floor(const S&amp; key) const;</span><br><span class="line">    const S ceiling(const S&amp;key) const;</span><br><span class="line">    const S select(int x) const;</span><br><span class="line">    const int rank(const T&amp;) const;</span><br><span class="line">    void deleteMin();</span><br><span class="line">    void delet(const T&amp; key);</span><br><span class="line">  private:</span><br><span class="line">    shared_ptr&lt;Node&gt; delet(shared_ptr&lt;Node&gt; nd, const T&amp; key);</span><br><span class="line">    shared_ptr&lt;Node&gt; deleteMin(shared_ptr&lt;Node&gt;);</span><br><span class="line">    const int _rank(shared_ptr&lt;Node&gt; nd, const T&amp; key) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; _select(shared_ptr&lt;Node&gt; nd, int x) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; _floor(shared_ptr&lt;Node&gt; x, const S&amp; key) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; _ceiling(shared_ptr&lt;Node&gt; x, const S&amp;key) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; _min(shared_ptr&lt;Node&gt; x) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; _max(shared_ptr&lt;Node&gt; x) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; _put(shared_ptr&lt;Node&gt; x, const S&amp; key, const T&amp; val);</span><br><span class="line">    const T _get(shared_ptr&lt;Node&gt; x,const S&amp;) const;</span><br><span class="line">    void _show(shared_ptr&lt;Node&gt; x) const;</span><br><span class="line">    void _keys(vector&lt;S&gt;&amp;, shared_ptr&lt;Node&gt; x) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void BST&lt;S,T&gt;::put(const S&amp; key, const T&amp; val) &#123;</span><br><span class="line">  head = _put(head, key, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">shared_ptr&lt;typename BST&lt;S,T&gt;::Node&gt; </span><br><span class="line">BST&lt;S,T&gt;::_put(shared_ptr&lt;Node&gt; x, const S&amp; key, const T&amp; val) </span><br><span class="line">&#123;</span><br><span class="line">  if(!x) </span><br><span class="line">    return make_shared&lt;Node&gt;(key, val, 1);</span><br><span class="line">  int cmp = x-&gt;compareTo(key);</span><br><span class="line">  if(cmp &gt; 0) x-&gt;left = _put(x-&gt;left, key, val); </span><br><span class="line">  else if(cmp &lt; 0) x-&gt;right = _put(x-&gt;right, key, val);</span><br><span class="line">  else x-&gt;val = val;</span><br><span class="line">  x-&gt;N = Node::Nsize(x-&gt;left) + Node::Nsize(x-&gt;right) + 1;</span><br><span class="line">  return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &gt; 1</span><br><span class="line"> * = 0</span><br><span class="line"> * &lt; -1</span><br><span class="line"> **/ </span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">int BST&lt;S,T&gt;::Node::compareTo(shared_ptr&lt;Node&gt; node) const &#123;</span><br><span class="line">  return compareTo(node-&gt;key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">int BST&lt;S,T&gt;::Node::compareTo(const S&amp; key2) const &#123;</span><br><span class="line">  return key &gt; key2 ? 1 : key &lt; key2 ? -1 : 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">int BST&lt;S,T&gt;::Node::Nsize(shared_ptr&lt;Node&gt; x) &#123;</span><br><span class="line">  if(!x) </span><br><span class="line">    return 0;</span><br><span class="line">  else </span><br><span class="line">    return x-&gt;N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const T BST&lt;S,T&gt;::get(const S&amp; key) const &#123;</span><br><span class="line">  return _get(head, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const T BST&lt;S,T&gt;::_get(shared_ptr&lt;Node&gt; x,const S&amp; key) const &#123;</span><br><span class="line">  if(!x) </span><br><span class="line">    return T();</span><br><span class="line">  int cmp = x-&gt;compareTo(key);</span><br><span class="line">  if(cmp &gt; 0) return _get(x-&gt;right, key);</span><br><span class="line">  else if(cmp &lt; 0) return _get(x-&gt;left, key);</span><br><span class="line">  else return x-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">bool BST&lt;S,T&gt;::contain(const S&amp; key) const &#123;</span><br><span class="line">  return get(key) != T();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void BST&lt;S,T&gt;::show() const &#123;</span><br><span class="line">  _show(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void BST&lt;S,T&gt;::_show(shared_ptr&lt;Node&gt; x) const &#123;</span><br><span class="line">  if(!x) </span><br><span class="line">    return ;</span><br><span class="line">  if(x-&gt;left) </span><br><span class="line">    _show(x-&gt;left);</span><br><span class="line">  cout &lt;&lt; x-&gt;key &lt;&lt; &quot; &quot; &lt;&lt; x-&gt;val &lt;&lt; endl;</span><br><span class="line">  if(x-&gt;right)</span><br><span class="line">    _show(x-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const vector&lt;S&gt; BST&lt;S,T&gt;::keys() const &#123;</span><br><span class="line">  vector&lt;S&gt; res;</span><br><span class="line">  _keys(res, head);</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void BST&lt;S,T&gt;::_keys(vector&lt;S&gt;&amp; res, shared_ptr&lt;Node&gt; x) const &#123;</span><br><span class="line">  if(!x) </span><br><span class="line">    return ;</span><br><span class="line">  res.push_back(x-&gt;key);</span><br><span class="line">  _keys(res,x-&gt;left);</span><br><span class="line">  _keys(res, x-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const S BST&lt;S,T&gt;::min() const &#123;</span><br><span class="line">  if(!head) </span><br><span class="line">    return S();</span><br><span class="line">  return _min(head)-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">shared_ptr&lt;typename BST&lt;S,T&gt;::Node&gt; </span><br><span class="line">BST&lt;S,T&gt;::_min(shared_ptr&lt;Node&gt; x) const </span><br><span class="line">&#123;</span><br><span class="line">  if(!x || !x-&gt;left)</span><br><span class="line">    return x;</span><br><span class="line">  else</span><br><span class="line">    return _min(x-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const S BST&lt;S,T&gt;::max() const &#123;</span><br><span class="line">  if(!head) </span><br><span class="line">    return S();</span><br><span class="line">  return _max(head)-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">shared_ptr&lt;typename BST&lt;S,T&gt;::Node&gt; </span><br><span class="line">BST&lt;S,T&gt;::_max(shared_ptr&lt;Node&gt; x) const </span><br><span class="line">&#123;</span><br><span class="line">  if(!x || !x-&gt;right)</span><br><span class="line">    return x;</span><br><span class="line">  else</span><br><span class="line">    return _max(x-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const S BST&lt;S,T&gt;::floor(const S&amp; key) const &#123;</span><br><span class="line">  shared_ptr&lt;Node&gt; nd = _floor(head, key);</span><br><span class="line">  if(!nd) return S();</span><br><span class="line">  return nd-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const S BST&lt;S,T&gt;::ceiling(const S&amp;key) const &#123;</span><br><span class="line">  shared_ptr&lt;Node&gt; nd = _ceiling(head, key);</span><br><span class="line">  if(!nd) return S();</span><br><span class="line">  return nd-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">shared_ptr&lt;typename BST&lt;S,T&gt;::Node&gt; </span><br><span class="line">BST&lt;S,T&gt;::_floor(shared_ptr&lt;Node&gt; x, const S&amp; key) const </span><br><span class="line">&#123;</span><br><span class="line">  if(!x) return x;</span><br><span class="line">  int cmp = x-&gt;compareTo(key);</span><br><span class="line">  if(cmp == 0) return x;</span><br><span class="line">  else if (cmp &gt; 0) return _floor(x-&gt;left, key);</span><br><span class="line">  shared_ptr&lt;Node&gt; y = _floor(x-&gt;right, key);</span><br><span class="line">  if(!y) return x;</span><br><span class="line">  return y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">shared_ptr&lt;typename BST&lt;S,T&gt;::Node&gt; </span><br><span class="line">BST&lt;S,T&gt;::_ceiling(shared_ptr&lt;Node&gt; x, const S&amp;key) const </span><br><span class="line">&#123;</span><br><span class="line">  if(!x) return x;</span><br><span class="line">  int cmp = x-&gt;compareTo(key);</span><br><span class="line">  if(!cmp) return x;</span><br><span class="line">  else if(cmp &lt; 0) return _ceiling(x-&gt;right, key);</span><br><span class="line">  shared_ptr&lt;Node&gt; y = _ceiling(x-&gt;left, key);</span><br><span class="line">  if(!y) return x;</span><br><span class="line">  return y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const S BST&lt;S,T&gt;::select(int x) const &#123;</span><br><span class="line">  if(x &lt; 0 || x &gt;= head-&gt;N)</span><br><span class="line">    return S();</span><br><span class="line">  auto nd =  _select(head, x);</span><br><span class="line">  if(!nd) </span><br><span class="line">    return S();</span><br><span class="line">  return nd-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">shared_ptr&lt;typename BST&lt;S,T&gt;::Node&gt; </span><br><span class="line">BST&lt;S,T&gt;::_select(shared_ptr&lt;Node&gt; nd, int x) const </span><br><span class="line">&#123;</span><br><span class="line">  if(!nd) </span><br><span class="line">    return nd;</span><br><span class="line">  int nd_rank = Node::Nsize(nd-&gt;left);</span><br><span class="line">  if(nd_rank &gt; x) </span><br><span class="line">    return _select(nd-&gt;left, x);</span><br><span class="line">  else if (nd_rank &lt; x)</span><br><span class="line">    return _select(nd-&gt;right, x - nd_rank - 1);</span><br><span class="line">  return nd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const int BST&lt;S,T&gt;::rank(const T&amp; key) const &#123;</span><br><span class="line">  int rk = _rank(head, key);</span><br><span class="line">  // if(select(rk) != key)</span><br><span class="line">  //   return -1;</span><br><span class="line">  return rk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">const int BST&lt;S,T&gt;::_rank(shared_ptr&lt;Node&gt; nd, const T&amp; key) const </span><br><span class="line">&#123;</span><br><span class="line">  if(!nd) return 0;</span><br><span class="line">  int nd_rank = Node::Nsize(nd-&gt;left);</span><br><span class="line">  if(nd-&gt;key &lt; key) </span><br><span class="line">    return nd_rank + 1 + _rank(nd-&gt;right, key);</span><br><span class="line">  else if(nd-&gt;key &gt; key) </span><br><span class="line">    return _rank(nd-&gt;left, key);</span><br><span class="line">  return nd_rank;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 这个函数只能删除根节点左边的</span><br><span class="line"> **/ </span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void BST&lt;S,T&gt;::deleteMin() &#123;</span><br><span class="line">  deleteMin(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">shared_ptr&lt;typename BST&lt;S,T&gt;::Node&gt; </span><br><span class="line">BST&lt;S,T&gt;::deleteMin(shared_ptr&lt;Node&gt; x) </span><br><span class="line">&#123;</span><br><span class="line">  if(!x-&gt;left)</span><br><span class="line">    return x-&gt;right;</span><br><span class="line">  x-&gt;left = deleteMin(x-&gt;left);</span><br><span class="line">  x-&gt;N = Node::Nsize(x-&gt;left) + Node::Nsize(x-&gt;right) + 1;</span><br><span class="line">  return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">void BST&lt;S,T&gt;::delet(const T&amp; key) &#123;</span><br><span class="line">  head = delet(head, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename S, typename T&gt;</span><br><span class="line">shared_ptr&lt;typename BST&lt;S,T&gt;::Node&gt; </span><br><span class="line">BST&lt;S,T&gt;::delet(shared_ptr&lt;Node&gt; nd, const T&amp; key)</span><br><span class="line">&#123;</span><br><span class="line">  if(!nd) &#123;</span><br><span class="line">    return nd;</span><br><span class="line">  &#125;</span><br><span class="line">  int cmp = nd-&gt;compareTo(key);</span><br><span class="line">  if(cmp &lt; 0) </span><br><span class="line">  &#123;</span><br><span class="line">    nd-&gt;right = delet(nd-&gt;right, key);</span><br><span class="line">  &#125; else if(cmp &gt; 0) &#123;</span><br><span class="line">    nd -&gt;left = delet(nd-&gt;left, key);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    if(!nd-&gt;left) return nd-&gt;right;</span><br><span class="line">    if(!nd-&gt;right) return nd-&gt;left;</span><br><span class="line">    auto minO = _min(nd-&gt;right);</span><br><span class="line">    minO-&gt;right = deleteMin(nd-&gt;right);</span><br><span class="line">    minO-&gt;left = nd-&gt;left;</span><br><span class="line">    nd = minO;</span><br><span class="line">  &#125;</span><br><span class="line">  nd-&gt;N = Node::Nsize(nd-&gt;left) + Node::Nsize(nd-&gt;right) + 1;</span><br><span class="line">  return nd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🚆改进3：红黑树"><a href="#🚆改进3：红黑树" class="headerlink" title="🚆改进3：红黑树"></a>🚆改进3：红黑树</h4><p>查找、插入的时间复杂度恒定为logN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @Author: XiaoGongBai </span><br><span class="line"> * @Date: 2020-01-19 10:21:20 </span><br><span class="line"> * @Last Modified by: XiaoGongBai</span><br><span class="line"> * @Last Modified time: 2020-01-19 11:31:04</span><br><span class="line"> */</span><br><span class="line">#pragma once</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;iterator&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 红黑树</span><br><span class="line"> **/</span><br><span class="line">enum class Color&#123;</span><br><span class="line">  Red ,</span><br><span class="line">  Black </span><br><span class="line">&#125;;</span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">class RedBlackBST&#123;</span><br><span class="line">  public:</span><br><span class="line">    struct Node&#123;</span><br><span class="line">      Key key;</span><br><span class="line">      Val val;</span><br><span class="line">      shared_ptr&lt;Node&gt; left,right;</span><br><span class="line">      int N;</span><br><span class="line">      Color color;</span><br><span class="line">      Node(const Key&amp; key, const Val&amp; val, int N, Color color)</span><br><span class="line">        :key(key), val(val), left(), right(), N(N), color(color) &#123;&#125;</span><br><span class="line">      static int Nsize(shared_ptr&lt;Node&gt; x);  </span><br><span class="line">      int compareTo(const Key&amp; key) const;</span><br><span class="line">    &#125;;</span><br><span class="line">    void put(const Key&amp; key, const Val&amp; val);</span><br><span class="line">    shared_ptr&lt;Node&gt; get(const Key&amp; key) const;</span><br><span class="line">    void deleteMin();</span><br><span class="line">    void deleteMax();</span><br><span class="line">    void delet(const Key&amp;);</span><br><span class="line">    Key min() const;</span><br><span class="line">    Key max() const;</span><br><span class="line">    vector&lt;Key&gt; keys(const Key&amp; m, const Key&amp; e) const;</span><br><span class="line">    vector&lt;Key&gt; keys() const;</span><br><span class="line"></span><br><span class="line">    const int size() const &#123;return root ? root-&gt;N : 0;&#125;</span><br><span class="line">  private:</span><br><span class="line">    </span><br><span class="line">    shared_ptr&lt;Node&gt; root;</span><br><span class="line"></span><br><span class="line">    void keys(shared_ptr&lt;Node&gt; h, vector&lt;Key&gt;&amp; res, const Key&amp; m, const Key&amp; e) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; max(shared_ptr&lt;Node&gt; h) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; min(shared_ptr&lt;Node&gt;) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; get(shared_ptr&lt;Node&gt; h,const Key&amp; key) const;</span><br><span class="line">    shared_ptr&lt;Node&gt; delet(shared_ptr&lt;Node&gt;, const Key&amp;);</span><br><span class="line">    shared_ptr&lt;Node&gt; balance(shared_ptr&lt;Node&gt;);</span><br><span class="line">    shared_ptr&lt;Node&gt; removeRedLeft(shared_ptr&lt;Node&gt;);</span><br><span class="line">    shared_ptr&lt;Node&gt; removeRedRight(shared_ptr&lt;Node&gt;);</span><br><span class="line">    shared_ptr&lt;Node&gt; deleteMax(shared_ptr&lt;Node&gt;);</span><br><span class="line">    shared_ptr&lt;Node&gt; deleteMin(shared_ptr&lt;Node&gt;);</span><br><span class="line">    shared_ptr&lt;Node&gt; put(shared_ptr&lt;Node&gt; h, const Key&amp; key, const Val&amp; val);</span><br><span class="line">    void flipColor(shared_ptr&lt;Node&gt; h);</span><br><span class="line">    shared_ptr&lt;Node&gt; rotateLeft(shared_ptr&lt;Node&gt; node);</span><br><span class="line">    shared_ptr&lt;Node&gt; rotateRight(shared_ptr&lt;Node&gt; h);</span><br><span class="line">    bool isRed(shared_ptr&lt;Node&gt; node)  const;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">int </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::Node::Nsize(shared_ptr&lt;Node&gt; x)</span><br><span class="line">&#123;</span><br><span class="line">  return x ? x-&gt;N : 0;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">int </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::Node::compareTo(const Key&amp; key) const</span><br><span class="line">&#123;</span><br><span class="line">  if(key &gt; this-&gt;key) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125;  else if(key &lt; this-&gt;key) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::rotateLeft(shared_ptr&lt;Node&gt; h)</span><br><span class="line">&#123;</span><br><span class="line">  if(!h) </span><br><span class="line">    return nullptr;</span><br><span class="line">  auto rh = h-&gt;right;</span><br><span class="line">  if(!rh)</span><br><span class="line">    return h;</span><br><span class="line">  h-&gt;right = rh-&gt;left;</span><br><span class="line">  rh-&gt;left = h;</span><br><span class="line">  rh-&gt;N = h-&gt;N;</span><br><span class="line">  h-&gt;N = Node::Nsize(h-&gt;left) + Node::Nsize(h-&gt;right) + 1;</span><br><span class="line">  swap(h-&gt;color, rh-&gt;color);</span><br><span class="line">  return rh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::rotateRight(shared_ptr&lt;Node&gt; h)</span><br><span class="line">&#123;</span><br><span class="line">  if(!h) &#123;</span><br><span class="line">    return nullptr;</span><br><span class="line">  &#125;</span><br><span class="line">  auto lh = h-&gt;left;</span><br><span class="line">  if(!lh)</span><br><span class="line">    return h;</span><br><span class="line">  h-&gt;left = lh-&gt;right;;</span><br><span class="line">  lh-&gt;right = h;</span><br><span class="line">  lh-&gt;N = h-&gt;N;</span><br><span class="line">  h-&gt;N = Node::Nsize(h-&gt;left) + Node::Nsize(h-&gt;right) + 1;</span><br><span class="line">  swap(h-&gt;color, lh-&gt;color);</span><br><span class="line">  return lh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">bool </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::isRed(shared_ptr&lt;Node&gt; h)  const</span><br><span class="line">&#123;</span><br><span class="line">  if(!h || h-&gt;color == Color::Black)</span><br><span class="line">    return false;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">void </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::put(const Key&amp; key, const Val&amp; val)</span><br><span class="line">&#123;</span><br><span class="line">  root = put(root, key, val);</span><br><span class="line">  root-&gt;color = Color::Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::put(shared_ptr&lt;Node&gt; h, const Key&amp; key, const Val&amp; val)</span><br><span class="line">&#123;</span><br><span class="line">  if(!h)</span><br><span class="line">    return make_shared&lt;Node&gt;(key, val, 1, Color::Red);</span><br><span class="line">  int cmp = h-&gt;compareTo(key);</span><br><span class="line">  if(cmp &lt; 0) &#123;</span><br><span class="line">    h-&gt;right = put(h-&gt;right, key, val);</span><br><span class="line">  &#125; else if (cmp &gt; 0) &#123;</span><br><span class="line">    h-&gt;left = put(h-&gt;left, key, val);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    h-&gt;val =val;</span><br><span class="line">  &#125;</span><br><span class="line">  if(!isRed(h-&gt;left) &amp;&amp; isRed(h-&gt;right))</span><br><span class="line">    h = rotateLeft(h);</span><br><span class="line">  if(isRed(h-&gt;left) &amp;&amp; isRed(h-&gt;left-&gt;left))</span><br><span class="line">    h = rotateRight(h);</span><br><span class="line">  if(isRed(h-&gt;left) &amp;&amp; isRed(h-&gt;right)) &#123;</span><br><span class="line">    flipColor(h);</span><br><span class="line">  &#125;</span><br><span class="line">  h-&gt;N = Node::Nsize(h-&gt;left) + Node::Nsize(h-&gt;right) + 1;</span><br><span class="line">  return h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">void </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::flipColor(shared_ptr&lt;Node&gt; h)</span><br><span class="line">&#123;</span><br><span class="line">  h-&gt;color = h-&gt;color == Color::Black ? Color::Red : Color::Black;</span><br><span class="line">  h-&gt;right-&gt;color = h-&gt;right-&gt;color == Color::Black ? Color::Red : Color::Black;</span><br><span class="line">  h-&gt;left-&gt;color = h-&gt;left-&gt;color == Color::Black ? Color::Red : Color::Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::get(const Key&amp; key) const</span><br><span class="line">&#123;</span><br><span class="line">  return get(root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::get(shared_ptr&lt;Node&gt; h,const Key&amp; key) const</span><br><span class="line">&#123;</span><br><span class="line">  if(!h)</span><br><span class="line">    return nullptr;</span><br><span class="line">  int cmp = h-&gt;compareTo(key);</span><br><span class="line">  if(cmp &gt; 0) &#123;</span><br><span class="line">    return get(h-&gt;left, key);</span><br><span class="line">  &#125; else if (cmp &lt; 0) &#123;</span><br><span class="line">    return get(h-&gt;right, key);</span><br><span class="line">  &#125; else </span><br><span class="line">    return h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">void RedBlackBST&lt;Key,Val&gt;::deleteMin()</span><br><span class="line">&#123;</span><br><span class="line">  if(!isRed(root-&gt;left) &amp;&amp; !isRed(root-&gt;right))</span><br><span class="line">    root-&gt;color = Color::Red;</span><br><span class="line">  root = deleteMin(root);</span><br><span class="line">  if(root)</span><br><span class="line">    root-&gt;color = Color::Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::deleteMin(shared_ptr&lt;Node&gt; h) </span><br><span class="line">&#123;</span><br><span class="line">  if(!h-&gt;left) </span><br><span class="line">    return h-&gt;right;</span><br><span class="line">  if(!isRed(h-&gt;left) &amp;&amp; !isRed(h-&gt;left-&gt;left))</span><br><span class="line">  &#123;</span><br><span class="line">    h = removeRedLeft(h);</span><br><span class="line">  &#125;</span><br><span class="line">  h-&gt;left = deleteMin(h-&gt;left);</span><br><span class="line">  h-&gt;N = Node::Nsize(h-&gt;left) + Node::Nsize(h-&gt;right) + 1;</span><br><span class="line">  return balance(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::removeRedLeft(shared_ptr&lt;Node&gt; h) </span><br><span class="line">&#123;</span><br><span class="line">  flipColor(h);</span><br><span class="line">  if(isRed(h-&gt;right) &amp;&amp; isRed(h-&gt;right-&gt;left)) </span><br><span class="line">  &#123;</span><br><span class="line">    h-&gt;right = rotateRight(h-&gt;right);</span><br><span class="line">    h = rotateLeft(h);</span><br><span class="line">    flipColor(h);</span><br><span class="line">  &#125;</span><br><span class="line">  return h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::balance(shared_ptr&lt;Node&gt; h)</span><br><span class="line">&#123;</span><br><span class="line">  if(!isRed(h-&gt;left) &amp;&amp; isRed(h-&gt;right))</span><br><span class="line">    h = rotateLeft(h);</span><br><span class="line">  if(isRed(h-&gt;left) &amp;&amp; isRed(h-&gt;left-&gt;left))</span><br><span class="line">    h = rotateRight(h);</span><br><span class="line">  if(isRed(h-&gt;left) &amp;&amp; isRed(h-&gt;right)) &#123;</span><br><span class="line">    flipColor(h);</span><br><span class="line">  &#125;</span><br><span class="line">  return h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">Key</span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::min() const</span><br><span class="line">&#123;</span><br><span class="line">  if(!root)</span><br><span class="line">    return Val();</span><br><span class="line">  return min(root)-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::min(shared_ptr&lt;Node&gt; h) const </span><br><span class="line">&#123;</span><br><span class="line">  if(!h-&gt;left)</span><br><span class="line">    return h;</span><br><span class="line">  return min(h-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">Key </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::max() const</span><br><span class="line">&#123;</span><br><span class="line">  if(!root) </span><br><span class="line">    return Val();</span><br><span class="line">  return max(root)-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::max(shared_ptr&lt;Node&gt; h) const</span><br><span class="line">&#123;</span><br><span class="line">  if(!h-&gt;right)</span><br><span class="line">    return h;</span><br><span class="line">  return max(h-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">void RedBlackBST&lt;Key,Val&gt;::deleteMax()</span><br><span class="line">&#123;</span><br><span class="line">  if(!isRed(root-&gt;left) &amp;&amp; !isRed(root-&gt;right))</span><br><span class="line">    root-&gt;color = Color::Red;</span><br><span class="line">  root = deleteMax(root);</span><br><span class="line">  if(root)</span><br><span class="line">    root-&gt;color = Color::Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::deleteMax(shared_ptr&lt;Node&gt; h)</span><br><span class="line">&#123;</span><br><span class="line">  if(isRed(h-&gt;left))</span><br><span class="line">    h = rotateRight(h);</span><br><span class="line">  if(!h-&gt;right)</span><br><span class="line">    return h-&gt;left;</span><br><span class="line">  if(!isRed(h-&gt;right) &amp;&amp; !isRed(h-&gt;right-&gt;left))</span><br><span class="line">    h = removeRedRight(h);</span><br><span class="line">  h-&gt;right = deleteMax(h-&gt;right);</span><br><span class="line">  h-&gt;N = Node::Nsize(h-&gt;left) + Node::Nsize(h-&gt;right) + 1;</span><br><span class="line">  return balance(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::removeRedRight(shared_ptr&lt;Node&gt; h)</span><br><span class="line">&#123;</span><br><span class="line">  flipColor(h);</span><br><span class="line">  if(isRed(h-&gt;left-&gt;left)) &#123;</span><br><span class="line">    h = rotateRight(h);</span><br><span class="line">    flipColor(h);</span><br><span class="line">  &#125;</span><br><span class="line">  return h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">void RedBlackBST&lt;Key,Val&gt;::delet(const Key&amp; key)</span><br><span class="line">&#123;</span><br><span class="line">  if(!isRed(root-&gt;left) &amp;&amp; !isRed(root-&gt;right))</span><br><span class="line">    root-&gt;color = Color::Red;</span><br><span class="line">  root = delet(root, key);</span><br><span class="line">  if(root)</span><br><span class="line">    root-&gt;color = Color::Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">shared_ptr&lt;typename RedBlackBST&lt;Key,Val&gt;::Node&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::delet(shared_ptr&lt;Node&gt; h, const Key&amp; key) </span><br><span class="line">&#123;</span><br><span class="line">  int cmp = h-&gt;compareTo(key);</span><br><span class="line">  if(cmp &gt; 0) &#123;</span><br><span class="line">    if(!isRed(h-&gt;left) &amp;&amp; !isRed(h-&gt;left-&gt;left)) </span><br><span class="line">      h = removeRedLeft(h);</span><br><span class="line">    h-&gt;left = delet(h-&gt;left, key);</span><br><span class="line">  &#125; else if(cmp &lt; 0)&#123;</span><br><span class="line">    if(isRed(h-&gt;left))</span><br><span class="line">      h = rotateRight(h);</span><br><span class="line">    if(!isRed(h-&gt;right) &amp;&amp; !isRed(h-&gt;right-&gt;left)) &#123;</span><br><span class="line">      h = removeRedRight(h);</span><br><span class="line">    &#125;</span><br><span class="line">    h-&gt;right = delet(h-&gt;right, key);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    if(!h-&gt;right)</span><br><span class="line">      return h-&gt;left;</span><br><span class="line">    h-&gt;val = get(h-&gt;right, min(h-&gt;right)-&gt;key)-&gt;val;</span><br><span class="line">    h-&gt;key = min(h-&gt;right)-&gt;key;</span><br><span class="line">    h-&gt;right = deleteMin(h-&gt;right);</span><br><span class="line">  &#125;</span><br><span class="line">  h-&gt;N = Node::Nsize(h-&gt;left) + Node::Nsize(h-&gt;right) + 1;</span><br><span class="line">  return balance(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">vector&lt;Key&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::keys(const Key&amp; m, const Key&amp; e) const</span><br><span class="line">&#123;</span><br><span class="line">  vector&lt;Key&gt; res;</span><br><span class="line">  keys(root, res, m, e);</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">void </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::keys(shared_ptr&lt;Node&gt; h, vector&lt;Key&gt;&amp; res, const Key&amp; m, const Key&amp; e) const</span><br><span class="line">&#123;</span><br><span class="line">  if(!h)</span><br><span class="line">    return ;</span><br><span class="line">  int cmp1 = h-&gt;compareTo(m),</span><br><span class="line">    cmp2 = h-&gt;compareTo(e);</span><br><span class="line">  if(cmp1 &gt;= 0 &amp;&amp; cmp2 &lt;= 0) &#123;</span><br><span class="line">    res.push_back(h-&gt;key);</span><br><span class="line">  &#125;</span><br><span class="line">  if(cmp1 &gt; 0) &#123;</span><br><span class="line">    keys(h-&gt;left, res, m, e);</span><br><span class="line">  &#125; </span><br><span class="line">  if(cmp2 &lt; 0) &#123;</span><br><span class="line">    keys(h-&gt;right, res, m, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename Key, typename Val&gt;</span><br><span class="line">vector&lt;Key&gt; </span><br><span class="line">RedBlackBST&lt;Key,Val&gt;::keys() const</span><br><span class="line">&#123;</span><br><span class="line">  return keys(min(), max());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>179.最大数</title>
      <link href="/2020/01/11/leetcode179/"/>
      <url>/2020/01/11/leetcode179/</url>
      
        <content type="html"><![CDATA[<h4 id="🥩堆排序"><a href="#🥩堆排序" class="headerlink" title="🥩堆排序"></a>🥩堆排序</h4><p>&emsp;&emsp;堆排序，然后将数字拼接成字符串，但是两个数字之间的比较并不能直接用&gt;&lt;来进行。我的方法是定义compare函数，进行比较。compare比较两个数的方法是：比如121，12，那么就比较121|12和12|121的大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string largestNumber(vector&lt;int&gt;&amp; a) &#123;</span><br><span class="line">        if(!a.size())</span><br><span class="line">          return &quot;&quot;;</span><br><span class="line">        string s;</span><br><span class="line"></span><br><span class="line">        //堆排序</span><br><span class="line">        a.insert(a.begin(), -1);</span><br><span class="line">        int n = a.size() - 1;</span><br><span class="line">        for(int i = 2; i &lt;= n; ++i) &#123;</span><br><span class="line">          swim(a, i, n);</span><br><span class="line">        &#125;</span><br><span class="line">        // for(auto x : a) &#123;</span><br><span class="line">        //   cout &lt;&lt; x &lt;&lt; &quot; &quot;;</span><br><span class="line">        // &#125;</span><br><span class="line">        // cout &lt;&lt; endl;</span><br><span class="line">        while(n &gt; 1) &#123;</span><br><span class="line">          swap(a[1], a[n--]);</span><br><span class="line">          sink(a, 1, n);</span><br><span class="line">        &#125;</span><br><span class="line">        // for(auto x : a) &#123;</span><br><span class="line">        //   cout &lt;&lt; x &lt;&lt; &quot; &quot;;</span><br><span class="line">        // &#125;</span><br><span class="line">        for(int i = 1; i &lt; a.size(); ++i) </span><br><span class="line">          s += to_string(a[i]);</span><br><span class="line">        int ct = 0;</span><br><span class="line">        for(int i = 0; i &lt; s.size() &amp;&amp; s[i] == &apos;0&apos;; ++i) &#123;</span><br><span class="line">          ++ct;</span><br><span class="line">        &#125;</span><br><span class="line">        if(ct == s.size()) return &quot;0&quot;;</span><br><span class="line">        return s.substr(ct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void swim(vector&lt;int&gt;&amp; a, int k, int n) &#123;</span><br><span class="line">      cout &lt;&lt; &quot;swim&quot; &lt;&lt; endl;</span><br><span class="line">      int j;</span><br><span class="line">      while(k &gt; 1) &#123;</span><br><span class="line">        j = k /2;</span><br><span class="line">        if(j &gt;= 1 &amp;&amp; compare(a[j],a[k]) != 1) break;</span><br><span class="line">        swap(a[j], a[k]);</span><br><span class="line">        k = j;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void sink(vector&lt;int&gt;&amp; a, int k, int n) &#123;</span><br><span class="line">      int j ;</span><br><span class="line">      while(k &lt;= n / 2) &#123;</span><br><span class="line">        j = 2 * k;</span><br><span class="line">        if(j + 1 &lt;= n &amp;&amp; compare(a[j + 1], a[j]) == -1) ++j;</span><br><span class="line">        if(compare(a[j], a[k]) != -1) break;</span><br><span class="line">        swap(a[j], a[k]);</span><br><span class="line">        k = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int compare(int i, int j) &#123;</span><br><span class="line">      if(i == j) </span><br><span class="line">        return 0;</span><br><span class="line">      int com = 0, ix = 0, jx = 0, ii = i, jj = j;</span><br><span class="line">      while(ii / 10 &gt; 0) &#123;</span><br><span class="line">        ix++;</span><br><span class="line">        ii /=  10;</span><br><span class="line">      &#125;</span><br><span class="line">      while(jj / 10 &gt; 0) &#123;</span><br><span class="line">        jx++;</span><br><span class="line">        jj /= 10;</span><br><span class="line">      &#125;</span><br><span class="line">      long long ir ,jr;</span><br><span class="line">      jr = j * pow(10, ix + 1) + i;</span><br><span class="line">      ir = i * pow(10, jx + 1) + j;</span><br><span class="line">      // cout &lt;&lt; &quot;i, j: &quot; &lt;&lt; ir &lt;&lt; &quot; &quot; &lt;&lt; jr &lt;&lt; endl;</span><br><span class="line">      if(ir &gt; jr) return 1;</span><br><span class="line">      else if(jr &gt; ir) return -1;</span><br><span class="line">      else return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>222/222 cases passed (8 ms) <br><br>Your runtime beats 91.43 % of cpp submissions <br><br>Your memory usage beats 79.45 % of cpp submissions (9.1 MB) <br></p></blockquote><h4 id="🈶改进"><a href="#🈶改进" class="headerlink" title="🈶改进"></a>🈶改进</h4><p>&emsp;&emsp;相比与我将两个数拼在一起比较，更加好的方法是<strong>转化为字符串比较</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string largestNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        if (all_of(nums.begin(), nums.end(), [](int x) &#123; return x == 0; &#125;)) &#123;</span><br><span class="line">            return string(&quot;0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;string&gt; strNums(nums.size());</span><br><span class="line">        std::transform(nums.begin(), nums.end(), strNums.begin(), [](int x) &#123;</span><br><span class="line">            return std::to_string(x);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        std::sort(strNums.begin(), strNums.end(), [](const string&amp; x, const string&amp; y) &#123;</span><br><span class="line">            /* x为后面元素，y为前面元素，return true则将x移动到前面 */</span><br><span class="line">            return x + y &gt; y + x;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        return std::accumulate(strNums.begin(), strNums.end(), string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>147.对链表进行插入排序</title>
      <link href="/2020/01/11/leetcode147/"/>
      <url>/2020/01/11/leetcode147/</url>
      
        <content type="html"><![CDATA[<h4 id="🥧模仿数组的实现"><a href="#🥧模仿数组的实现" class="headerlink" title="🥧模仿数组的实现"></a>🥧模仿数组的实现</h4><p>&emsp;&emsp;注意pre指针的调整，在内循环改变一个节点ptr的位置后，外层循环的ptr的下一个循环就不是ptr-&gt;next了，而是pre-&gt;next</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* insertionSortList(ListNode* head) &#123;</span><br><span class="line">        if(!head || !head-&gt;next) </span><br><span class="line">            return head;</span><br><span class="line">        ListNode* ptr = head-&gt;next, *nex, *pre = head,*ptr2, *pre2,</span><br><span class="line">        npre = ListNode(INT_MIN);</span><br><span class="line">        npre.next = head;</span><br><span class="line">        for( ; ptr != nullptr; ) &#123;</span><br><span class="line">            for(ptr2 = npre.next, pre2 = &amp;npre; ptr2 != ptr; ptr2 = ptr2-&gt;next, pre2 = pre2-&gt;next)&#123;</span><br><span class="line">                if(ptr2-&gt;val &gt;= ptr-&gt;val) &#123;</span><br><span class="line">                    pre-&gt;next = ptr-&gt;next;</span><br><span class="line">                    ptr-&gt;next = ptr2;</span><br><span class="line">                    pre2-&gt;next = ptr;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(ptr2 == ptr) &#123;</span><br><span class="line">                ptr = ptr-&gt;next;</span><br><span class="line">                pre = pre-&gt;next;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ptr = pre-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            // for(auto x = &amp;npre; x != nullptr; x = x-&gt;next) &#123;</span><br><span class="line">            //     cout &lt;&lt; x-&gt;val &lt;&lt; &quot; &quot;;</span><br><span class="line">            // &#125;</span><br><span class="line">            // cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        return npre.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>22/22 cases passed (100 ms) <br><br>Your runtime beats 6.64 % of cpp submissions <br><br>Your memory usage beats 13.73 % of cpp submissions (9.7 MB) <br></p></blockquote><h4 id="🏆改进版"><a href="#🏆改进版" class="headerlink" title="🏆改进版"></a>🏆改进版</h4><p>&emsp;&emsp;对于插入排序来说，我们没有必要记录那么多前置节点的位置，<strong>我们只要保证ptr左边的序列有序即可</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* insertionSortList(ListNode* head) &#123;</span><br><span class="line">        if(!head || !head-&gt;next) </span><br><span class="line">            return head;</span><br><span class="line">        ListNode* ptr = head, *nex,*ptr2, </span><br><span class="line">        npre = ListNode(INT_MIN);</span><br><span class="line">        while(ptr) &#123;</span><br><span class="line">            nex = ptr-&gt;next;</span><br><span class="line">            ptr2 = &amp;npre;</span><br><span class="line">            while(ptr2-&gt;next &amp;&amp; ptr2-&gt;next-&gt;val &lt; ptr-&gt;val)</span><br><span class="line">                ptr2 = ptr2-&gt;next;</span><br><span class="line">            ptr-&gt;next = ptr2-&gt;next;</span><br><span class="line">            ptr2-&gt;next = ptr;</span><br><span class="line">            // for(auto x = &amp;npre; x != NULL; x = x-&gt;next) &#123;</span><br><span class="line">            //     cout &lt;&lt; x-&gt;val &lt;&lt; &quot; &quot;;</span><br><span class="line">            // &#125;</span><br><span class="line">            // cout &lt;&lt; &quot; cur: &quot; &lt;&lt; ptr-&gt;val  &lt;&lt; endl;</span><br><span class="line">            ptr = nex;</span><br><span class="line">        &#125;</span><br><span class="line">        return npre.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>22/22 cases passed (48 ms)<br><br>Your runtime beats 73.88 % of cpp submissions <br><br>Your memory usage beats 15.9 % of cpp submissions (9.7 MB)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>56.合并区间</title>
      <link href="/2020/01/11/leetcode56/"/>
      <url>/2020/01/11/leetcode56/</url>
      
        <content type="html"><![CDATA[<h4 id="🥛使用数组"><a href="#🥛使用数组" class="headerlink" title="🥛使用数组"></a>🥛使用数组</h4><p>&emsp;&emsp;使用数组来进行操作，特别[0,1][2,4]这样连在一起。却没有相交的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; merge(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        char arr[3000] = &quot;&quot;;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; res;</span><br><span class="line">        for(auto x : intervals) &#123;</span><br><span class="line">            memset(arr + x[0], &apos;1&apos; ,x[1] - x[0]);</span><br><span class="line">            if(arr[x[1]] != &apos;1&apos;)</span><br><span class="line">                arr[x[1]] = &apos;2&apos;;</span><br><span class="line">            else </span><br><span class="line">                arr[x[1]] = &apos;1&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        int count = 0, k;</span><br><span class="line">        for(int i = 0; i &lt; 3000; ++i) &#123;</span><br><span class="line">            if(arr[i] != &apos;\0&apos;) &#123;</span><br><span class="line">                count = 0;</span><br><span class="line">                for(k = i; k &lt; 3000 &amp;&amp; arr[k] == &apos;1&apos;; ++k) &#123;</span><br><span class="line">                    arr[k] = &apos;\0&apos;;</span><br><span class="line">                    ++count;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[k] = &apos;\0&apos;;</span><br><span class="line">                res.push_back(vector&lt;int&gt;&#123;i, i + count&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>169/169 cases passed (20 ms)<br><br>Your runtime beats 90.61 % of cpp submissions<br><br>Your memory usage beats 5.08 % of cpp submissions (13.3 MB)</p></blockquote><hr><h4 id="🚆排序后比较"><a href="#🚆排序后比较" class="headerlink" title="🚆排序后比较"></a>🚆排序后比较</h4><p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; merge(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; res;</span><br><span class="line">        sort(intervals.begin(), intervals.end(), [](const vector&lt;int&gt;&amp; a ,const vector&lt;int&gt;&amp; b)&#123;</span><br><span class="line">            return a[0] &lt; b[0];</span><br><span class="line">        &#125;);</span><br><span class="line">        // for(auto x : intervals) &#123;</span><br><span class="line">        //     cout &lt;&lt; x[0] &lt;&lt; x[1] &lt;&lt; endl;</span><br><span class="line">        // &#125;</span><br><span class="line">        int i = 0, beg, endx, n = intervals.size();</span><br><span class="line">        while(i &lt; n) &#123;</span><br><span class="line">            beg = intervals[i][0];</span><br><span class="line">            endx = intervals[i][1];</span><br><span class="line">            while(i &lt; n - 1&amp;&amp; intervals[i + 1][0] &lt;= endx) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                if(intervals[i][1] &gt; endx) </span><br><span class="line">                    endx = intervals[i][1];</span><br><span class="line">            &#125;</span><br><span class="line">            // cout &lt;&lt; beg &lt;&lt; &quot; &quot; &lt;&lt; endx &lt;&lt; endl;</span><br><span class="line">            res.push_back(vector&lt;int&gt;&#123;beg, endx&#125;);</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>169/169 cases passed (12 ms)<br><br>Your runtime beats 99.88 % of cpp submissions<br><br>Your memory usage beats 5.08 % of cpp submissions (12.7 MB)<br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75.颜色分类</title>
      <link href="/2020/01/11/leetcode75/"/>
      <url>/2020/01/11/leetcode75/</url>
      
        <content type="html"><![CDATA[<h4 id="🥧典型的堆排序题目"><a href="#🥧典型的堆排序题目" class="headerlink" title="🥧典型的堆排序题目"></a>🥧典型的堆排序题目</h4><p>&emsp;&emsp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void sortColors(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        nums.insert(nums.begin(), 0);</span><br><span class="line">        int n = nums.size() - 1;</span><br><span class="line">        for(int i = n / 2; i &gt;= 1; --i) &#123;</span><br><span class="line">            sink(nums, i, n);</span><br><span class="line">        &#125;</span><br><span class="line">        while(n &gt; 1) &#123;</span><br><span class="line">            swap(nums[1], nums[n--]);</span><br><span class="line">            sink(nums, 1, n);</span><br><span class="line">        &#125;</span><br><span class="line">        nums.erase(nums.begin());</span><br><span class="line">    &#125;</span><br><span class="line">    void sink(vector&lt;int&gt;&amp; nums, int k,int n) &#123;</span><br><span class="line">        int j;</span><br><span class="line">        while(k &lt;= n / 2) &#123;</span><br><span class="line">            j = k * 2;</span><br><span class="line">            if(nums[j] &lt; nums[j + 1] &amp;&amp; j + 1 &lt;= n) ++j;</span><br><span class="line">            if(nums[k] &gt;= nums[j]) break;</span><br><span class="line">            swap(nums[k], nums[j]);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>87/87 cases passed (0 ms)<br><br>Your runtime beats 100 % of cpp submissions<br><br>Your memory usage beats 5.17 % of cpp submissions (8.9 MB)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21.合并两个有序链表</title>
      <link href="/2020/01/11/leetcode21/"/>
      <url>/2020/01/11/leetcode21/</url>
      
        <content type="html"><![CDATA[<h4 id="🥛迭代"><a href="#🥛迭代" class="headerlink" title="🥛迭代"></a>🥛迭代</h4><p>&emsp;&emsp;类似与归并排序的合并函数，实际还要更简单一些，没有长度的限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123;</span><br><span class="line">        ListNode nd(0), *pre = &amp;nd;</span><br><span class="line">        while(l1 || l2) &#123;</span><br><span class="line">            if(!l1) &#123;</span><br><span class="line">                pre-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125; else if(!l2) &#123;</span><br><span class="line">                pre-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; else if(l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">                pre-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                pre-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return nd.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>208/208 cases passed (8 ms)<br><br>Your runtime beats 93.28 % of cpp submissions<br><br>Your memory usage beats 76.07 % of cpp submissions (9 MB)<br></p></blockquote><h4 id="🥛递归"><a href="#🥛递归" class="headerlink" title="🥛递归"></a>🥛递归</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123;</span><br><span class="line">        if(!l1)</span><br><span class="line">            return l2;</span><br><span class="line">        else if(!l2) </span><br><span class="line">            return l1;</span><br><span class="line">        else if(l2-&gt;val &lt; l1-&gt;val) &#123;</span><br><span class="line">            l2-&gt;next = mergeTwoLists(l2-&gt;next, l1);</span><br><span class="line">            return l2;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">            return l1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>208/208 cases passed (8 ms) <br><br>Your runtime beats 93.28 % of cpp submissions<br><br>Your memory usage beats 75.58 % of cpp submissions (9 MB) <br></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>148. 排序链表</title>
      <link href="/2020/01/11/leetcode148/"/>
      <url>/2020/01/11/leetcode148/</url>
      
        <content type="html"><![CDATA[<h4 id="🥩自顶向下归并排序"><a href="#🥩自顶向下归并排序" class="headerlink" title="🥩自顶向下归并排序"></a>🥩自顶向下归并排序</h4><p>&emsp;&emsp;基础版，根据算法4中的数组的归并算法改得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* sortList(ListNode* head) &#123;</span><br><span class="line">        if(!head) return head; </span><br><span class="line">        n = 1;</span><br><span class="line">         ListNode* h = head;</span><br><span class="line">        while(h-&gt;next != NULL) &#123;</span><br><span class="line">            h = h-&gt;next;</span><br><span class="line">            ++n;</span><br><span class="line">        &#125;</span><br><span class="line">        //cout &lt;&lt; &quot;count : &quot; &lt;&lt; n  &lt;&lt; endl;</span><br><span class="line">        aux = new int[n]();</span><br><span class="line">        sortList(head, 0, n - 1);</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">    void sortList(ListNode* head, int i, int j) &#123;</span><br><span class="line">        if(i &gt;= j) return ;</span><br><span class="line">        int mid = i + (j - i) / 2; </span><br><span class="line">        sortList(head, i, mid);</span><br><span class="line">        sortList(head, mid + 1, j);</span><br><span class="line">        merge(head, i, mid, j);</span><br><span class="line">    &#125;</span><br><span class="line">    void merge(ListNode* head, int i,int mid, int j) &#123;</span><br><span class="line">        //cout &lt;&lt; &quot;i,m.j : &quot; &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; mid &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">        ListNode* inode = at(head, i),* inode2 = inode;</span><br><span class="line">        //cout &lt;&lt; &quot;inode-&gt;val: &quot; &lt;&lt;  inode2-&gt;val &lt;&lt; endl;</span><br><span class="line">        int lo = i - i, hi = mid + 1 - i;</span><br><span class="line">        for(int k = 0; k &lt;= j - i; ++k , inode = inode-&gt;next)</span><br><span class="line">            aux[k + i] = inode-&gt;val;</span><br><span class="line">        // for(int k = i; k &lt;= j; ++k) &#123;</span><br><span class="line">            //cout &lt;&lt; aux[k] &lt;&lt; &quot; &quot;;</span><br><span class="line">        // &#125;</span><br><span class="line">        //cout &lt;&lt; endl;</span><br><span class="line">        for(int k = 0; k &lt;= j - i; ++k) &#123;</span><br><span class="line">            if(lo &gt; mid - i)&#123; </span><br><span class="line">                inode2-&gt;val = aux[hi + i];</span><br><span class="line">                ++hi;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (hi &gt; j - i) &#123;</span><br><span class="line">                inode2-&gt;val = aux[lo + i];</span><br><span class="line">                ++lo;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (aux[lo + i] &gt; aux[hi + i]) &#123;</span><br><span class="line">                inode2-&gt;val = aux[hi + i];</span><br><span class="line">                ++hi;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                inode2-&gt;val = aux[lo + i];</span><br><span class="line">                ++lo;</span><br><span class="line">            &#125;</span><br><span class="line">            //cout &lt;&lt; &quot;lo, hi : &quot; &lt;&lt; lo &lt;&lt;  &quot; &quot; &lt;&lt; hi &lt;&lt; endl;</span><br><span class="line">            inode2 = inode2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* at(ListNode* head, int n) &#123;</span><br><span class="line">        while(n--)</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        return head;</span><br><span class="line">    &#125; </span><br><span class="line">    int* aux;</span><br><span class="line">    int n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>16/16 cases passed (1108 ms) <br><br>Your runtime beats 5.09 % of cpp submissions<br><br>Your memory usage beats 62.56 % of cpp submissions (12.3 MB)</p></blockquote><h4 id="🥧自顶向下归并排序2"><a href="#🥧自顶向下归并排序2" class="headerlink" title="🥧自顶向下归并排序2"></a>🥧自顶向下归并排序2</h4><p>&emsp;&emsp;学习自<a href="https://leetcode-cn.com/problems/sort-list/solution/sort-list-gui-bing-pai-xu-lian-biao-by-jyd/" target="_blank" rel="noopener">链接</a>,以一种链表得方式来做，而不是以数组得方式来思考</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* sortList(ListNode* head) &#123;</span><br><span class="line">        if(!head || !head-&gt;next)</span><br><span class="line">            return head;</span><br><span class="line">        ListNode* slow = head, </span><br><span class="line">            * fast = head-&gt;next;</span><br><span class="line">        while(fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tmp = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = nullptr;</span><br><span class="line">        ListNode* left = sortList(head);</span><br><span class="line">        ListNode* right = sortList(tmp);</span><br><span class="line">        ListNode thead = ListNode(-1), *thd = &amp;thead;</span><br><span class="line">        while(left || right) &#123;</span><br><span class="line">            if(!left) &#123;</span><br><span class="line">                thd-&gt;next = right;</span><br><span class="line">                right = right-&gt;next;</span><br><span class="line">            &#125; else if(!right) &#123;</span><br><span class="line">                thd-&gt;next = left;</span><br><span class="line">                left = left-&gt;next;</span><br><span class="line">            &#125; else if (right-&gt;val &gt; left-&gt;val) &#123;</span><br><span class="line">                thd-&gt;next = left;</span><br><span class="line">                left = left-&gt;next;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                thd-&gt;next = right;</span><br><span class="line">                right = right-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            thd = thd-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return thead.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted <br><br>16/16 cases passed (24 ms)<br><br>Your runtime beats 100 % of cpp submissions<br><br>Your memory usage beats 72.66 % of cpp submissions (11.9 MB)</p></blockquote><h4 id="🥣自底向上归并排序"><a href="#🥣自底向上归并排序" class="headerlink" title="🥣自底向上归并排序"></a>🥣自底向上归并排序</h4><p>&emsp;&emsp;学习自<a href="https://leetcode-cn.com/problems/sort-list/solution/java-zi-di-xiang-shang-gui-bing-by-lava-4/" target="_blank" rel="noopener">链接</a>，自底向上得链表，有几个难点:</p><ul><li>如何每次merge后与后面得链表接上</li><li>如何串联成一个长得链表最后返回<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* sortList(ListNode* head) &#123;</span><br><span class="line">        if(!head || !head-&gt;next)</span><br><span class="line">            return head;</span><br><span class="line">        ListNode* preNode = new ListNode(0), *pre = preNode;</span><br><span class="line">        pre-&gt;next = head;</span><br><span class="line">        int count = 0;</span><br><span class="line">        while((pre = pre-&gt;next) &amp;&amp; ++count) ;</span><br><span class="line">        // cout &lt;&lt; &quot;count : &quot; &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">        pre = preNode;</span><br><span class="line">        for(int sz = 1; sz &lt; count; sz *=2) &#123;</span><br><span class="line">            while(pre = sortList(pre, sz)) ;</span><br><span class="line">            pre = preNode;</span><br><span class="line">        &#125;</span><br><span class="line">        return preNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode* sortList(ListNode* pre, int sz) &#123;</span><br><span class="line">        ListNode* fl = pre-&gt;next, </span><br><span class="line">            *ll = pre-&gt;next;</span><br><span class="line">        for(int i = 0; i &lt; sz ; ++i) &#123;</span><br><span class="line">            if(!ll) </span><br><span class="line">                return nullptr;</span><br><span class="line">            ll =ll-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        int lc = 0, fc = 0;</span><br><span class="line">        while(fc &lt; sz) &#123;</span><br><span class="line">            if(lc == sz || ll == nullptr || ll-&gt;val &gt; fl-&gt;val) &#123;</span><br><span class="line">                ++fc;</span><br><span class="line">                pre-&gt;next = fl;</span><br><span class="line">                fl = fl-&gt;next;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ++lc;</span><br><span class="line">                pre-&gt;next = ll;</span><br><span class="line">                ll = ll-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(lc &lt; sz &amp;&amp; ll) &#123;</span><br><span class="line">            ++lc;</span><br><span class="line">            pre-&gt;next = ll;</span><br><span class="line">            ll = ll-&gt;next;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next = ll;</span><br><span class="line">        return pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Accepted<br><br>16/16 cases passed (24 ms)<br><br>Your runtime beats 100 % of cpp submissions<br><br>Your memory usage beats 93.48 % of cpp submissions (11.5 MB)<br></p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2020/01/10/alg4/"/>
      <url>/2020/01/10/alg4/</url>
      
        <content type="html"><![CDATA[<h4 id="😘代码实现"><a href="#😘代码实现" class="headerlink" title="😘代码实现"></a>😘代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/**</span><br><span class="line"> * 堆排序</span><br><span class="line"> **/</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class HeapSort &#123;</span><br><span class="line">  public:</span><br><span class="line">    static void sort(vector&lt;T&gt;&amp;);</span><br><span class="line">  private:</span><br><span class="line">    static void sink(vector&lt;T&gt;&amp; a, int k, int N);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void HeapSort&lt;T&gt;::sort(vector&lt;T&gt;&amp; a) &#123;</span><br><span class="line">  int N = a.size() - 1;</span><br><span class="line">  for(int i = N / 2; i &gt;= 1; --i)</span><br><span class="line">    sink(a, i, N);</span><br><span class="line">  while(N &gt; 1) &#123;</span><br><span class="line">    swap(a[1], a[N--]);</span><br><span class="line">    sink(a, 1, N);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void HeapSort&lt;T&gt;::sink(vector&lt;T&gt;&amp; a, int k, int N) &#123;</span><br><span class="line">  int j;</span><br><span class="line">  while(k &lt;= N / 2) &#123;</span><br><span class="line">    j = 2 * k;</span><br><span class="line">    if(j &lt; N &amp;&amp; a[j] &lt; a[j + 1]) ++j;</span><br><span class="line">    if(a[k] &gt;= a[j]) break;</span><br><span class="line">    swap(a[k], a[j]);</span><br><span class="line">    k = j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="👿注意"><a href="#👿注意" class="headerlink" title="👿注意"></a>👿注意</h4><ul><li>要注意父节点只有一个子节点时的情况，在sink函数中（if(j &lt; N &amp;&amp; a[j] &lt; a[j + 1]) ++j;）一定要注意j&lt;N，不能超出范围</li><li>构造最大堆时，for循环从i = N / 2开始的原因是：sink中有限制条件while(k &lt;= N / 2)，所以N/2&lt;i&lt;N部分无法进入sink的while循环，是没有意义的，徒增N/2次比较</li><li>递增排序使用最大堆，递减排序使用最小堆</li><li>vector的第一个值（下标为0）不使用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引优先队列</title>
      <link href="/2020/01/10/alg3/"/>
      <url>/2020/01/10/alg3/</url>
      
        <content type="html"><![CDATA[<h4 id="🥛分析"><a href="#🥛分析" class="headerlink" title="🥛分析"></a>🥛分析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class IndexMaxPQ...&#123;</span><br><span class="line">    private int maxN;        // maximum number of elements on PQ</span><br><span class="line">    private int n;           // number of elements on PQ</span><br><span class="line">    private int[] pq;        // binary heap using 1-based indexing</span><br><span class="line">    private int[] qp;        // inverse of pq - qp[pq[i]] = pq[qp[i]] = i</span><br><span class="line">    private Key[] keys;      // keys[i] = priority of i</span><br><span class="line"></span><br><span class="line">//中间省略...</span><br><span class="line">public void insert(int i, Key key) &#123;</span><br><span class="line">        ...</span><br><span class="line">        n++;</span><br><span class="line">        qp[i] = n;</span><br><span class="line">        pq[n] = i;</span><br><span class="line">        keys[i] = key;</span><br><span class="line">        swim(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;根据《算法4》给出的代码，分析这两段代码我们可以看出来：</p><ul><li>在定义处可知pq是<strong>二叉堆的数组</strong></li><li>由qp[i] = n;<pre><code>pq[n] = i;可以看出来，qp这个数组的用处就是为了记录**pq中值为i的下标是多少**，这样当我们要改下标为i的元素的值时，我们就不用遍历pq来获得位置了，**用空间来换取时间**</code></pre></li><li>并且这个索引i仅仅为了找到元素对象key，并没实际的意义。n才是对应二叉堆的位置。<br></li></ul><h4 id="😍代码实现"><a href="#😍代码实现" class="headerlink" title="😍代码实现"></a>😍代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include  &lt;functional&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 索引最小优先队列</span><br><span class="line"> **/ </span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class IndexMinPQ &#123;</span><br><span class="line">  public:</span><br><span class="line">    IndexMinPQ(int max);</span><br><span class="line">    void show() const;</span><br><span class="line">    int size() const &#123;return N;&#125;</span><br><span class="line">    int capacity() const &#123;return _capacity;&#125;</span><br><span class="line">    void insert(int k, T item);</span><br><span class="line">    void change(int k, T item);</span><br><span class="line">    bool contain(int k) const &#123;return qp[k] != -1;&#125;;</span><br><span class="line">    int delMin();</span><br><span class="line">  private:</span><br><span class="line">    void sink(int i);</span><br><span class="line">    void swim(int i);</span><br><span class="line">    T* element; //元素</span><br><span class="line">    int* pq; //二叉堆</span><br><span class="line">    int *qp; //index</span><br><span class="line">    int N;</span><br><span class="line">    int _capacity;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">IndexMinPQ&lt;T&gt;::IndexMinPQ(int max) :</span><br><span class="line">  element(new T[max + 1]), pq(new int[max + 1])</span><br><span class="line">  , qp(new int[max + 1]), N(0), _capacity(max) </span><br><span class="line">&#123;</span><br><span class="line">  for(int i = 0; i &lt; max + 1; ++i)</span><br><span class="line">    qp[i] = -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void IndexMinPQ&lt;T&gt;::sink(int n)&#123;</span><br><span class="line">  while(n &lt; N) &#123;</span><br><span class="line">    int m = n * 2;</span><br><span class="line">    if(element[pq[m]] &gt; element[pq[m + 1]]) ++m;</span><br><span class="line">    if(element[pq[m]] &lt; element[pq[n]]) break;</span><br><span class="line">    swap(pq[m], pq[n]);</span><br><span class="line">    swap(qp[pq[m]], qp[pq[n]]);</span><br><span class="line">    n = m;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void IndexMinPQ&lt;T&gt;::swim(int n) &#123;</span><br><span class="line">  while(n &gt; 1) &#123;</span><br><span class="line">    int m = n / 2;</span><br><span class="line">    if(element[pq[m]] &lt;= element[pq[n]]) break;</span><br><span class="line">    swap(pq[m], pq[n]);</span><br><span class="line">    swap(qp[pq[m]], qp[pq[n]]);</span><br><span class="line">    n = m; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void IndexMinPQ&lt;T&gt;::insert(int k, T item) &#123;</span><br><span class="line">  // cout &lt;&lt; &quot;insert &quot; &lt;&lt; k &lt;&lt; &quot; &quot; &lt;&lt; item &lt;&lt; endl;</span><br><span class="line">  if(capacity() == size())&#123;</span><br><span class="line">    cout &lt;&lt; &quot;out of size&quot; &lt;&lt; endl;</span><br><span class="line">    return ;</span><br><span class="line">  &#125;</span><br><span class="line">  pq[++N] = k;</span><br><span class="line">  element[k] = item;</span><br><span class="line">  qp[k] = N;</span><br><span class="line">  swim(N);</span><br><span class="line">  // show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void IndexMinPQ&lt;T&gt;::show() const</span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt; &quot;pq: &quot;;</span><br><span class="line">  for(int i = 1; i &lt;= capacity(); ++i) </span><br><span class="line">    cout &lt;&lt; pq[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; &quot;qp: &quot;;</span><br><span class="line">  for(int i = 1; i &lt;= capacity(); ++i) </span><br><span class="line">    cout &lt;&lt; qp[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; &quot;element: &quot;;</span><br><span class="line">  for(int i = 1; i &lt;= capacity(); ++i) </span><br><span class="line">    cout &lt;&lt; element[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void IndexMinPQ&lt;T&gt;::change(int k, T item) &#123;</span><br><span class="line">  if(!contain(k)) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;change not contain&quot; &lt;&lt; endl;</span><br><span class="line">    return ;   </span><br><span class="line">  &#125;</span><br><span class="line">  T old_one = element[k];</span><br><span class="line">  element[k] = item;</span><br><span class="line">  if(item &gt; old_one) </span><br><span class="line">    sink(qp[k]);</span><br><span class="line">  else if(item &lt; old_one)</span><br><span class="line">    swim(qp[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">int IndexMinPQ&lt;T&gt;::delMin() &#123;</span><br><span class="line">  int max = pq[1];</span><br><span class="line">  swap(pq[1], pq[N]);</span><br><span class="line">  swap(qp[pq[1]], qp[pq[N]]);</span><br><span class="line">  --N;</span><br><span class="line">  show();</span><br><span class="line">  sink(1);</span><br><span class="line">  show();</span><br><span class="line">  qp[max] = -1;</span><br><span class="line">  element[max] = -1;</span><br><span class="line">  pq[N + 1] = -1;</span><br><span class="line">  return max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  IndexMinPQ&lt;int&gt; pq(6);</span><br><span class="line">  vector&lt;int&gt; v = Common::getInstance()-&gt;getRandomVector(6);</span><br><span class="line">  for(size_t i = 0; i &lt; v.size(); ++i) &#123;</span><br><span class="line">    pq.insert(i + 1, v[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  pq.show();</span><br><span class="line">  pq.delMin();</span><br><span class="line">  pq.show();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🍠参考资料：链接"><a href="#🍠参考资料：链接" class="headerlink" title="🍠参考资料：链接"></a>🍠参考资料：<a href="https://www.cnblogs.com/nullzx/p/6624731.html" target="_blank" rel="noopener">链接</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优先队列</title>
      <link href="/2020/01/10/alg2/"/>
      <url>/2020/01/10/alg2/</url>
      
        <content type="html"><![CDATA[<h4 id="🍠优先队列的实现有三种："><a href="#🍠优先队列的实现有三种：" class="headerlink" title="🍠优先队列的实现有三种："></a>🍠优先队列的实现有三种：</h4><ul><li>有序数组</li><li>无序数组</li><li>堆</li></ul><h5 id="🍅有序数组"><a href="#🍅有序数组" class="headerlink" title="🍅有序数组"></a>🍅有序数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include  &lt;functional&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 优先队列</span><br><span class="line"> * 2.4.3 有序数组实现</span><br><span class="line"> **/ </span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class OrderArrayMaxPQ &#123;</span><br><span class="line">  private:</span><br><span class="line">    pair&lt;int, T&gt;* arr;</span><br><span class="line">    int N;</span><br><span class="line">    int _capacity;</span><br><span class="line">  public:</span><br><span class="line">    void show() const ;</span><br><span class="line">    explicit OrderArrayMaxPQ(int max);</span><br><span class="line">    ~OrderArrayMaxPQ() &#123;delete [] arr;&#125;</span><br><span class="line">    // explicit OrderArrayMaxPQ(std::initializer_list&lt;pair&lt;int, T&gt;&gt;);</span><br><span class="line">    void insert(pair&lt;int, T&gt;);</span><br><span class="line">    pair&lt;int, T&gt; delMax();</span><br><span class="line">    bool isEmpty() const &#123; return N == 0;&#125;</span><br><span class="line">    int size() const &#123;return N;&#125; </span><br><span class="line">    int capacity() const &#123;return _capacity;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">OrderArrayMaxPQ&lt;T&gt;::OrderArrayMaxPQ(int max) :</span><br><span class="line">  arr(new pair&lt;int, T&gt;[max]()), N(0), _capacity(max)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// template&lt;typename T&gt;</span><br><span class="line">// OrderArrayMaxPQ&lt;T&gt;::OrderArrayMaxPQ(std::initializer_list&lt;pair&lt;int, T&gt;&gt; l) </span><br><span class="line">//   : arr(new pair&lt;int, T&gt;[l.size()]()), N(l.size()), _capacity(l.size())</span><br><span class="line">// &#123;</span><br><span class="line">//   copy(l.begin(), l.end(), arr);</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void OrderArrayMaxPQ&lt;T&gt;::insert(pair&lt;int, T&gt; x) &#123;</span><br><span class="line">  if(capacity() == size()) </span><br><span class="line">    return ;</span><br><span class="line">  arr[N++] = x;</span><br><span class="line">  for(int i = N - 1; i &gt; 0 &amp;&amp; arr[i] &lt; arr[i - 1]; --i)</span><br><span class="line">    swap(arr[i], arr[i - 1]); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">pair&lt;int, T&gt; OrderArrayMaxPQ&lt;T&gt;::delMax() &#123;</span><br><span class="line">  pair&lt;int ,T&gt; res;</span><br><span class="line">  if(isEmpty())</span><br><span class="line">    return res;</span><br><span class="line">  res = arr[N - 1];</span><br><span class="line">  arr[--N] = pair&lt;int , T&gt;();</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void OrderArrayMaxPQ&lt;T&gt;::show() const &#123;</span><br><span class="line">  cout &lt;&lt; &quot;N: &quot; &lt;&lt; size() &lt;&lt; &quot; arr: &quot;;</span><br><span class="line">  for(int i = 0; i &lt; N; ++i)</span><br><span class="line">    cout &lt;&lt; arr[i].first &lt;&lt; &quot; &quot;;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  OrderArrayMaxPQ&lt;int&gt; pq(20);</span><br><span class="line">  vector&lt;int&gt; v = Common::getInstance()-&gt;getRandomVector(12);</span><br><span class="line">  for(auto x: v) &#123;</span><br><span class="line">    pq.insert(&#123;x, x&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  while(pq.size()) &#123;</span><br><span class="line">    pq.show();</span><br><span class="line">    pq.delMax();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="🥦无序数组"><a href="#🥦无序数组" class="headerlink" title="🥦无序数组"></a>🥦无序数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include  &lt;functional&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 优先队列</span><br><span class="line"> * 2.4.3 无序数组实现</span><br><span class="line"> **/ </span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class UnOrderArrayMaxPQ &#123;</span><br><span class="line">  private:</span><br><span class="line">    pair&lt;int, T&gt;* arr;</span><br><span class="line">    int N;</span><br><span class="line">    int _capacity;</span><br><span class="line">  public:</span><br><span class="line">    void show() const ;</span><br><span class="line">    explicit UnOrderArrayMaxPQ(int max);</span><br><span class="line">    ~UnOrderArrayMaxPQ() &#123;delete [] arr;&#125;</span><br><span class="line">    explicit UnOrderArrayMaxPQ(std::initializer_list&lt;pair&lt;int, T&gt;&gt;);</span><br><span class="line">    void insert(pair&lt;int, T&gt;);</span><br><span class="line">    pair&lt;int, T&gt; delMax();</span><br><span class="line">    bool isEmpty() const &#123; return N == 0;&#125;</span><br><span class="line">    int size() const &#123;return N;&#125; </span><br><span class="line">    int capacity() const &#123;return _capacity;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">UnOrderArrayMaxPQ&lt;T&gt;::UnOrderArrayMaxPQ(int max) :</span><br><span class="line">  arr(new pair&lt;int, T&gt;[max]()), N(0), _capacity(max)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">UnOrderArrayMaxPQ&lt;T&gt;::UnOrderArrayMaxPQ(std::initializer_list&lt;pair&lt;int, T&gt;&gt; l) </span><br><span class="line">  : arr(new pair&lt;int, T&gt;[l.size()]()), N(l.size()), _capacity(l.size())</span><br><span class="line">&#123;</span><br><span class="line">  copy(l.begin(), l.end(), arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void UnOrderArrayMaxPQ&lt;T&gt;::insert(pair&lt;int, T&gt; x) &#123;</span><br><span class="line">  if(capacity() == size()) </span><br><span class="line">    return ;</span><br><span class="line">  arr[N++] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">pair&lt;int, T&gt; UnOrderArrayMaxPQ&lt;T&gt;::delMax() &#123;</span><br><span class="line">  if(isEmpty())</span><br><span class="line">    return pair&lt;int, T&gt;();</span><br><span class="line">  int max_one = 0;</span><br><span class="line">  for(int i = 0; i &lt; N; ++i) </span><br><span class="line">    if(arr[max_one].first &lt; arr[i].first) &#123;</span><br><span class="line">      max_one = i;</span><br><span class="line">    &#125;</span><br><span class="line">  swap(arr[max_one], arr[--N]);</span><br><span class="line">  pair&lt;int,T&gt; res = arr[N];</span><br><span class="line">  arr[N] = pair&lt;int,T&gt;();</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void UnOrderArrayMaxPQ&lt;T&gt;::show() const &#123;</span><br><span class="line">  cout &lt;&lt; &quot;N: &quot; &lt;&lt; size() &lt;&lt; &quot; arr: &quot;;</span><br><span class="line">  for(int i = 0; i &lt; N; ++i)</span><br><span class="line">    cout &lt;&lt; arr[i].first &lt;&lt; &quot; &quot;;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  UnOrderArrayMaxPQ&lt;int&gt; pq(20);</span><br><span class="line">  vector&lt;int&gt; v = Common::getInstance()-&gt;getRandomVector(12);</span><br><span class="line">  for(auto x: v) &#123;</span><br><span class="line">    pq.insert(&#123;x, x&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  while(pq.size()) &#123;</span><br><span class="line">    pq.show();</span><br><span class="line">    pq.delMax();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="🥧堆"><a href="#🥧堆" class="headerlink" title="🥧堆"></a>🥧堆</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include  &lt;functional&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Common.hpp&quot;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 优先队列</span><br><span class="line"> * 二叉堆实现</span><br><span class="line"> **/ </span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class MaxPQ &#123;</span><br><span class="line">  private:</span><br><span class="line">    pair&lt;int, T&gt;* arr;</span><br><span class="line">    int N;</span><br><span class="line">    int _capacity;</span><br><span class="line">    void swim(int i);</span><br><span class="line">    void sink(int i);</span><br><span class="line">  public:</span><br><span class="line">    void show() const ;</span><br><span class="line">    explicit MaxPQ(int max);</span><br><span class="line">    ~MaxPQ() &#123;delete [] arr;&#125;</span><br><span class="line">    void insert(pair&lt;int, T&gt;);</span><br><span class="line">    pair&lt;int, T&gt; delMax();</span><br><span class="line">    bool isEmpty() const &#123; return N == 0;&#125;</span><br><span class="line">    int size() const &#123;return N;&#125; </span><br><span class="line">    int capacity() const &#123;return _capacity;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">MaxPQ&lt;T&gt;::MaxPQ(int max) :</span><br><span class="line">  arr(new pair&lt;int, T&gt;[max + 1]()), N(0), _capacity(max + 1)</span><br><span class="line">&#123;</span><br><span class="line">  arr[0] = pair&lt;int, T&gt;(INT8_MIN, T());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void MaxPQ&lt;T&gt;::insert(pair&lt;int, T&gt; x) &#123;</span><br><span class="line">  if(capacity() == size()) </span><br><span class="line">    return ;</span><br><span class="line">  arr[++N] = x;</span><br><span class="line">  swim(N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">pair&lt;int, T&gt; MaxPQ&lt;T&gt;::delMax() &#123;</span><br><span class="line">  pair&lt;int ,T&gt; res;</span><br><span class="line">  if(isEmpty())</span><br><span class="line">    return res;</span><br><span class="line">  swap(arr[N--], arr[1]);</span><br><span class="line">  res =  arr[N + 1];</span><br><span class="line">  arr[N + 1] = pair&lt;int ,T&gt;();</span><br><span class="line">  sink(1);</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void MaxPQ&lt;T&gt;::show() const &#123;</span><br><span class="line">  cout &lt;&lt; &quot;N: &quot; &lt;&lt; size() &lt;&lt; &quot; arr: &quot;;</span><br><span class="line">  for(int i = 1; i &lt;= N; ++i)</span><br><span class="line">    cout &lt;&lt; arr[i].first &lt;&lt; &quot; &quot;;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void MaxPQ&lt;T&gt;::swim(int i) &#123;</span><br><span class="line">  while(i &gt; 1) &#123;</span><br><span class="line">    if(arr[i].first &gt; arr[i / 2].first) swap(arr[i], arr[i / 2]);</span><br><span class="line">    i /= 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void MaxPQ&lt;T&gt;::sink(int i) &#123;</span><br><span class="line">  int k;</span><br><span class="line">  while(i &lt; N) &#123;</span><br><span class="line">    k = 2 * i;</span><br><span class="line">    if(arr[k].first &lt; arr[k + 1].first) ++k;</span><br><span class="line">    if(arr[k].first &lt;= arr[i].first) break;</span><br><span class="line">    swap(arr[k], arr[i]);</span><br><span class="line">    i = k;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  MaxPQ&lt;int&gt; pq(20);</span><br><span class="line">  vector&lt;int&gt; v = Common::getInstance()-&gt;getRandomVector(12);</span><br><span class="line">  for(auto x: v) &#123;</span><br><span class="line">    pq.insert(&#123;x, x&#125;);</span><br><span class="line">    // pq.show();</span><br><span class="line">  &#125;</span><br><span class="line">  while(pq.size()) &#123;</span><br><span class="line">    pq.show();</span><br><span class="line">    pq.delMax();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🥨时间复杂度对比"><a href="#🥨时间复杂度对比" class="headerlink" title="🥨时间复杂度对比"></a>🥨时间复杂度对比</h4><ul><li>有序数组： 插入：N，删除：1</li><li>无序数组： 插入：1，删除：N</li><li>堆：插入、删除：lgN</li><li>理想情况：都是1</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为甚么异或能够确定两个数的符号是否相同？</title>
      <link href="/2020/01/08/problems2/"/>
      <url>/2020/01/08/problems2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unsigned int a  = -1;</span><br><span class="line">printf(&quot;%d,%u,%x&quot;,a,a,a);</span><br></pre></td></tr></table></figure><p>-1,4294967295,ffffffff<br><br>从结果上来说,验证了C++中使用的是<strong>补码</strong>。</p><h4 id="🍠现在说一说为什么异或能够确定两个数的符号是否相同？"><a href="#🍠现在说一说为什么异或能够确定两个数的符号是否相同？" class="headerlink" title="🍠现在说一说为什么异或能够确定两个数的符号是否相同？"></a>🍠现在说一说为什么异或能够确定两个数的符号是否相同？</h4><p>&emsp;&emsp;这里还有一个前提，两个数都是int类型，因为补码的原因，如果两个数的正负不同，那么它们的第一位就不同，因为int的第一位是正负的标志位。<br>通过异或，那么正数的第一位为0，负数的第一位为1，异或后第一位就为1，所以可以得到计算出的值为负值。相反如果两者符号相同，那么通过异或后，第一位就为0，所以为正数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 遇见的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2020/01/07/alg1/"/>
      <url>/2020/01/07/alg1/</url>
      
        <content type="html"><![CDATA[<h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>logN</p><h4 id="二分查找的实现可以分为两种，一种是递归式的、另一种是循环式的"><a href="#二分查找的实现可以分为两种，一种是递归式的、另一种是循环式的" class="headerlink" title="二分查找的实现可以分为两种，一种是递归式的、另一种是循环式的"></a>二分查找的实现可以分为两种，一种是递归式的、另一种是循环式的</h4><p>😜递归式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int BinarySearch(vector&lt;int&gt;&amp; a,int lo,int ho, int key) &#123;</span><br><span class="line">  // if(lo &gt; ho) return -1;</span><br><span class="line">  // int mid = (lo + ho) / 2;</span><br><span class="line">  // if(a[mid] &gt; key) return BinarySearch(a, lo, mid - 1, key);</span><br><span class="line">  // else if(a[mid] &lt; key) BinarySearch(a, mid + 1, ho, key);</span><br><span class="line">  // else return mid;</span><br><span class="line">  if(lo &gt;= ho) return -1;</span><br><span class="line">  int mid = (lo + ho) / 2;</span><br><span class="line">  if(a[mid] &gt; key) return BinarySearch(a, lo, mid, key);</span><br><span class="line">  else if(a[mid] &lt; key) BinarySearch(a, mid + 1, ho, key);</span><br><span class="line">  else return mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<del>区间的开闭自由选取，主要是要<strong>统一</strong>，如果要求传入左闭右开区间，那么在函数内部的处理也要保持左闭右开。</del><br>一般的选择应该时左右都是闭区间，而在特殊情况时（数组中有多个相同的目标时），这时选择左闭右开。<br><br><br>🥛参考：<a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" target="_blank" rel="noopener">wiki链接</a><br><br><br>&emsp;&emsp;为了避免ho + lo 大于INT_MAX最好改用lo + (ho - lo) / 2</p><p>🈶非递归式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int BinarySearch(vector&lt;int&gt;&amp; a, int key) &#123;</span><br><span class="line">  int lo = 0,</span><br><span class="line">    ho = a.size(),</span><br><span class="line">  mid;</span><br><span class="line">  while(lo &lt; ho) &#123;</span><br><span class="line">    mid = (lo + ho) / 2;</span><br><span class="line">    if(a[mid] &gt; key) ho = mid;</span><br><span class="line">    else if(a[mid] &lt; key) lo = mid + 1;</span><br><span class="line">    else return mid;</span><br><span class="line">  &#125;</span><br><span class="line">  return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归要满足三个原则：</p><ol><li>递归总有一个最简单的情况—方法的第一句总是一个包含return的条件语句。</li><li>递归调用总要尝试取解决一个<strong>规模更小</strong>的子问题。</li><li>递归调用的父问题和子问题之间不应该有<strong>交集</strong>。</li></ol><p>🥘推荐相关资料：<a href="https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/" target="_blank" rel="noopener">讲解</a></p><h5 id="👍练习题目1：4-寻找两个有序数组的中位数"><a href="#👍练习题目1：4-寻找两个有序数组的中位数" class="headerlink" title="👍练习题目1：4. 寻找两个有序数组的中位数"></a>👍练习题目1：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/submissions/" target="_blank" rel="noopener">4. 寻找两个有序数组的中位数</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        //首先要判定拿个序列更加长</span><br><span class="line">        if(nums1.size() &gt; nums2.size())</span><br><span class="line">            swap(nums1, nums2);</span><br><span class="line">        //左闭右开</span><br><span class="line">        int imin = 0,</span><br><span class="line">            imax = nums1.size(),</span><br><span class="line">            j, i,</span><br><span class="line">            m = nums1.size(),</span><br><span class="line">            n = nums2.size(),</span><br><span class="line">            halflen = (m + n + 1) / 2;</span><br><span class="line">        while(imin &lt;= imax) &#123;</span><br><span class="line">            i = (imax + imin ) / 2;</span><br><span class="line">            j =  halflen - i;</span><br><span class="line">            // cout &lt;&lt; i &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">            if (j &lt;= n &amp;&amp; i &lt; imax &amp;&amp; nums1[i] &lt; nums2[j - 1]) &#123;</span><br><span class="line">                imin = i + 1;</span><br><span class="line">            &#125; else if (i &gt; imin &amp;&amp; j &lt; n &amp;&amp; nums2[j] &lt; nums1[i - 1]) &#123;</span><br><span class="line">                imax = i;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // cout &lt;&lt; &quot;end&quot; &lt;&lt; endl;</span><br><span class="line">                int leftMax, rightMin;</span><br><span class="line">                if(i == 0 ) leftMax = nums2[j - 1];</span><br><span class="line">                else if(j == 0) leftMax = nums1[i - 1];</span><br><span class="line">                else leftMax = max(nums1[i - 1], nums2[j - 1]);</span><br><span class="line">                if((m + n) % 2) return leftMax;</span><br><span class="line"></span><br><span class="line">                if(i == m) rightMin = nums2[j ];</span><br><span class="line">                else if (j == n) rightMin = nums1[ i ];</span><br><span class="line">                else rightMin = min(nums1[i], nums2[j]) ;</span><br><span class="line">                // cout &lt;&lt; leftMax &lt;&lt; rightMin &lt;&lt; endl;</span><br><span class="line">                return static_cast&lt;double&gt;(leftMax + rightMin) / 2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="👍练习题目2：35-搜索插入位置"><a href="#👍练习题目2：35-搜索插入位置" class="headerlink" title="👍练习题目2：35. 搜索插入位置"></a>👍练习题目2：<a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">35. 搜索插入位置</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int lo = 0,</span><br><span class="line">            ho = nums.size() - 1,</span><br><span class="line">            mid;</span><br><span class="line">        while(lo &lt; ho) &#123;</span><br><span class="line">            mid = (lo + ho + 1) / 2;</span><br><span class="line">            if(nums[mid] &gt; target) &#123;</span><br><span class="line">                ho = mid - 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                lo = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(nums[lo] &lt; target) return lo + 1;</span><br><span class="line">        else return lo;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（6）uv_queue_work</title>
      <link href="/2019/11/26/libuv6/"/>
      <url>/2019/11/26/libuv6/</url>
      
        <content type="html"><![CDATA[<h4 id="🏤问题来由"><a href="#🏤问题来由" class="headerlink" title="🏤问题来由"></a>🏤问题来由</h4><p>&emsp;&emsp;在使用libuv的过程中，我们难免遇见的一个问题是，有一些库没有异步、只能同步运行，这种情况该怎么办呢？比如mysql-connector-cpp。</p><p>&emsp;&emsp;首先要说的是，直接在回调函数中执行mysql-connector-cpp这种会阻塞的操作是不符合Libuv的reactor模式的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_json_lab</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;smpHttp::HttpRequest&gt; req,<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;smpHttp::HttpResponse&gt; res)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    Session mq = cli.getSession();</span><br><span class="line">    <span class="keyword">auto</span> sqlres = mq.sql(<span class="string">"Select content FROM labimformation where type = 'labIntroduction'"</span>).execute();</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>上面这样便是错误的案例</strong>。我在写<a href="https://github.com/LurenAA/smpHttp" target="_blank" rel="noopener">这个项目</a>时，之前就采用了这样的错误做法。<br><br>&emsp;&emsp;我的这个项目是个http后台，我在接受到POST请求，直接在回调函数中执行mysql操作，这时<strong>整个主线程就阻塞住了<sup>1</sup></strong>，而这就意味着我的http后台不再能接受任何请求，只能等待mysql操作完成后，回调函数返回。而这个mysql的操作耗时一般在3s以上，这对我这个Http后台来说是毁灭性的打击。。。。</p><font size=2 color=#483D8B>1：用户的回调函数是在work->done函数的最后执行的，而work->done是在主线程uv_run中的is_poll中唤醒loop->wq_async后执行的,在work->done函数中阻塞意味着在主线程阻塞住了，uv_run中的事件循环卡住，不再能接受request（这部分不清楚可以去看我的libuv源码分析文章）</font><h4 id="🌆解决办法"><a href="#🌆解决办法" class="headerlink" title="🌆解决办法"></a>🌆解决办法</h4><p>&emsp;&emsp;在<a href="http://docs.libuv.org/en/v1.x/threadpool.html" target="_blank" rel="noopener">手册Thread pool work scheduling</a>中为我们这样的需求提供了这样一个函数：<br><strong>uv_queue_work(uv_loop_t* loop, uv_work_t* req, uv_work_cb work_cb, uv_after_work_cb after_work_cb)</strong>。<br></p><p>&emsp;&emsp;这个函数就是上面我们问题的解决办法。但是要注意的是uv_async_t不可以替代这个。虽然都是执行用户的函数。async是让用户函数直接被<strong>主线程</strong>在uv_run中运行，而uv_queue_work是将work_cb提交给<strong>子线程</strong>执行，完成后通知主线程，主线程在uv_run中执行after_work_cb。</p><p>&emsp;&emsp;总结下来就是：uv_async_t用来执行不阻塞的任务，uv_queue_work执行要阻塞的任务（考虑到线程切换的消耗一般不用来执行不阻塞的任务）</p><h4 id="🉐看看源码"><a href="#🉐看看源码" class="headerlink" title="🉐看看源码"></a>🉐看看源码</h4><p>&emsp;&emsp;这一部分可以结合这<a href="https://lurenaa.github.io/2019/11/26/libuv5/" target="_blank" rel="noopener">我的这篇文章-libuv源码分析（5）uv_fs_*</a>来看。可以作为佐证，libuv中对着这类没有自带异步版本的阻塞操作的处理是一样的：让子线程去执行这个任务，避免阻塞主线程的事件循环，完成后子线程通知主线程。<br><br><br>uv_queue_work源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_queue_work</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">uv_work_t</span>* req,</span></span></span><br><span class="line"><span class="function"><span class="params">                  uv_work_cb work_cb,</span></span></span><br><span class="line"><span class="function"><span class="params">                  uv_after_work_cb after_work_cb)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (work_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> UV_EINVAL;</span><br><span class="line"></span><br><span class="line">  uv__req_init(loop, req, UV_WORK);</span><br><span class="line">  req-&gt;loop = loop;</span><br><span class="line">  req-&gt;work_cb = work_cb;</span><br><span class="line">  req-&gt;after_work_cb = after_work_cb;</span><br><span class="line">  uv__work_submit(loop,</span><br><span class="line">                  &amp;req-&gt;work_req,</span><br><span class="line">                  UV__WORK_CPU,</span><br><span class="line">                  uv__queue_work,</span><br><span class="line">                  uv__queue_done);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再结合<a href="https://lurenaa.github.io/2019/11/26/libuv5/" target="_blank" rel="noopener">我的这篇文章-libuv源码分析（5）uv_fs_*</a>中uv_fs_*函数的源码，这些操作可以总结成以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UV_REQ_INIT(req, typ);          <span class="comment">//初始化基类uv_req_t                               </span></span><br><span class="line">uv__req_register(loop, req);   <span class="comment">//添加loop中request的计数，避免uv_run中uv__loop_alive返回0，使得主线程uv_run退出</span></span><br><span class="line">...<span class="comment">//这里是针对不同类型的操作特有的初始化部分</span></span><br><span class="line">uv__work_submit(loop,</span><br><span class="line">                &amp;req-&gt;work_req,</span><br><span class="line">                UV__WORK_CPU, <span class="comment">//操作类型</span></span><br><span class="line">                uv__queue_work, <span class="comment">//要阻塞的操作，在fs中是uv__fs_work</span></span><br><span class="line">                uv__queue_done); <span class="comment">//完成后的回调，在fs中是uv__fs_done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> libuv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（5）uv_fs_*</title>
      <link href="/2019/11/26/libuv5/"/>
      <url>/2019/11/26/libuv5/</url>
      
        <content type="html"><![CDATA[<h4 id="uv-fs"><a href="#uv-fs" class="headerlink" title="uv_fs_*"></a>uv_fs_*</h4><p>&emsp;&emsp;uv_fs_*这一系列的函数基本是一致的，它们的逻辑大概是如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x代表一种操作open、write等</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_fs_x</span><span class="params">(...<span class="keyword">uv_fs_t</span>* req...)</span> </span>&#123;</span><br><span class="line">  INIT(x); <span class="comment">//uv_fs_t和其基类uv_req_t的基本初始化</span></span><br><span class="line">  ... <span class="comment">//这里是每个操作各自不同对于req的初始化</span></span><br><span class="line">  POST; <span class="comment">//提交这个任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="INIT"><a href="#INIT" class="headerlink" title="INIT"></a>INIT</h4><p>&emsp;&emsp;INIT这个宏定义函数没有特别的地方，就是把req初始化，该置0的置0。</p><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>&emsp;&emsp;其实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POST                          </span></span><br><span class="line">  <span class="keyword">do</span> &#123;   <span class="comment">//dowhile包裹作用域          </span></span><br><span class="line">    <span class="keyword">if</span> (cb != <span class="literal">NULL</span>) &#123;                 </span><br><span class="line">      uv__req_register(loop, req);    </span><br><span class="line">      uv__work_submit(loop,           </span><br><span class="line">      &amp;req-&gt;work_req,                 </span><br><span class="line">      UV__WORK_FAST_IO,               </span><br><span class="line">      uv__fs_work,                    </span><br><span class="line">      uv__fs_done);                   </span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;                       </span><br><span class="line">    &#125;                                 </span><br><span class="line">    <span class="keyword">else</span> &#123;                            </span><br><span class="line">      uv__fs_work(&amp;req-&gt;work_req);    </span><br><span class="line">      <span class="keyword">return</span> req-&gt;result;             </span><br><span class="line">    &#125;                                 </span><br><span class="line">  &#125;                                   </span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里通过有无回调函数来决定调用同步版本还是异步版本。</p><blockquote><p><a href="http://docs.libuv.org/en/v1.x/fs.html" target="_blank" rel="noopener">http://docs.libuv.org/en/v1.x/fs.html</a><br>libuv provides a wide variety of cross-platform sync and async file system operations. All functions defined in this document take a callback, which is allowed to be NULL. If the callback is NULL the request is completed synchronously, otherwise it will be performed asynchronously.</p></blockquote><p>&emsp;&emsp;uv__fs_work这个函数就是<strong>文件操作的封装</strong>，所有的文件操作都通过这个函数来完成，即使是异步，最终也要在别的线程中同步执行这个函数。 <br><br>&emsp;&emsp;uv__fs_done这个函数会调用用户给的回调函数，这个函数会在uv_run中的is_poll函数中得到执行。</p><p>&emsp;&emsp;uv__work_submit函数的实现是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__work_submit</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop,struct uv__work* w,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">enum</span> uv__work_kind kind, <span class="keyword">void</span> (*work)(struct uv__work* w),</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">void</span> (*done)(struct uv__work* w, <span class="keyword">int</span> status))</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uv_once(&amp;once, init_once);</span><br><span class="line">  w-&gt;loop = loop;</span><br><span class="line">  w-&gt;work = work;</span><br><span class="line">  w-&gt;done = done;</span><br><span class="line">  post(&amp;w-&gt;wq, kind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;uv_once(&amp;once, init_once);是初始化多个线程，我在<a href="https://lurenaa.github.io/2019/11/18/libuv3/" target="_blank" rel="noopener">我的第三篇文章</a>中有介绍。不过当时对于子线程运行的worker函数没有提及，work函数大概是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">worker</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  uv_mutex_lock(&amp;mutex);</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">while</span> (QUEUE_EMPTY(&amp;wq)...) &#123;</span><br><span class="line">      idle_threads += <span class="number">1</span>;</span><br><span class="line">      uv_cond_wait(&amp;cond, &amp;mutex);</span><br><span class="line">      idle_threads -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q = QUEUE_HEAD(&amp;wq);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);  </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    w = QUEUE_DATA(q, struct uv__work, wq);</span><br><span class="line">    w-&gt;work(w);</span><br><span class="line"></span><br><span class="line">    uv_mutex_lock(&amp;w-&gt;loop-&gt;wq_mutex);</span><br><span class="line">    w-&gt;work = <span class="literal">NULL</span>;  </span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;w-&gt;loop-&gt;wq, &amp;w-&gt;wq);</span><br><span class="line">    uv_async_send(&amp;w-&gt;loop-&gt;wq_async);</span><br><span class="line">    uv_mutex_unlock(&amp;w-&gt;loop-&gt;wq_mutex);</span><br><span class="line"></span><br><span class="line">    uv_mutex_lock(&amp;mutex);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我去掉了对于slow_io的处理，大致是这样一个过程。</p><p>&emsp;&emsp;一开始线程会卡在uv_cond_wait这里，直到被uv_cond_signal唤醒，如果唤醒时wq队列中有任务，它就会执行任务，w-&gt;work(w)也就是调用uv__fs_work。然后把w放入loop-&gt;wq（为了uv__fs_done的执行）。</p><p>&emsp;&emsp;uv_async_send调用让loop-&gt;wq_async可读，主线程就从uv_run中的uv__io_poll的epoll_pwait中醒来，wq_async的回调函数会遍历loop-&gt;wq执行w-&gt;done。（<a href="https://lurenaa.github.io/2019/11/25/libuv4/" target="_blank" rel="noopener">我的第四篇文章</a>有讲这一部分的详细内容）</p><h4 id="谁来触发uv-cond-signal唤醒子线程呢？"><a href="#谁来触发uv-cond-signal唤醒子线程呢？" class="headerlink" title="谁来触发uv_cond_signal唤醒子线程呢？"></a>谁来触发uv_cond_signal唤醒子线程呢？</h4><p>🥣uv__work_submit中的post函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uv_mutex_lock(&amp;mutex);</span><br><span class="line">...</span><br><span class="line">QUEUE_INSERT_TAIL(&amp;wq, q);</span><br><span class="line"><span class="keyword">if</span> (idle_threads &gt; <span class="number">0</span>)</span><br><span class="line">  uv_cond_signal(&amp;cond);</span><br><span class="line">uv_mutex_unlock(&amp;mutex);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我再次省略了slow_io的部分，因为它们只是特殊处理。</p><p>&emsp;&emsp;该函数有空闲的线程就唤醒，不然就阻塞该线程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> libuv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（4）async</title>
      <link href="/2019/11/25/libuv4/"/>
      <url>/2019/11/25/libuv4/</url>
      
        <content type="html"><![CDATA[<h4 id="uv-async-init"><a href="#uv-async-init" class="headerlink" title="uv_async_init"></a>uv_async_init</h4><p>&emsp;&emsp;libuv中async的开端在uv_loop_init函数中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前面省略</span></span><br><span class="line">err = uv_async_init(loop, &amp;loop-&gt;wq_async, uv__work_done);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line">  <span class="keyword">goto</span> fail_async_init;</span><br><span class="line"></span><br><span class="line">uv__handle_unref(&amp;loop-&gt;wq_async);</span><br><span class="line">loop-&gt;wq_async.flags |= UV_HANDLE_INTERNAL;</span><br><span class="line"><span class="comment">//后面省略</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;loop-&gt;wq_async是个uv_async_t类型，它用于线程work函数调用最后处理loop-&gt;wq中的回调，暂时不用管,我在<a href="https://lurenaa.github.io/2019/11/26/libuv5/" target="_blank" rel="noopener">我的第五篇文章</a>会讲到它的用途。<br/><br>&emsp;&emsp;我们来看uv_async_init内部：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> err;</span><br><span class="line">err = uv__async_start(loop);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line">  <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">uv__handle_init(loop, (<span class="keyword">uv_handle_t</span>*)handle, UV_ASYNC);</span><br><span class="line">handle-&gt;async_cb = async_cb;</span><br><span class="line">handle-&gt;pending = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">QUEUE_INSERT_TAIL(&amp;loop-&gt;async_handles, &amp;handle-&gt;<span class="built_in">queue</span>);</span><br><span class="line">uv__handle_start(handle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;第五行以后的操作就是初始化基类uv_handle_t以及子类uv_async_t，然后将这个handle放入loop-&gt;queue(放uv_handle_t的队列)以及放入loop-&gt;async_handles（放uv_async_t的队列）中，然后uv__handle_start中将loop-&gt;active_handles加一。<br/><br>&emsp;&emsp;总而言之，第五行以后的内容就是初始化uv_async_t，可以理解成<strong>uv_async_t的构造函数</strong>。<br/><br>&emsp;&emsp;uv__async_start则不一样，它是初始化函数，它<strong>只会调用一次</strong>（一般情况是在uv_loop_init中调用），我们先看下它的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uv__async_start</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;async_io_watcher.fd != <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  err = uv__async_eventfd();</span><br><span class="line">  <span class="keyword">if</span> (err &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    pipefd[<span class="number">0</span>] = err;</span><br><span class="line">    pipefd[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//中间省略</span></span><br><span class="line"></span><br><span class="line">  uv__io_init(&amp;loop-&gt;async_io_watcher, uv__async_io, pipefd[<span class="number">0</span>]);</span><br><span class="line">  uv__io_start(loop, &amp;loop-&gt;async_io_watcher, POLLIN);</span><br><span class="line">  loop-&gt;async_wfd = pipefd[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;看第三行loop-&gt;async_io_watcher.fd，当你调用过一次这个函数后，loop-&gt;async_io_watcher.fd不会等于-1，以后你初始化uv_async_t类型变量，调用uv_async_init函数时，uv__async_start都是直接返回的。<br><br>&emsp;&emsp;我省略掉了中间如果eventfd没有在当前系统下实现时的兼容性处理。总的来说，就是<strong>初始化loop-&gt;async_io_watcher</strong>。uv__io_t是为epoll设计的结构体。<del>这里你肯定感觉很懵逼，请坚持一下，最后我会梳理一下总体的整个过程。</del><br><br>&emsp;&emsp;uv__io_t的实现是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uv__io_t</span>&#123;</span><br><span class="line">  uv__io_cb cb;  <span class="comment">//回调函数 </span></span><br><span class="line">  <span class="keyword">void</span>* watcher_queue[<span class="number">2</span>]; <span class="comment">//放入loop-&gt;watcher_queue</span></span><br><span class="line">  <span class="keyword">void</span>* pending_queue[<span class="number">2</span>]; <span class="comment">//同理</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> pevents; <span class="comment">/* Pending event mask i.e. mask at next tick. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> events;  <span class="comment">/* Current event mask. */</span></span><br><span class="line">  <span class="keyword">int</span> fd;  <span class="comment">//文件描述符，用于epoll注册</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里uv__io_init函数是初始化loop-&gt;async_io_watcher这个结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QUEUE_INIT(&amp;w-&gt;pending_queue);</span><br><span class="line">QUEUE_INIT(&amp;w-&gt;watcher_queue);</span><br><span class="line">w-&gt;cb = cb;</span><br><span class="line">w-&gt;fd = fd; <span class="comment">//前面我们的eventfd</span></span><br><span class="line">w-&gt;events = <span class="number">0</span>;</span><br><span class="line">w-&gt;pevents = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;uv__io_start将loop-&gt;async_io_watcher放入loop-&gt;watcher_queue。还有对于loop-&gt;nfds大小的处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (QUEUE_EMPTY(&amp;w-&gt;watcher_queue))</span><br><span class="line">  QUEUE_INSERT_TAIL(&amp;loop-&gt;watcher_queue, &amp;w-&gt;watcher_queue);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (loop-&gt;watchers[w-&gt;fd] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">  loop-&gt;watchers[w-&gt;fd] = w;</span><br><span class="line">  loop-&gt;nfds++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;第四行以后的操作是为了在epoll后，我们得到struct event结构体，我们从event-&gt;data.fd可以得到fd，那<strong>我们如何获取到对应的uv__io_t呢？</strong> 就是通过loop-&gt;watchers这个数组。</p><h4 id="uv-async-send"><a href="#uv-async-send" class="headerlink" title="uv_async_send"></a>uv_async_send</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_async_send</span><span class="params">(<span class="keyword">uv_async_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Do a cheap read first. */</span></span><br><span class="line">  <span class="keyword">if</span> (ACCESS_ONCE(<span class="keyword">int</span>, handle-&gt;pending) != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Tell the other thread we're busy with the handle. */</span></span><br><span class="line">  <span class="keyword">if</span> (cmpxchgi(&amp;handle-&gt;pending, <span class="number">0</span>, <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Wake up the other thread's event loop. */</span></span><br><span class="line">  uv__async_send(handle-&gt;loop);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Tell the other thread we're done. */</span></span><br><span class="line">  <span class="keyword">if</span> (cmpxchgi(&amp;handle-&gt;pending, <span class="number">1</span>, <span class="number">2</span>) != <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;ACCESS_ONCE：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACCESS_ONCE(type, var)  \</span></span><br><span class="line">  (*(<span class="keyword">volatile</span> type*) &amp;(var))</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里调用一次ACCESS_ONCE，是为了告诉编译器，handle-&gt;pending可能被其他线程修改，所以别给我乱优化。<br><br>&emsp;&emsp;cmpxchgi是原子操作compare_and_change。pending的有三个取值0，1，2。0代表闲置、1代表忙（比如uv_async_send调用途中）、2代表完成。loop-&gt;async_io_watcher调用uv__async_io时，会遍历loop-&gt;async_handles，通过pending来判断哪些回调该被执行。<br><br>&emsp;&emsp;uv__async_send就是向loop-&gt;async_io_watcher.fd（eventfd）写（这里关系到eventfd的机制，不懂可以man eventfd）。</p><h4 id="整体调用过程"><a href="#整体调用过程" class="headerlink" title="整体调用过程"></a>整体调用过程</h4><p>&emsp;&emsp;这里总体归纳一下async的过程。<br><br>&emsp;&emsp;1.在loop_uv_init中初始化async_io_watcher，它的fd为eventfd，值为0，不可读。<br><br>&emsp;&emsp;2.用户uv_async_init注册uv_async_t变量，被添加到loop-&gt;async_handles，设置回调函数。<br><br>&emsp;&emsp;3.如果对uv_async_t变量调用uv_async_send，那么uv_async_t变量的pending变为2（done），并且向eventfd写，loop-&gt;async_io_watcher可读了。<br><br>&emsp;&emsp;4.在uv_run的uv__io_poll中，每次都会把loop-&gt;watchers注册到epoll中，<strong>第四步这个过程在每次事件循环中都在执行</strong>。如果async_io_watcher的fd不可读，就没它事儿。如果可读，async_io_watcher的回调函数uv__async_io执行，它遍历loop-&gt;async_handles，将其中pending为2的uv_async_t变量移除队列，并执行其回调函数。</p><h4 id="看源码后写的小DEMO：-https-github-com-LurenAA-simple-imitation-of-libuv"><a href="#看源码后写的小DEMO：-https-github-com-LurenAA-simple-imitation-of-libuv" class="headerlink" title="看源码后写的小DEMO： https://github.com/LurenAA/simple_imitation_of_libuv"></a>看源码后写的小DEMO： <a href="https://github.com/LurenAA/simple_imitation_of_libuv" target="_blank" rel="noopener">https://github.com/LurenAA/simple_imitation_of_libuv</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> libuv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh: connect to host github.com port 22: Connection refused</title>
      <link href="/2019/11/24/problems1/"/>
      <url>/2019/11/24/problems1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br><span class="line">vim .ssh/config</span><br></pre></td></tr></table></figure><p>你会发现这是一个新文件，在其中添加以下文字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User 你的用户名（例如97860xx@qq.com）</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><p>然后保存退出（代码如下）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>接下来测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现下面的画面：<br><img src="../assets/ssh-connect.PNG" alt=""><br>在图片倒数第五行的地方会询问是否建立连接，输入yes即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 遇见的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（3）init_threads</title>
      <link href="/2019/11/18/libuv3/"/>
      <url>/2019/11/18/libuv3/</url>
      
        <content type="html"><![CDATA[<h4 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h4><p>&emsp;&emsp;在我们第一次提交io操作时，会有uv_once被调用，来检测是否初始化过线程池，如果没有则立刻<strong>初始化线程池</strong>。所以说线程池并非一开始在uv_run的时候或者在loop中初始化的，而是在io操作开始前。<br><strong>我以uv_open为例子画一下UML图如下：</strong><br><img src="https://img-blog.csdnimg.cn/20191118023241696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMDE1MDQ4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在uv_open中先初始化req，然后准备提交work，提交前会调用uv_once检测是否初始化线程池，没有则初始化。</p><h4 id="init-once"><a href="#init-once" class="headerlink" title="init_once"></a>init_once</h4><p>uv_once实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_ONCE_INIT PTHREAD_ONCE_INIT</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uv_once_t</span> once = UV_ONCE_INIT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init_once</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _WIN32</span></span><br><span class="line">  <span class="comment">/* Re-initialize the threadpool after fork.</span></span><br><span class="line"><span class="comment">   * Note that this discards the global mutex and condition as well</span></span><br><span class="line"><span class="comment">   * as the work queue.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (pthread_atfork(<span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;reset_once))</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  init_threads();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在uv__work_submit中uv_once是这样被调用的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__work_submit</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">  uv_once(&amp;once, init_once);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这一部分可以参看TLPI 31.2部分，libuv多做了pthread_atfork的处理。<br>&emsp;&emsp;pthread_atfork注册reset_once函数，在fork之后重置once，保证在libuv循环中如果你fork了一个进程，如果在那个新的进程中你也启动一个libuv，init_threads()能被调用。</p><h4 id="init-threads"><a href="#init-threads" class="headerlink" title="init_threads"></a>init_threads</h4><h6 id="🐤条件变量"><a href="#🐤条件变量" class="headerlink" title="🐤条件变量"></a>🐤条件变量</h6><p>&emsp;&emsp;libuv初始化<strong>条件变量</strong>时，调用自己的uv_cond_init，这个函数只做了一件事情，就是将<strong>条件变量</strong>的时钟设置为相对时间，这一点是值得我们自己写代码时参考的，相对时间不受系统时间的影响。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_cond_init</span><span class="params">(<span class="keyword">uv_cond_t</span>* cond)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  err = pthread_condattr_setclock(&amp;attr, CLOCK_MONOTONIC);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="🥛互斥锁"><a href="#🥛互斥锁" class="headerlink" title="🥛互斥锁"></a>🥛互斥锁</h6><p>&emsp;&emsp;初始化<strong>互斥锁</strong>时，调用uv_mutex_init，在DEBUG时，libuv会将<strong>互斥锁</strong>设置为PTHREAD_MUTEX_ERRORCHECK，这样能自我检测是否为死锁，不过这会消耗性能，所以在运行时设置为默认值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_mutex_init</span><span class="params">(<span class="keyword">uv_mutex_t</span>* mutex)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(NDEBUG) || !defined(PTHREAD_MUTEX_ERRORCHECK)</span></span><br><span class="line">  <span class="keyword">return</span> UV__ERR(pthread_mutex_init(mutex, <span class="literal">NULL</span>));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_ERRORCHECK))</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PTHREAD_MUTEX_ERRORCHECK<br>This type of mutex provides error checking. A thread attempting to relock this mutex without first unlocking it shall return with an error. A thread attempting to unlock a mutex which another thread has locked shall return with an error. A thread attempting to unlock an unlocked mutex shall return with an error.</p></blockquote><h6 id="🥡信号量"><a href="#🥡信号量" class="headerlink" title="🥡信号量"></a>🥡信号量</h6><p>&emsp;&emsp;初始化每个线程时，libuv用<strong>信号量</strong>来保证init_threads函数在初始化完所有线程后退出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (uv_sem_init(&amp;sem, <span class="number">0</span>))</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nthreads; i++)</span><br><span class="line">    <span class="keyword">if</span> (uv_thread_create(threads + i, worker, &amp;sem))</span><br><span class="line">      <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nthreads; i++)</span><br><span class="line">    uv_sem_wait(&amp;sem);</span><br><span class="line"></span><br><span class="line">  uv_sem_destroy(&amp;sem);</span><br></pre></td></tr></table></figure><p>在linux下并且glibc版本大于2.21时，uv_sem_init(&amp;sem, 0)和sem_init(&amp;sem, 0)是一样的，没有额外的处理。<br>线程创建好后，在worker函数中会调用uv_sem_post释放<strong>信号量</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">worker</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  uv_sem_post((<span class="keyword">uv_sem_t</span>*) arg);</span><br><span class="line">  ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="🥚uv-thread-create"><a href="#🥚uv-thread-create" class="headerlink" title="🥚uv_thread_create"></a>🥚uv_thread_create</h6><p>&emsp;&emsp;uv_thread_create做的事情就是<strong>设置线程的stack大小</strong>，然后创建它。<br><img src="https://img-blog.csdnimg.cn/20191118025701932.png" alt="在这里插入图片描述"><br>thread_stack_size函数获取栈大小，有一些是跨平台兼容性的处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lim.rlim_cur -= lim.rlim_cur % (<span class="keyword">rlim_t</span>) getpagesize(); 和</span><br><span class="line"><span class="keyword">if</span> (lim.rlim_cur &gt;= PTHREAD_STACK_MIN)</span><br><span class="line">        <span class="keyword">return</span> lim.rlim_cur;</span><br></pre></td></tr></table></figure><p>上面两行的限制是来源于pthread_attr_setstacksize函数，一下是pthread_attr_setstacksize函数man手册的一部分。</p><blockquote><p>ERRORS<br>       pthread_attr_setstacksize() can fail with the following error:<br>EINVAL The stack size is less than PTHREAD_STACK_MIN (16384) bytes.<br> On some systems, pthread_attr_setstacksize() can fail with the error EINVAL if stacksize is not a multiple of<br>       the system page size.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> size_t <span class="title">thread_stack_size</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__APPLE__) || defined(__linux__)</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">lim</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (getrlimit(RLIMIT_STACK, &amp;lim))</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lim.rlim_cur != RLIM_INFINITY) &#123;</span><br><span class="line">    <span class="comment">/* pthread_attr_setstacksize() expects page-aligned values. */</span></span><br><span class="line">    lim.rlim_cur -= lim.rlim_cur % (<span class="keyword">rlim_t</span>) getpagesize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Musl's PTHREAD_STACK_MIN is 2 KB on all architectures, which is</span></span><br><span class="line"><span class="comment">     * too small to safely receive signals on.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Musl's PTHREAD_STACK_MIN + MINSIGSTKSZ == 8192 on arm64 (which has</span></span><br><span class="line"><span class="comment">     * the largest MINSIGSTKSZ of the architectures that musl supports) so</span></span><br><span class="line"><span class="comment">     * let's use that as a lower bound.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * We use a hardcoded value because PTHREAD_STACK_MIN + MINSIGSTKSZ</span></span><br><span class="line"><span class="comment">     * is between 28 and 133 KB when compiling against glibc, depending</span></span><br><span class="line"><span class="comment">     * on the architecture.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (lim.rlim_cur &gt;= <span class="number">8192</span>)</span><br><span class="line">      <span class="keyword">if</span> (lim.rlim_cur &gt;= PTHREAD_STACK_MIN)</span><br><span class="line">        <span class="keyword">return</span> lim.rlim_cur;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> &lt;&lt; <span class="number">20</span>;  <span class="comment">/* glibc default. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>😂无趣的是在linux Ubuntus我的环境下测试时，attr的默认stacksize和thread_stack_size函数设置到的是一样的值。下面是我的测试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;uv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">(<span class="keyword">void</span> *)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="number">123</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> stack_page() &#123;</span><br><span class="line">  rlimit x;</span><br><span class="line">  assert(getrlimit(RLIMIT_STACK, &amp;x) == <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">size_t</span> stack_size = x.rlim_cur - x.rlim_cur % getpagesize();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; stack_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">if</span>(stack_size &gt; PTHREAD_STACK_MIN) </span><br><span class="line">    <span class="keyword">return</span> stack_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line">  assert(pthread_attr_init(&amp;attr) == <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">size_t</span> stack_size;</span><br><span class="line">  pthread_attr_getstacksize(&amp;attr, &amp;stack_size);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; stack_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  stack_size = stack_page();</span><br><span class="line">  pthread_attr_setstacksize(&amp;attr, stack_size);</span><br><span class="line">  <span class="keyword">pthread_t</span> p1;</span><br><span class="line">  pthread_create(&amp;p1, &amp;attr, (<span class="keyword">void</span>* (*)(<span class="keyword">void</span>*))a, <span class="literal">nullptr</span>);</span><br><span class="line">  pthread_attr_destroy(&amp;attr);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> libuv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（2）uv__loop_alive</title>
      <link href="/2019/11/16/libuv2/"/>
      <url>/2019/11/16/libuv2/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>&emsp;&emsp;上一篇说了一下整体的事件循环，对于UV_RUN_DEFAULT模式来调用uv_run来说，uv__loop_alive就决定了是否退出，这一篇看一下uv__loop_alive的源码。</p><h5 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uv__loop_alive</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> uv__has_active_handles(loop) ||</span><br><span class="line">         uv__has_active_reqs(loop) ||</span><br><span class="line">         loop-&gt;closing_handles != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可见loop的状态取决于三个方面：handles、reqs、closing_handles </p><h5 id="handles"><a href="#handles" class="headerlink" title="handles"></a>handles</h5><p>&emsp;&emsp;uv__has_active_handles就是检查loop-&gt;active_handles值是否大于0.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__has_active_handles(loop)                                          \</span></span><br><span class="line">  ((loop)-&gt;active_handles &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Handle types. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_loop_s</span> <span class="title">uv_loop_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_handle_s</span> <span class="title">uv_handle_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_dir_s</span> <span class="title">uv_dir_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_stream_s</span> <span class="title">uv_stream_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_tcp_s</span> <span class="title">uv_tcp_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_udp_s</span> <span class="title">uv_udp_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_pipe_s</span> <span class="title">uv_pipe_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_tty_s</span> <span class="title">uv_tty_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_poll_s</span> <span class="title">uv_poll_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_timer_s</span> <span class="title">uv_timer_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_prepare_s</span> <span class="title">uv_prepare_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_check_s</span> <span class="title">uv_check_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_idle_s</span> <span class="title">uv_idle_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_async_s</span> <span class="title">uv_async_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_process_s</span> <span class="title">uv_process_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_fs_event_s</span> <span class="title">uv_fs_event_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_fs_poll_s</span> <span class="title">uv_fs_poll_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_signal_s</span> <span class="title">uv_signal_t</span>;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;handles列表如上。handle在调用时，会包含一个函数的调用，就是<br>uv__handle_start。下图所示，是哪些函数调用了uv__handle_start。<del>有一些handle不在其中，可能与其调用方式有关，我暂时无法解释</del><br><img src="https://img-blog.csdnimg.cn/20191116181231294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMDE1MDQ4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__handle_start(h)                                                   \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) != <span class="number">0</span>) <span class="keyword">break</span>;                          \</span><br><span class="line">    (h)-&gt;flags |= UV_HANDLE_ACTIVE;                                           \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_REF) != <span class="number">0</span>) uv__active_handle_add(h);          \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;uv__handle_start函数在调用时，会调用uv__active_handle_add，uv__active_handle_add就是将loop-&gt;active_handles++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__active_handle_add(h)                                              \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    (h)-&gt;loop-&gt;active_handles++;                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;相应的在handle结束时有uv__active_handle_rm的调用，(h)-&gt;loop-&gt;active_handles减一。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__active_handle_rm(h)                                               \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    (h)-&gt;loop-&gt;active_handles--;                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h5 id="req"><a href="#req" class="headerlink" title="req"></a>req</h5><p>&emsp;&emsp;uv__has_active_reqs和handle的道理一样，是检测(loop)-&gt;active_reqs.count &gt; 0。active_reqs是个共用体，它的另一个用途暂时我还不知道。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__has_active_reqs(loop)                                             \</span></span><br><span class="line">  ((loop)-&gt;active_reqs.count &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Request types. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_req_s</span> <span class="title">uv_req_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_getaddrinfo_s</span> <span class="title">uv_getaddrinfo_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_getnameinfo_s</span> <span class="title">uv_getnameinfo_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_shutdown_s</span> <span class="title">uv_shutdown_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_write_s</span> <span class="title">uv_write_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_connect_s</span> <span class="title">uv_connect_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_udp_send_s</span> <span class="title">uv_udp_send_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_fs_s</span> <span class="title">uv_fs_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_work_s</span> <span class="title">uv_work_t</span>;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;uv__req_register(loop, req)等同于handle的uv__active_handle_add。uv__req_register在uv__req_init中调用，几乎（<del>漏网的暂时没法解释</del> ）每个req在初始化时都调用了uv__req_init。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__req_init(loop, req, typ)                                          \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    UV_REQ_INIT(req, typ);                                                    \</span><br><span class="line">    uv__req_register(loop, req);                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__req_register(loop, req)                                           \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    (loop)-&gt;active_reqs.count++;                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下图所示是那些函数调用了uv__req_init，由名称我们可以看出来它们是属于哪些req的。<br><img src="https://img-blog.csdnimg.cn/20191116181900253.png" alt="在这里插入图片描述"><br>&emsp;&emsp;同理，还有uv__req_unregister。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__req_unregister(loop, req)                                         \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    assert(uv__has_active_reqs(loop));                                        \</span><br><span class="line">    (loop)-&gt;active_reqs.count--;                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h5 id="closing-handles"><a href="#closing-handles" class="headerlink" title="closing_handles"></a>closing_handles</h5><p>&emsp;&emsp;要关闭的handle会以链表的形式挂在loop-&gt;closing_handles上。这个操作通过调用uv__make_close_pending来实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__make_close_pending</span><span class="params">(<span class="keyword">uv_handle_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  assert(handle-&gt;flags &amp; UV_HANDLE_CLOSING);</span><br><span class="line">  assert(!(handle-&gt;flags &amp; UV_HANDLE_CLOSED));</span><br><span class="line">  handle-&gt;next_closing = handle-&gt;loop-&gt;closing_handles;</span><br><span class="line">  handle-&gt;loop-&gt;closing_handles = handle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果closing_handles不为空，那么还需要进入事件循环，去调用关闭的handle的回调函数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> libuv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（1）事件循环分析</title>
      <link href="/2019/11/16/libuv1/"/>
      <url>/2019/11/16/libuv1/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>&emsp;&emsp;libuv总是报出一些让人难以理解的错误😂，作为一个C的项目，不具有Java、JavaScript、php那样的人气，很难百度到一些问题的答案，甚至google也不行。为了用好libuv，也为了学习吧。我开始看libuv的源码，不知道自己能走多远。。。</p></blockquote><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><img src="https://img-blog.csdnimg.cn/20191116165040610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMDE1MDQ4,size_16,color_FFFFFF,t_70" width="400" height="500" alt="Event Loop" align=center><p>这是官方事件循环的示意图。<a href="http://docs.libuv.org/en/v1.x/design.html" target="_blank" rel="noopener">链接-&gt;官方图片位置</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_run</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, uv_run_mode mode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> timeout;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> ran_pending;</span><br><span class="line"></span><br><span class="line">  r = uv__loop_alive(loop);</span><br><span class="line">  <span class="keyword">if</span> (!r)</span><br><span class="line">    uv__update_time(loop);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (r != <span class="number">0</span> &amp;&amp; loop-&gt;stop_flag == <span class="number">0</span>) &#123;</span><br><span class="line">    uv__update_time(loop);</span><br><span class="line">    uv__run_timers(loop);</span><br><span class="line">    ran_pending = uv__run_pending(loop);</span><br><span class="line">    uv__run_idle(loop);</span><br><span class="line">    uv__run_prepare(loop);</span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class="line">      timeout = uv_backend_timeout(loop);</span><br><span class="line"></span><br><span class="line">    uv__io_poll(loop, timeout);</span><br><span class="line">    uv__run_check(loop);</span><br><span class="line">    uv__run_closing_handles(loop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mode == UV_RUN_ONCE) &#123;</span><br><span class="line">      <span class="comment">/* UV_RUN_ONCE implies forward progress: at least one callback must have</span></span><br><span class="line"><span class="comment">       * been invoked when it returns. uv__io_poll() can return without doing</span></span><br><span class="line"><span class="comment">       * I/O (meaning: no callbacks) when its timeout expires - which means we</span></span><br><span class="line"><span class="comment">       * have pending timers that satisfy the forward progress constraint.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * UV_RUN_NOWAIT makes no guarantees about progress so it's omitted from</span></span><br><span class="line"><span class="comment">       * the check.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      uv__update_time(loop);</span><br><span class="line">      uv__run_timers(loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = uv__loop_alive(loop);</span><br><span class="line">    <span class="keyword">if</span> (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The if statement lets gcc compile it to a conditional store. Avoids</span></span><br><span class="line"><span class="comment">   * dirtying a cache line.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;stop_flag != <span class="number">0</span>)</span><br><span class="line">    loop-&gt;stop_flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;整个事件循环就是在主线程的uv_run（）调用中执行的。我就跟着官方的介绍一步一步来看（<a href="http://docs.libuv.org/en/v1.x/design.html" target="_blank" rel="noopener">官方介绍</a>）。</p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><blockquote><p>The loop concept of ‘now’ is updated. The event loop caches the current time at the start of the event loop tick in order to reduce the number of time-related system calls.</p></blockquote><p>&emsp;&emsp;第一步是更新时间。对应代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv__update_time(loop);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;总结来说就是调用这个函数，更新时间。<del>uv__update_time实现我下一篇来介绍</del> </p><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><blockquote><p>If the loop is alive an iteration is started, otherwise the loop will exit immediately. So, when is a loop considered to be alive? If a loop has active and ref’d handles, active requests or closing handles it’s considered to be alive.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = uv__loop_alive(loop);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;用uv__loop_alive函数获取loop状态。<br>&emsp;&emsp;如果uv__loop_alive返回零或者loop-&gt;stop_flag == 1说明loop终止，直接跳过循环，到代码最下面（<del>这里有一些性能的处理暂时不管</del> ），退出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The if statement lets gcc compile it to a conditional store. Avoids</span></span><br><span class="line"><span class="comment">   * dirtying a cache line.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;stop_flag != <span class="number">0</span>)</span><br><span class="line">    loop-&gt;stop_flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;loop-&gt;stop_flag == 0的一个来源是调用了uv_stop，这个函数在手册中看见。它的源代码也很清晰。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv_stop</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  loop-&gt;stop_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果loop状态OK，那么就进入循环中。</p><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><blockquote><p>Due timers are run. All active timers scheduled for a time before the loop’s concept of now get their callbacks called.</p></blockquote><p>&emsp;&emsp;对应代码这一部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">uv__run_timers(loop);</span><br><span class="line">其实现：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__run_timers</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">heap_node</span>* <span class="title">heap_node</span>;</span></span><br><span class="line">  <span class="keyword">uv_timer_t</span>* handle;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    heap_node = heap_min(timer_heap(loop));</span><br><span class="line">    <span class="keyword">if</span> (heap_node == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    handle = container_of(heap_node, <span class="keyword">uv_timer_t</span>, heap_node);</span><br><span class="line">    <span class="keyword">if</span> (handle-&gt;timeout &gt; loop-&gt;time)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    uv_timer_stop(handle);</span><br><span class="line">    uv_timer_again(handle);</span><br><span class="line">    handle-&gt;timer_cb(handle);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;将堆里面已经超时的拿出来运行。</p><h5 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h5><blockquote><p>Pending callbacks are called. All I/O callbacks are called right after polling for I/O, for the most part. There are cases, however, in which calling such a callback is deferred for the next loop iteration. If the previous iteration deferred any I/O callback it will be run at this point.</p></blockquote><p>对应：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ran_pending = uv__run_pending(loop);</span><br><span class="line">其实现：</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uv__run_pending</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  QUEUE pq;</span><br><span class="line">  <span class="keyword">uv__io_t</span>* w;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (QUEUE_EMPTY(&amp;loop-&gt;pending_queue))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  QUEUE_MOVE(&amp;loop-&gt;pending_queue, &amp;pq);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;pq)) &#123;</span><br><span class="line">    q = QUEUE_HEAD(&amp;pq);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);</span><br><span class="line">    w = QUEUE_DATA(q, <span class="keyword">uv__io_t</span>, pending_queue);</span><br><span class="line">    w-&gt;cb(loop, w, POLLOUT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;将loop-&gt;pending_queue中的任务拿出来运行。</p><h5 id="第五、六、九步"><a href="#第五、六、九步" class="headerlink" title="第五、六、九步"></a>第五、六、九步</h5><blockquote><p>5.Idle handle callbacks are called. Despite the unfortunate name, idle handles are run on every loop iteration, if they are active</p></blockquote><blockquote><p> 6.Prepare handle callbacks are called. Prepare handles get their callbacks called right before the loop will block for I/O.</p></blockquote><blockquote><p>9.Check handle callbacks are called. Check handles get their callbacks called right after the loop has blocked for I/O. Check handles are essentially the counterpart of prepare handles.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uv__run_idle(loop);</span><br><span class="line">uv__run_prepare(loop);</span><br><span class="line">uv__run_check(loop);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这三部为什么要一起说呢？因为它们的实质是一样的。在每次循环固定的位置调用。<br>&emsp;&emsp;这三个函数定义在loop-watcher.c这个文件里面，它们是用宏定义定义的。只改了idle、prepare、check这三个名字的部分，其余部分函数都是一样的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="comment"> * of this software and associated documentation files (the "Software"), to</span></span><br><span class="line"><span class="comment"> * deal in the Software without restriction, including without limitation the</span></span><br><span class="line"><span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></span><br><span class="line"><span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="comment"> * furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be included in</span></span><br><span class="line"><span class="comment"> * all copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING</span></span><br><span class="line"><span class="comment"> * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS</span></span><br><span class="line"><span class="comment"> * IN THE SOFTWARE.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uv.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"internal.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_WATCHER_DEFINE(name, type)                                    \</span></span><br><span class="line">  <span class="keyword">int</span> uv_#<span class="meta">#name##_init(uv_loop_t* loop, uv_##name##_t* handle) &#123;              \</span></span><br><span class="line">    uv__handle_init(loop, (<span class="keyword">uv_handle_t</span>*)handle, UV_##type);                   \</span><br><span class="line">    handle-&gt;name##_cb = <span class="literal">NULL</span>;                                                 \</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                                                 \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">                                                                              \</span><br><span class="line">  <span class="keyword">int</span> uv_#<span class="meta">#name##_start(uv_##name##_t* handle, uv_##name##_cb cb) &#123;           \</span></span><br><span class="line">    <span class="keyword">if</span> (uv__is_active(handle)) <span class="keyword">return</span> <span class="number">0</span>;                                      \</span><br><span class="line">    <span class="keyword">if</span> (cb == <span class="literal">NULL</span>) <span class="keyword">return</span> UV_EINVAL;                                         \</span><br><span class="line">    QUEUE_INSERT_HEAD(&amp;handle-&gt;loop-&gt;name##_handles, &amp;handle-&gt;<span class="built_in">queue</span>);         \</span><br><span class="line">    handle-&gt;name##_cb = cb;                                                   \</span><br><span class="line">    uv__handle_start(handle);                                                 \</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                                                 \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">                                                                              \</span><br><span class="line">  <span class="keyword">int</span> uv_#<span class="meta">#name##_stop(uv_##name##_t* handle) &#123;                               \</span></span><br><span class="line">    <span class="keyword">if</span> (!uv__is_active(handle)) <span class="keyword">return</span> <span class="number">0</span>;                                     \</span><br><span class="line">    QUEUE_REMOVE(&amp;handle-&gt;<span class="built_in">queue</span>);                                             \</span><br><span class="line">    uv__handle_stop(handle);                                                  \</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                                                 \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">                                                                              \</span><br><span class="line">  <span class="keyword">void</span> uv__run_#<span class="meta">#name(uv_loop_t* loop) &#123;                                      \</span></span><br><span class="line">    uv_#<span class="meta">#name##_t* h;                                                         \</span></span><br><span class="line">    QUEUE <span class="built_in">queue</span>;                                                              \</span><br><span class="line">    QUEUE* q;                                                                 \</span><br><span class="line">    QUEUE_MOVE(&amp;loop-&gt;name##_handles, &amp;<span class="built_in">queue</span>);                                \</span><br><span class="line">    <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;<span class="built_in">queue</span>)) &#123;                                            \</span><br><span class="line">      q = QUEUE_HEAD(&amp;<span class="built_in">queue</span>);                                                 \</span><br><span class="line">      h = QUEUE_DATA(q, uv_##name##<span class="keyword">_t</span>, <span class="built_in">queue</span>);                                \</span><br><span class="line">      QUEUE_REMOVE(q);                                                        \</span><br><span class="line">      QUEUE_INSERT_TAIL(&amp;loop-&gt;name##_handles, q);                            \</span><br><span class="line">      h-&gt;name##_cb(h);                                                        \</span><br><span class="line">    &#125;                                                                         \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">                                                                              \</span><br><span class="line">  <span class="keyword">void</span> uv__#<span class="meta">#name##_close(uv_##name##_t* handle) &#123;                            \</span></span><br><span class="line">    uv_#<span class="meta">#name##_stop(handle);                                                 \</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">UV_LOOP_WATCHER_DEFINE(prepare, PREPARE)</span><br><span class="line">UV_LOOP_WATCHER_DEFINE(check, CHECK)</span><br><span class="line">UV_LOOP_WATCHER_DEFINE(idle, IDLE)</span><br></pre></td></tr></table></figure><h5 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h5><blockquote><p>Poll timeout is calculated. Before blocking for I/O the loop calculates for how long it should block. These are the rules when calculating the timeout:<br>If the loop was run with the UV_RUN_NOWAIT flag, the timeout is 0.<br>If the loop is going to be stopped (uv_stop() was called), the timeout is 0.<br>If there are no active handles or requests, the timeout is 0.<br>If there are any idle handles active, the timeout is 0.<br>If there are any handles pending to be closed, the timeout is 0.<br>If none of the above cases matches, the timeout of the closest timer is taken, or if there are no active timers, infinity.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class="line">      timeout = uv_backend_timeout(loop);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这部分是取决于uv_run的模式的特殊处理，暂时不细看。</p><h5 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h5><blockquote><p>The loop blocks for I/O. At this point the loop will block for I/O for the duration calculated in the previous step. All I/O related handles that were monitoring a given file descriptor for a read or write operation get their callbacks called at this point.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv__io_poll(loop, timeout);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这一部分对于不同操作系统有所不同，linux是poll，mac是kqueue。</p><h5 id="第十步"><a href="#第十步" class="headerlink" title="第十步"></a>第十步</h5><blockquote><p>Close callbacks are called. If a handle was closed by calling uv_close() it will get the close callback called.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv__run_closing_handles(loop);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;调用各类的close回调函数。</p><h5 id="第十一、十二步"><a href="#第十一、十二步" class="headerlink" title="第十一、十二步"></a>第十一、十二步</h5><blockquote><p>11.Special case in case the loop was run with UV_RUN_ONCE, as it implies forward progress. It’s possible that no I/O callbacks were fired after blocking for I/O, but some time has passed so there might be timers which are due, those timers get their callbacks called.<br>12.Iteration ends. If the loop was run with UV_RUN_NOWAIT or UV_RUN_ONCE modes the iteration ends and uv_run() will return. If the loop was run with UV_RUN_DEFAULT it will continue from the start if it’s still alive, otherwise it will also end.</p></blockquote><p>&emsp;&emsp;对于uv_run不同模式的一点特殊处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mode == UV_RUN_ONCE) &#123;</span><br><span class="line">      <span class="comment">/* UV_RUN_ONCE implies forward progress: at least one callback must have</span></span><br><span class="line"><span class="comment">       * been invoked when it returns. uv__io_poll() can return without doing</span></span><br><span class="line"><span class="comment">       * I/O (meaning: no callbacks) when its timeout expires - which means we</span></span><br><span class="line"><span class="comment">       * have pending timers that satisfy the forward progress constraint.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * UV_RUN_NOWAIT makes no guarantees about progress so it's omitted from</span></span><br><span class="line"><span class="comment">       * the check.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      uv__update_time(loop);</span><br><span class="line">      uv__run_timers(loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = uv__loop_alive(loop);</span><br><span class="line">    <span class="keyword">if</span> (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class="line">      <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>&emsp;&emsp;宏观上梳理一下整个事件循环的过程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> libuv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基数树rax源码分析(2.5)</title>
      <link href="/2019/08/14/rax3/"/>
      <url>/2019/08/14/rax3/</url>
      
        <content type="html"><![CDATA[<h5 id="点点废话"><a href="#点点废话" class="headerlink" title="点点废话"></a>点点废话</h5><p>&emsp;&emsp;最近没有再将rax的源码往下看，rax对于一个新手来说还是体量过大，在尝试自己写写，在写的时候遇到了一些坑，也体会到了rax的一些写法的精妙之处，记录一下。</p><hr><h5 id="宏定义函数的注意点："><a href="#宏定义函数的注意点：" class="headerlink" title="宏定义函数的注意点："></a>宏定义函数的注意点：</h5><p>&emsp;&emsp;我定义了这样一个宏定义函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define radixNthChild(h, n) \</span><br><span class="line">  (radix_node**)((char*)&amp;h-&gt;data + h-&gt;size + padding(h-&gt;size) + n * sizeof(void*))</span><br></pre></td></tr></table></figure><p>我这样调用这个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radixNthChild(new_cur, new_cur-&gt;size - 1)</span><br></pre></td></tr></table></figure><p>这样一个调用大家觉得有问题吗？嗯，肯定是有问题的，不然我说啥?。</p><p>这里，按照我们一般的调用函数的思路，这样一个调用的运行过程是这样的：</p><ol><li>计算出new_cur-&gt;size - 1</li><li>带入radixNthChild函数</li></ol><p>实际上恰恰相反，<strong>宏定义的处理在预编译时（g++ -E）</strong>，宏定义是将对于的定义替换掉，所以在<br>预编译后的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 363 &quot;radix_tree.c&quot;</span><br><span class="line">    memcpy((radix_node**)((char*)&amp;new_cur-&gt;data + new_cur-&gt;size + ((sizeof(void*) - (sizeof(radix_node) + new_cur-&gt;size) % sizeof(void*)) &amp; (sizeof(void*) - 1)) + new_cur-&gt;size - 1 * sizeof(void*)), &amp;keyOne, sizeof(void*));</span><br></pre></td></tr></table></figure><p>可以看到是 ： + new_cur-&gt;size - 1 * sizeof(void<em>)<br>而不是我所想的： + （new_cur-&gt;size - 1） * sizeof(void</em>)</p><p><strong>可以得出其过程其实是：</strong></p><ol><li>函数宏定义替换</li><li>运行时计算</li></ol><p> <strong>结论： 在宏定义函数调用时注意括号的问题</strong>，不加括号可能会<del>由于运算符优先级而</del> 导致表达式意义与我们想的有出入?</p><hr><h5 id="地址运算注意点"><a href="#地址运算注意点" class="headerlink" title="地址运算注意点"></a>地址运算注意点</h5><p>先给出这样一个结构体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct test &#123;</span><br><span class="line">void* a, *b, *c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>int main(void) {cout &lt;&lt; sizeof(test) &lt;&lt; endl;test* p = new test;fprintf(stdout, &quot;%p:%p:%p:%p\n&quot;, p, p + 1, (char*)p + 1, (int*)p+1);return 0;}</code></pre><p>&emsp;&emsp;在这样一个测试代码中，大家觉得p + 1, (char<em>)p + 1, (int</em>)p+1这三个结果，相对于p的数值相差多少呢？<br><img src="https://img-blog.csdnimg.cn/20190814211800282.png" alt="在这里插入图片描述"><br>&emsp;&emsp;运行结果是这样的。类型与地址的运算是有着密切关系的。</p><ul><li>p + 1是一个默认情况， 这时1的意义是一个p的地址宽度</li><li>(char*)p + 1，p被解释为char类型指针，指向的地址被解释为char，于是1就是一个char的地址宽度。</li></ul><p><strong>总结：</strong> 在计算地址时，要注意运算符左边值的类型。你加上的1可能并不是一个字节的大小。</p><blockquote><p>这是我边看rax边实现的一个小练习，欢迎大家指教：<a href="https://github.com/LurenAA/radix_tree" target="_blank" rel="noopener">https://github.com/LurenAA/radix_tree</a> ，好想要个star，求求了，兄弟萌:kissing_heart:</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> rax源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基数树rax源码分析(2)</title>
      <link href="/2019/08/12/rax2/"/>
      <url>/2019/08/12/rax2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天我想要说的是rax中的padding这个函数，我查了很多的资料，大家的博客都告诉我们内存对齐提高性能，却没有去分析为什么，是有根据让作者选择这样做？如果只是这样简单的放过，总感觉让人有一丝的遗憾。</p></blockquote><hr><p>&emsp;&emsp;<br><strong>先把主角拉出来：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define raxPadding(nodesize) </span><br><span class="line">((sizeof(void*)-((nodesize+4) % sizeof(void*))) &amp; (sizeof(void*)-1))</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;首先要说的是raxPadding的作用是：让raxNewNode申请的内存nodesize是8的倍数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">raxNode *raxNewNode(size_t children, int datafield) &#123;</span><br><span class="line">    size_t nodesize = sizeof(raxNode)+children+raxPadding(children)+</span><br><span class="line">                      sizeof(raxNode*)*children;</span><br><span class="line">    if (datafield) nodesize += sizeof(void*);</span><br><span class="line">    raxNode *node = rax_malloc(nodesize);</span><br><span class="line">    if (node == NULL) return NULL;</span><br><span class="line">    node-&gt;iskey = 0;</span><br><span class="line">    node-&gt;isnull = 0;</span><br><span class="line">    node-&gt;iscompr = 0;</span><br><span class="line">    node-&gt;size = children;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="第一个问题：对齐的优势"><a href="#第一个问题：对齐的优势" class="headerlink" title="第一个问题：对齐的优势"></a>第一个问题：对齐的优势</h6><p>&emsp;&emsp;这个并不是我想说的重点，这里是大家都谈到的，也就是<strong>经过内存对齐之后，CPU的内存访问速度大大提升</strong>。对于我来说，这个结论感觉还是太模糊，这是一个定性的结论，具体的底层细节对于我们初学者来说倒是没必要去深究。</p><h6 id="第二个问题：为什么要这么去做？"><a href="#第二个问题：为什么要这么去做？" class="headerlink" title="第二个问题：为什么要这么去做？"></a>第二个问题：为什么要这么去做？</h6><p>&emsp;&emsp;rax的作者这样的做法其实是<strong>参考结构体的做法</strong>。<br><strong>举个例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct X</span><br><span class="line">&#123;</span><br><span class="line">    char a;</span><br><span class="line">    int c;</span><br><span class="line">    double b;</span><br><span class="line">&#125;S2;</span><br></pre></td></tr></table></figure><p>这样一个结构体，它的大小是多少？答案是16。<br>在c语言的内部，做了这样的内存对齐处理：<br><img src="https://img-blog.csdnimg.cn/20190812190523897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMDE1MDQ4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>这里转载了<a href="https://www.cnblogs.com/zhoujiayi/p/7872262.html" target="_blank" rel="noopener">这篇文章</a>中的很多资源，大家也可以去看看这篇文章，写的很不错。也有更多例子。</p></blockquote><h5 id="回到rax上来"><a href="#回到rax上来" class="headerlink" title="回到rax上来"></a>回到rax上来</h5><p>&emsp;&emsp; 在rax的raxNode这个结构体中，<del>因为使用了<strong>柔性数组</strong>，所以在c语言本身是无法帮助我们实现像上面一样的内存对齐的（sizeof(raxNode) == 4,我们申请的内存大小决定了柔性数组的长度，详情请百度柔性数组）</del> ，c语言对于结构体的优化没有包含柔性数组这个部分，所以<strong>我们必须自己来接管这一部分的内存对齐，保证程序的运行效率。</strong></p><pre><code>typedef struct raxNode {uint32_t iskey:1;     /* Does this node contain a key? */uint32_t isnull:1;    /* Associated value is NULL (don&apos;t store it). */uint32_t iscompr:1;   /* Node is compressed. */uint32_t size:29;     /* Number of children, or compressed string len. */unsigned char data[];} raxNode;</code></pre><blockquote><p>这是我边看rax边实现的一个小练习，欢迎大家指教：<a href="https://github.com/LurenAA/radix_tree" target="_blank" rel="noopener">https://github.com/LurenAA/radix_tree</a> ，好想要个star，求求了，兄弟萌:kissing_heart:</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> rax源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基数树rax源码分析(1)</title>
      <link href="/2019/08/12/rax1/"/>
      <url>/2019/08/12/rax1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;最近想用libuv写个http服务器，看到了这个开源项目<a href="https://github.com/haywire/haywire" target="_blank" rel="noopener">haywire</a>，在看到第39次提交的时候，作者用基数树来存储不同路由的controller，不过在后续版本中改为了使用hash，不过想来不如正好学学基数树，作者使用的基数树是这个版本<a href="https://github.com/j0sh/radixtree" target="_blank" rel="noopener">radix_tree</a>，这个版本缺少注释，且和一般思路不一样的使用的是二叉树而非N叉树，为了理解方便，我选择了注释较多的<a href="https://github.com/antirez/rax" target="_blank" rel="noopener">rax</a></p></blockquote><hr><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><p>&emsp;&emsp;首先要提到的是rax的数据结构设计：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct raxNode &#123;</span><br><span class="line">    uint32_t iskey:1;     /* Does this node contain a key? */</span><br><span class="line">    uint32_t isnull:1;    /* Associated value is NULL (don&apos;t store it). */</span><br><span class="line">    uint32_t iscompr:1;   /* Node is compressed. */</span><br><span class="line">    uint32_t size:29;     /</span><br><span class="line">    unsigned char data[];</span><br><span class="line">&#125; raxNode;</span><br></pre></td></tr></table></figure><p>这里第一个要说到的点是：你觉得这样一个数据结构的大小是多少？24？ 16？ 还是8？<br><img src="https://img-blog.csdnimg.cn/20190811233343948.png" alt="在这里插入图片描述"><br>&emsp;&emsp;<strong>第一个原因</strong>是位域，也就是结构体中的<strong>冒号：</strong>  ，冒号在这里声明实际需要使用的位数，iskey，isnull，iscompr，size四个一共加起来32位，占4个字节。<br>&emsp;&emsp;<strong>第二个原因</strong>是data[]占0个字节。unsigned char data[];这样一个结构在这里并不是理解成一个指针8个字节。而是一个<strong>柔性数组</strong>的概念，实现一个可变长度。data[1]占结构体1个字节，data[2]占结构体2个字节…….data[13]占13个字节。数组类型的内存是结构体中直接分配的，而不是像指针一样需要我们后来分配。如下图可见：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct raxNode &#123;</span><br><span class="line">    unsigned char data[13];</span><br><span class="line">&#125; raxNode;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;%d\n&quot;, sizeof(raxNode));</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190812000143659.png" alt="在这里插入图片描述"></p><hr><h5 id="data"><a href="#data" class="headerlink" title="data[]"></a>data[]</h5><p>&emsp;&emsp;接下来我们还是要谈data，在这里data的意义并不是一个简单的unsigned char数组，它存储的是键值key和radixNode指针两种变量。<br><img src="https://img-blog.csdnimg.cn/20190812001425256.png" alt="在这里插入图片描述"><br>图来自：<a href="https://my.oschina.net/yunqi/blog/3039132" target="_blank" rel="noopener">https://my.oschina.net/yunqi/blog/3039132</a><br>data的实际使用方式在大多数时候是以<strong>内存地址</strong>的方式进行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define raxNodeLastChildPtr(n) ((raxNode**) ( \</span><br><span class="line">    ((char*)(n)) + \</span><br><span class="line">    raxNodeCurrentLength(n) - \</span><br><span class="line">    sizeof(raxNode*) - \</span><br><span class="line">    (((n)-&gt;iskey &amp;&amp; !(n)-&gt;isnull) ? sizeof(void*) : 0) \</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这是访问最后一个节点的函数（也就是访问图中的A-ptr）。n是一个raxNode*指针，对这个指针指向的地址进行＋操作来得到最后一个节点的地址。</p><hr><h5 id="节点的表示"><a href="#节点的表示" class="headerlink" title="节点的表示"></a>节点的表示<img src="https://img-blog.csdnimg.cn/20190812001723801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMDE1MDQ4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h5><p>图来自：<a href="https://my.oschina.net/yunqi/blog/3039132" target="_blank" rel="noopener">https://my.oschina.net/yunqi/blog/3039132</a><br>&emsp;&emsp;假设基数树中有“abcd”这个键值的节点。那么它的表示形式是像上图这样的。“abcd”这个节点的value-data存储在图片下半部分的节点处，并且下面一个节点iskey设为1.<br>&emsp;&emsp;<strong>为什么不是直接只有图片的上半部分，由图片上半部分那个节点将iskey设置为1并且将值存储在其value·data中呢？</strong><br>像这样： <strong>[iskey:1][isnull: 0][iscompr:1][size:4][abcd] [z-ptr ][value-ptr]</strong></p><h4 id="先给出结论：-在rax中一个节点的存在（iskey-1）是由data中对应的子节点来表示的。"><a href="#先给出结论：-在rax中一个节点的存在（iskey-1）是由data中对应的子节点来表示的。" class="headerlink" title="先给出结论： 在rax中一个节点的存在（iskey == 1）是由data中对应的子节点来表示的。"></a>先给出结论： 在rax中一个节点的存在（iskey == 1）是由data中对应的子节点来表示的。</h4><p><strong>原因很简单：</strong><br><img src="https://img-blog.csdnimg.cn/20190812002913974.png" alt="在这里插入图片描述"><br>在这个例子里面，这是一个没有压缩的节点，这一层由a和A两个子节点，如果在当前层次表示，如何分辨你指定的是a还是A？所以用引出子节点来表示。</p><blockquote><p>这是我边看rax边实现的一个小练习，欢迎大家指教：<a href="https://github.com/LurenAA/radix_tree" target="_blank" rel="noopener">https://github.com/LurenAA/radix_tree</a> ，好想要个star，求求了，兄弟萌:kissing_heart:</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> rax源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
